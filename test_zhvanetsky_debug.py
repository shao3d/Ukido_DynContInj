#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.zhvanetsky_humor import ZhvanetskyGenerator
from src.zhvanetsky_safety import SafetyChecker
from src.openrouter_client import OpenRouterClient


async def test_single_generation():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    print("=" * 60)
    print("üé≠ –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –Æ–ú–û–†–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config()
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenRouter
    client = OpenRouterClient(
        api_key=config.OPENROUTER_API_KEY,
        model="anthropic/claude-3.5-haiku",
        temperature=config.ZHVANETSKY_TEMPERATURE
    )
    
    # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ safety checker
    safety_checker = SafetyChecker()
    generator = ZhvanetskyGenerator(client=client, config=config)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª?"
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    history = [
        {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ"},
        {"role": "assistant", "content": "Ukido - —ç—Ç–æ —à–∫–æ–ª–∞ soft skills..."}
    ]
    
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
    
    # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    try:
        from src.zhvanetsky_safety import TopicClassifier
        from src.zhvanetsky_golden import get_mixed_examples, format_examples_for_prompt
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ–º—É
        topic = TopicClassifier.classify(message)
        print(f"üìå –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        examples = get_mixed_examples(topic)
        print(f"üìö –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(examples)}")
        for i, ex in enumerate(examples, 1):
            if isinstance(ex, dict):
                print(f"   {i}. {ex.get('example', 'No example')[:50]}...")
            else:
                print(f"   {i}. {str(ex)[:50]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        formatted_examples = format_examples_for_prompt(examples)
        dialogue_context = generator._extract_dialogue_context(history)
        
        prompt = generator.HUMOR_PROMPT_TEMPLATE.format(
            dialogue_context=dialogue_context,
            message=message,
            examples=formatted_examples
        )
        
        print(f"\nüìã –ü—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(prompt[:500] + "...")
        
        # –í—ã–∑—ã–≤–∞–µ–º Haiku –Ω–∞–ø—Ä—è–º—É—é
        print(f"\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude Haiku...")
        response = await generator._call_claude_haiku(prompt)
        
        if response:
            print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Haiku:")
            print(f"   '{response}'")
            print(f"   –î–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            is_valid, error_reason = safety_checker.validate_humor_response(response)
            print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è:")
            print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {'‚úÖ –î–∞' if is_valid else '‚ùå –ù–µ—Ç'}")
            if not is_valid:
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {error_reason}")
        else:
            print(f"\n‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Haiku")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_single_generation()
    print("\n‚ú® –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())