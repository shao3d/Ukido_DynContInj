#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.zhvanetsky_humor import ZhvanetskyGenerator
from src.zhvanetsky_safety import SafetyChecker
from src.openrouter_client import OpenRouterClient


async def test_humor_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–º–æ—Ä–∞"""
    print("=" * 60)
    print("üé≠ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config()
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenRouter
    client = OpenRouterClient(
        api_key=config.OPENROUTER_API_KEY,
        model="anthropic/claude-3.5-haiku",
        temperature=config.ZHVANETSKY_TEMPERATURE
    )
    
    # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ safety checker
    safety_checker = SafetyChecker()
    generator = ZhvanetskyGenerator(client=client, config=config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ offtopic —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        ("–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª?", "sport"),
        ("–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è", "weather"),
        ("ChatGPT –ª—É—á—à–µ –≤–∞—Å?", "tech"),
        ("–ë–æ—Ä—â –∏–ª–∏ –ø–∏—Ü—Ü–∞?", "food"),
        ("–í –ø—Ä–æ–±–∫–∞—Ö –∑–∞—Å—Ç—Ä—è–ª", "transport"),
        ("–ö–∞–∫ –¥–µ–ª–∞?", "general")
    ]
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    history = [
        {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ"},
        {"role": "assistant", "content": "Ukido - —ç—Ç–æ —à–∫–æ–ª–∞ soft skills..."},
        {"role": "user", "content": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?"},
        {"role": "assistant", "content": "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ 30000 –≥—Ä–Ω..."}
    ]
    
    print("\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n")
    
    for message, expected_topic in test_messages:
        print(f"\nüîπ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è —Ç–µ–º–∞: {expected_topic}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä
        can_use, context = safety_checker.should_use_humor(
            message=message,
            user_signal="exploring_only",
            history=history,
            user_id="test_user",
            is_pure_social=False
        )
        
        print(f"   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä: {'‚úÖ –î–∞' if can_use else '‚ùå –ù–µ—Ç'}")
        
        if can_use:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —é–º–æ—Ä
            try:
                response = await generator.generate_humor(
                    message=message,
                    history=history,
                    user_signal="exploring_only",
                    user_id="test_user",
                    timeout=5.0
                )
                
                if response:
                    print(f"   üé≠ –û—Ç–≤–µ—Ç: {response}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —é–º–æ—Ä")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
    print("\n" + "=" * 60)
    print("üìä –ú–ï–¢–†–ò–ö–ò –ì–ï–ù–ï–†–ê–¢–û–†–ê:")
    print("=" * 60)
    metrics = generator.get_metrics()
    for key, value in metrics.items():
        print(f"  {key}: {value}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


async def test_rate_limiting():
    """–¢–µ—Å—Ç rate limiting"""
    print("\n" + "=" * 60)
    print("üîí –¢–ï–°–¢ RATE LIMITING")
    print("=" * 60)
    
    safety_checker = SafetyChecker()
    user_id = "rate_limit_test"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
    for i in range(5):
        can_use, context = safety_checker.should_use_humor(
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            user_signal="exploring_only",
            history=[],
            user_id=user_id,
            is_pure_social=False
        )
        
        if can_use:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            safety_checker.mark_humor_used(user_id)
            print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}: ‚úÖ –Æ–º–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        else:
            print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}: ‚ùå Rate limit ({context.get('reason', 'unknown')})")
    
    print(f"\n  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ rate limiter: {len(safety_checker.humor_usage)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ\n")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await test_humor_generation()
    
    # –¢–µ—Å—Ç rate limiting
    await test_rate_limiting()
    
    print("\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())