#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –∫–ª—é—á–∞ OpenRouter
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_openrouter_key.py
"""

import httpx
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

async def test_key():
    api_key = os.getenv("OPENROUTER_API_KEY", "")
    
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª—é—á: {api_key[:15]}...{api_key[-10:]}")
    print(f"üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "google/gemini-2.5-flash",
        "messages": [{"role": "user", "content": "Say 'API works!'"}],
        "max_tokens": 10
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=10.0
            )
            
            print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                result = response.json()
                if 'choices' in result:
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['choices'][0]['message']['content']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    asyncio.run(test_key())