#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã Ukido AI Assistant
–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é Python
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch, FancyArrowPatch
import matplotlib.lines as mlines

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –∏ –æ—Å–µ–π
fig, ax = plt.subplots(1, 1, figsize=(16, 12))
ax.set_xlim(0, 100)
ax.set_ylim(0, 100)
ax.axis('off')

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
ax.text(50, 95, '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Ukido AI Assistant v0.7.6', 
        fontsize=20, fontweight='bold', ha='center')
ax.text(50, 91, '2-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π Pipeline —Å –ø–æ—Ç–æ–∫–æ–º –¥–∞–Ω–Ω—ã—Ö', 
        fontsize=14, ha='center', style='italic')

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
colors = {
    'user': '#E8F4F8',
    'api': '#FFE5CC',
    'router': '#E8D4F1',
    'generator': '#D4F1F4',
    'db': '#FFF9E6',
    'external': '#F0F0F0',
    'social': '#FFE8F1'
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
user_box = FancyBboxPatch((5, 75), 15, 8, 
                          boxstyle="round,pad=0.1",
                          facecolor=colors['user'],
                          edgecolor='black', linewidth=2)
ax.add_patch(user_box)
ax.text(12.5, 79, 'üë§ –†–æ–¥–∏—Ç–µ–ª—å', fontsize=12, ha='center', fontweight='bold')
ax.text(12.5, 76.5, '–î–µ—Ç–∏ 7-14 –ª–µ—Ç', fontsize=9, ha='center')

# FastAPI Server
api_box = FancyBboxPatch((35, 70), 20, 18, 
                         boxstyle="round,pad=0.1",
                         facecolor=colors['api'],
                         edgecolor='black', linewidth=2)
ax.add_patch(api_box)
ax.text(45, 84, 'FastAPI Server', fontsize=12, ha='center', fontweight='bold')
ax.text(45, 81, 'üêç Python/FastAPI', fontsize=9, ha='center')
ax.text(45, 78, '‚Ä¢ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä', fontsize=8, ha='center')
ax.text(45, 75.5, '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è (10 —Å–æ–æ–±—â.)', fontsize=8, ha='center')
ax.text(45, 73, '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏', fontsize=8, ha='center')

# Gemini Router
router_box = FancyBboxPatch((10, 40), 25, 20, 
                           boxstyle="round,pad=0.1",
                           facecolor=colors['router'],
                           edgecolor='black', linewidth=2)
ax.add_patch(router_box)
ax.text(22.5, 56, 'Gemini Router', fontsize=12, ha='center', fontweight='bold')
ax.text(22.5, 53, 'üß† Gemini 2.5 Flash', fontsize=9, ha='center')
ax.text(22.5, 50, '‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', fontsize=8, ha='center')
ax.text(22.5, 47.5, '‚Ä¢ –ü–æ–¥–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', fontsize=8, ha='center')
ax.text(22.5, 45, '‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã', fontsize=8, ha='center')
ax.text(22.5, 42, '$0.30/1M —Ç–æ–∫–µ–Ω–æ–≤', fontsize=8, ha='center', style='italic', color='green')

# Claude Generator
generator_box = FancyBboxPatch((55, 40), 25, 20, 
                              boxstyle="round,pad=0.1",
                              facecolor=colors['generator'],
                              edgecolor='black', linewidth=2)
ax.add_patch(generator_box)
ax.text(67.5, 56, 'Claude Generator', fontsize=12, ha='center', fontweight='bold')
ax.text(67.5, 53, 'ü§ñ Claude 3.5 Haiku', fontsize=9, ha='center')
ax.text(67.5, 50, '‚Ä¢ –û—Ç–≤–µ—Ç—ã 100-150 —Å–ª–æ–≤', fontsize=8, ha='center')
ax.text(67.5, 47.5, '‚Ä¢ –°—Ç–∏–ª—å "–º—ã"', fontsize=8, ha='center')
ax.text(67.5, 45, '‚Ä¢ –≠–º–ø–∞—Ç–∏—è', fontsize=8, ha='center')
ax.text(67.5, 42, '$0.25/$1.25 –∑–∞ 1M', fontsize=8, ha='center', style='italic', color='green')

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
kb_box = FancyBboxPatch((35, 15), 20, 15, 
                        boxstyle="round,pad=0.1",
                        facecolor=colors['db'],
                        edgecolor='black', linewidth=2)
ax.add_patch(kb_box)
ax.text(45, 26, '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', fontsize=12, ha='center', fontweight='bold')
ax.text(45, 23, 'üìö 13 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', fontsize=9, ha='center')
ax.text(45, 20, '‚Ä¢ –ö—É—Ä—Å—ã –∏ —Ü–µ–Ω—ã', fontsize=8, ha='center')
ax.text(45, 17.5, '‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è', fontsize=8, ha='center')

# Social Components
social_box = FancyBboxPatch((70, 70), 18, 12, 
                           boxstyle="round,pad=0.1",
                           facecolor=colors['social'],
                           edgecolor='black', linewidth=1.5)
ax.add_patch(social_box)
ax.text(79, 78, 'Social Components', fontsize=10, ha='center', fontweight='bold')
ax.text(79, 75, '‚Ä¢ State Tracker', fontsize=8, ha='center')
ax.text(79, 72.5, '‚Ä¢ Responder', fontsize=8, ha='center')

# –í–Ω–µ—à–Ω–∏–µ API
openrouter_box = FancyBboxPatch((55, 5), 20, 8, 
                               boxstyle="round,pad=0.1",
                               facecolor=colors['external'],
                               edgecolor='gray', linewidth=1.5, linestyle='--')
ax.add_patch(openrouter_box)
ax.text(65, 9, 'OpenRouter API', fontsize=10, ha='center')
ax.text(65, 6.5, 'Claude 3.5 Haiku', fontsize=8, ha='center', style='italic')

gemini_api_box = FancyBboxPatch((10, 5), 20, 8, 
                               boxstyle="round,pad=0.1",
                               facecolor=colors['external'],
                               edgecolor='gray', linewidth=1.5, linestyle='--')
ax.add_patch(gemini_api_box)
ax.text(20, 9, 'Google Gemini API', fontsize=10, ha='center')
ax.text(20, 6.5, 'Gemini 2.5 Flash', fontsize=8, ha='center', style='italic')

# –°—Ç—Ä–µ–ª–∫–∏ –∏ —Å–≤—è–∑–∏
def draw_arrow(x1, y1, x2, y2, label='', style='solid', color='black', curved=False):
    if curved:
        arrow = FancyArrowPatch((x1, y1), (x2, y2),
                              connectionstyle="arc3,rad=0.3",
                              arrowstyle='->', mutation_scale=20,
                              linestyle=style, color=color, linewidth=2)
    else:
        arrow = FancyArrowPatch((x1, y1), (x2, y2),
                              arrowstyle='->', mutation_scale=20,
                              linestyle=style, color=color, linewidth=2)
    ax.add_patch(arrow)
    if label:
        mid_x, mid_y = (x1 + x2) / 2, (y1 + y2) / 2
        ax.text(mid_x, mid_y + 1, label, fontsize=8, ha='center',
               bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
draw_arrow(20, 79, 35, 79, 'POST /chat')
draw_arrow(45, 70, 30, 60, '1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è')
draw_arrow(30, 40, 45, 30, '–ü–æ–¥–±–æ—Ä –¥–æ–∫.')
draw_arrow(35, 50, 55, 50, 'success ‚Üí', curved=True)
draw_arrow(55, 79, 70, 79, '–°–æ—Ü. –∫–æ–Ω—Ç–µ–∫—Å—Ç')
draw_arrow(55, 50, 45, 70, '2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', curved=True)
draw_arrow(67.5, 40, 55, 30, '–î–æ–∫—É–º–µ–Ω—Ç—ã')
draw_arrow(45, 88, 12.5, 83, '–û—Ç–≤–µ—Ç', curved=True)

# –°–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
draw_arrow(22.5, 40, 20, 13, style='dashed', color='gray')
draw_arrow(67.5, 40, 65, 13, style='dashed', color='gray')

# –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
metrics_box = FancyBboxPatch((82, 30), 16, 20, 
                            boxstyle="round,pad=0.1",
                            facecolor='#F5F5F5',
                            edgecolor='navy', linewidth=1)
ax.add_patch(metrics_box)
ax.text(90, 47, 'üìä –ú–µ—Ç—Ä–∏–∫–∏', fontsize=11, ha='center', fontweight='bold')
ax.text(90, 44, '‚è±Ô∏è –í—Ä–µ–º—è:', fontsize=9, ha='center', fontweight='bold')
ax.text(90, 41.5, 'Router: 1-2.2—Å', fontsize=8, ha='center')
ax.text(90, 39, 'Generator: 4.7-6.6—Å', fontsize=8, ha='center')
ax.text(90, 36.5, '–û–±—â–µ–µ: 5-7—Å', fontsize=8, ha='center', color='darkgreen')
ax.text(90, 33, 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:', fontsize=9, ha='center', fontweight='bold')
ax.text(90, 30.5, '~$0.0015/–æ—Ç–≤–µ—Ç', fontsize=8, ha='center', color='darkgreen')

# –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
algo_text = """–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞:
‚Ä¢ 1 –≤–æ–ø—Ä–æ—Å ‚Üí 1-2 –¥–æ–∫
‚Ä¢ 2 –≤–æ–ø—Ä–æ—Å–∞ ‚Üí 2-4 –¥–æ–∫
‚Ä¢ 3+ –≤–æ–ø—Ä–æ—Å–∞ ‚Üí max 4
‚Ä¢ Fuzzy match 85%"""
ax.text(3, 25, algo_text, fontsize=7, ha='left',
       bbox=dict(boxstyle="round,pad=0.5", facecolor='lightyellow', alpha=0.8))

# –¢–∏–ø—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
class_text = """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:
‚úÖ success ‚Üí Generator
‚ùå offtopic ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç
‚ö†Ô∏è simplify ‚Üí —É–ø—Ä–æ—â–µ–Ω–∏–µ"""
ax.text(3, 35, class_text, fontsize=7, ha='left',
       bbox=dict(boxstyle="round,pad=0.5", facecolor='lavender', alpha=0.8))

# –õ–µ–≥–µ–Ω–¥–∞
legend_elements = [
    mlines.Line2D([], [], color='black', marker='>', markersize=8, label='–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫'),
    mlines.Line2D([], [], color='gray', linestyle='--', label='–í–Ω–µ—à–Ω–∏–µ API'),
    patches.Patch(facecolor=colors['api'], label='Core —Å–∏—Å—Ç–µ–º–∞'),
    patches.Patch(facecolor=colors['router'], label='AI Router'),
    patches.Patch(facecolor=colors['generator'], label='AI Generator')
]
ax.legend(handles=legend_elements, loc='lower right', fontsize=8)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
plt.tight_layout()
plt.savefig('/Users/andreysazonov/Documents/Projects/Ukido_DynContInj/architecture/ukido_architecture.png', 
            dpi=150, bbox_inches='tight', facecolor='white')
plt.savefig('/Users/andreysazonov/Documents/Projects/Ukido_DynContInj/architecture/ukido_architecture.pdf', 
            format='pdf', bbox_inches='tight', facecolor='white')

print("‚úÖ –î–∏–∞–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã:")
print("  - ukido_architecture.png")
print("  - ukido_architecture.pdf")