#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Router
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
"""

import json
import requests
from typing import Dict, Any
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.router import Router
from src.response_generator import ResponseGenerator
from src.config import Config
import asyncio

async def analyze_message(message: str, user_id: str = "debug_test"):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    print("="*80)
    print(f"üìù –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–Ø: {message}")
    print("="*80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = Config()
    router = Router(config)
    generator = ResponseGenerator(config)
    
    # –≠–¢–ê–ü 1: Router –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("\nüîπ –≠–¢–ê–ü 1: ROUTER (Gemini)")
    print("-"*40)
    
    router_result = await router.process_message(
        message=message,
        user_id=user_id,
        history=[]
    )
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç Router:")
    print(f"  Status: {router_result.get('status')}")
    print(f"  User Signal: {router_result.get('user_signal')}")
    print(f"  Social Context: {router_result.get('social_context')}")
    print(f"\n  üìù Decomposed Questions: {json.dumps(router_result.get('decomposed_questions', []), ensure_ascii=False, indent=4)}")
    print(f"\n  üìö Selected Documents: {[doc.get('title', 'Unknown') for doc in router_result.get('documents', [])]}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å raw –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini (—á–∞—Å—Ç–∏—á–Ω–æ)
    if hasattr(router, '_build_prompt'):
        prompt = router._build_prompt(message, user_id, [])
        print(f"\n  üîç Prompt –¥–ª—è Gemini (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"  {prompt[:500]}...")
    
    # –≠–¢–ê–ü 2: –†–µ—à–µ–Ω–∏–µ Main Orchestrator
    print("\nüîπ –≠–¢–ê–ü 2: MAIN ORCHESTRATOR DECISION")
    print("-"*40)
    
    status = router_result.get('status', 'unknown')
    if status == 'offtopic':
        print("  ‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Standard Responses –∏–ª–∏ Humor")
        print("  ‚ùå Claude –ù–ï –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω")
        print("  üìÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        
    elif status == 'success':
        print("  ‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Response Generator (Claude)")
        
        # –≠–¢–ê–ü 3: Generator –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print("\nüîπ –≠–¢–ê–ü 3: RESPONSE GENERATOR (Claude)")
        print("-"*40)
        
        # –ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Claude
        print(f"  üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è Claude:")
        print(f"    - Questions: {router_result.get('decomposed_questions', [])}")
        print(f"    - Documents: {len(router_result.get('documents', []))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"    - User Signal: {router_result.get('user_signal')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude (—á–∞—Å—Ç–∏—á–Ω–æ)
        if router_result.get('documents'):
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            print(f"\n  üîç System Prompt –¥–ª—è Claude –≤–∫–ª—é—á–∞–µ—Ç:")
            print(f"    - –†–æ–ª—å: AI –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã Ukido")
            print(f"    - –¢–æ–Ω: –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ {router_result.get('user_signal')}")
            print(f"    - –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join([d.get('title', '') for d in router_result.get('documents', [])])}")
            print(f"    - –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {router_result.get('decomposed_questions', [])}")
            
    elif status == 'need_simplification':
        print("  ‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –£–ø—Ä–æ—â–µ–Ω–∏–µ (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤)")
        
    print("\n" + "="*80)

async def test_multiple_variants():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏"""
    test_cases = [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ", 
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –∑–∞ —à–∫–æ–ª–∞ —É –≤–∞—Å?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É —É–∑–Ω–∞—Ç—å –æ —à–∫–æ–ª–µ Ukido",
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞—à–∞ —à–∫–æ–ª–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —à–∫–æ–ª–µ"
    ]
    
    print("\nüî¨ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ê–†–ò–ê–ù–¢–û–í")
    print("="*80)
    
    results = []
    for message in test_cases:
        print(f"\nüìå –¢–µ—Å—Ç–∏—Ä—É–µ–º: {message}")
        
        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ API
        response = requests.post(
            "http://localhost:8000/chat",
            json={"user_id": f"test_{len(results)}", "message": message},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            meta = data.get('metadata', {})
            results.append({
                'message': message,
                'status': meta.get('intent', 'unknown'),
                'questions': meta.get('decomposed_questions', []),
                'signal': meta.get('user_signal', 'unknown')
            })
            print(f"  ‚úÖ Status: {meta.get('intent')} | Questions: {len(meta.get('decomposed_questions', []))}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
    print("-"*80)
    print(f"{'–°–æ–æ–±—â–µ–Ω–∏–µ':<50} | {'Status':<15} | {'Questions':<10} | {'Signal':<15}")
    print("-"*80)
    for r in results:
        msg = r['message'][:47] + "..." if len(r['message']) > 50 else r['message']
        print(f"{msg:<50} | {r['status']:<15} | {len(r['questions']):<10} | {r['signal']:<15}")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    asyncio.run(analyze_message("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ"))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "="*80)
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    input()
    asyncio.run(test_multiple_variants())