#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ "–∑–æ–ª–æ—Ç—ã—Ö" (—ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö) –æ—Ç–≤–µ—Ç–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional
import difflib

class GoldenResponseManager:
    def __init__(self, file_path: str = "golden_responses.json"):
        self.file_path = Path(file_path)
        self.responses = self._load()
    
    def _load(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–æ–ª–æ—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        if self.file_path.exists():
            with open(self.file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def save_golden(self, question: str, response: str, metadata: Optional[Dict] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π"""
        self.responses[question] = {
            "response": response,
            "saved_at": datetime.now().isoformat(),
            "metadata": metadata or {}
        }
        self._persist()
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∑–æ–ª–æ—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è: '{question[:50]}...'")
    
    def check_regression(self, question: str, new_response: str, threshold: float = 0.85) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–ª –ª–∏ –æ—Ç–≤–µ—Ç"""
        if question not in self.responses:
            return {"status": "no_golden", "similarity": 0.0}
        
        golden = self.responses[question]["response"]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
        similarity = self._calculate_similarity(golden, new_response)
        
        if similarity < threshold:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º diff
            diff = self._get_diff(golden, new_response)
            return {
                "status": "regression",
                "similarity": similarity,
                "diff": diff,
                "golden": golden[:200],
                "new": new_response[:200]
            }
        
        return {"status": "ok", "similarity": similarity}
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤ (0.0 - 1.0)"""
        return difflib.SequenceMatcher(None, text1.lower(), text2.lower()).ratio()
    
    def _get_diff(self, text1: str, text2: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç diff –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏"""
        diff = difflib.unified_diff(
            text1.splitlines(keepends=True),
            text2.splitlines(keepends=True),
            fromfile='golden',
            tofile='new',
            n=1
        )
        return ''.join(diff)
    
    def _persist(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
        with open(self.file_path, 'w', encoding='utf-8') as f:
            json.dump(self.responses, f, ensure_ascii=False, indent=2)
    
    def list_golden(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–æ–ª–æ—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        print("\nüìù GOLDEN RESPONSES:")
        print("=" * 60)
        for i, (question, data) in enumerate(self.responses.items(), 1):
            saved_at = data.get('saved_at', 'Unknown')
            print(f"{i}. {question[:50]}...")
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_at}")
        print("=" * 60)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ interactive_test.py:
# golden = GoldenResponseManager()
# 
# # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∞–ª–æ–Ω:
# golden.save_golden("–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", response)
# 
# # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é:
# result = golden.check_regression("–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", new_response)
# if result["status"] == "regression":
#     print(f"‚ö†Ô∏è –†–ï–ì–†–ï–°–°–ò–Ø! –°—Ö–æ–∂–µ—Å—Ç—å: {result['similarity']:.2%}")
#     print(result["diff"])