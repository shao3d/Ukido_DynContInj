#!/usr/bin/env python3
"""
–¢—Ä–µ–∫–µ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ API –≤—ã–∑–æ–≤–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

from typing import Dict, List
from dataclasses import dataclass, field
from datetime import datetime

@dataclass
class CostTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å API –≤—ã–∑–æ–≤–æ–≤"""
    
    # –¶–µ–Ω—ã –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤
    PRICES = {
        "gemini-2.5-flash": {"input": 0.30, "output": 0.30},
        "claude-3.5-haiku": {"input": 0.25, "output": 1.25},
        "llama-3.1-8b": {"input": 0.05, "output": 0.05}  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    }
    
    session_costs: List[Dict] = field(default_factory=list)
    total_input_tokens: int = 0
    total_output_tokens: int = 0
    
    def add_call(self, model: str, input_tokens: int, output_tokens: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑–æ–≤–µ API"""
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        model_key = None
        if "gemini" in model.lower():
            model_key = "gemini-2.5-flash"
        elif "claude" in model.lower() or "haiku" in model.lower():
            model_key = "claude-3.5-haiku"
        elif "llama" in model.lower():
            model_key = "llama-3.1-8b"
        
        if not model_key:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        prices = self.PRICES[model_key]
        input_cost = (input_tokens / 1_000_000) * prices["input"]
        output_cost = (output_tokens / 1_000_000) * prices["output"]
        total_cost = input_cost + output_cost
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.session_costs.append({
            "timestamp": datetime.now().isoformat(),
            "model": model_key,
            "input_tokens": input_tokens,
            "output_tokens": output_tokens,
            "cost": total_cost
        })
        
        self.total_input_tokens += input_tokens
        self.total_output_tokens += output_tokens
    
    def get_session_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏"""
        if not self.session_costs:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        
        total_cost = sum(call["cost"] for call in self.session_costs)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
        by_model = {}
        for call in self.session_costs:
            model = call["model"]
            if model not in by_model:
                by_model[model] = {"calls": 0, "cost": 0, "tokens": 0}
            by_model[model]["calls"] += 1
            by_model[model]["cost"] += call["cost"]
            by_model[model]["tokens"] += call["input_tokens"] + call["output_tokens"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        lines = []
        lines.append("\nüí∞ COST SUMMARY")
        lines.append("=" * 50)
        lines.append(f"Total Cost: ${total_cost:.6f}")
        lines.append(f"Total Tokens: {self.total_input_tokens + self.total_output_tokens:,}")
        lines.append("")
        lines.append("By Model:")
        
        for model, stats in by_model.items():
            emoji = "üîÆ" if "gemini" in model else "ü§ñ" if "claude" in model else "ü¶ô"
            lines.append(f"{emoji} {model}:")
            lines.append(f"   Calls: {stats['calls']}")
            lines.append(f"   Tokens: {stats['tokens']:,}")
            lines.append(f"   Cost: ${stats['cost']:.6f}")
        
        lines.append("=" * 50)
        
        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–∞–ø—Ä–æ—Å
        avg_cost = total_cost / len(self.session_costs)
        lines.append(f"Average per request: ${avg_cost:.6f}")
        
        # –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
        projected = avg_cost * 1000
        lines.append(f"Projected for 1K requests: ${projected:.2f}")
        
        return "\n".join(lines)
    
    def get_last_call_cost(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞"""
        if not self.session_costs:
            return ""
        
        last = self.session_costs[-1]
        return f"üíµ Cost: ${last['cost']:.6f} ({last['model']}, {last['input_tokens'] + last['output_tokens']} tokens)"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
COST_TRACKER = CostTracker()

def estimate_tokens(text: str) -> int:
    """–ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    # –ü—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    # –ü—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ/—É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ
    return len(text) // 3


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# from cost_tracker import COST_TRACKER, estimate_tokens
# 
# # –ü—Ä–∏ –≤—ã–∑–æ–≤–µ API:
# input_tokens = estimate_tokens(prompt)
# output_tokens = estimate_tokens(response)
# COST_TRACKER.add_call("gemini-2.5-flash", input_tokens, output_tokens)
# 
# # –í –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏:
# print(COST_TRACKER.get_session_summary())