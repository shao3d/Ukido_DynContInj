#!/usr/bin/env python3
"""
Collaborative Testing Framework
–ü—Ä–æ–≥–æ–Ω—è–µ—Ç –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∏ –∏–∑ test_scenarios_stress.json
—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import asyncio
import json
import sys
import time
from pathlib import Path
from typing import List, Dict, Tuple
from dataclasses import dataclass, field

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from social_state import SocialStateManager
from config import Config

# ====== –¶–í–ï–¢–ê ======
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'

# ====== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–î–ù–û–ì–û –®–ê–ì–ê ======
@dataclass
class StepResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    step_num: int
    user_message: str
    bot_response: str
    router_status: str
    social_context: str
    documents: List[str]
    router_time: float
    generator_time: float
    total_time: float
    source: str  # "router_social", "claude", "fallback"
    errors: List[str] = field(default_factory=list)

# ====== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–õ–û–ì–ê ======
@dataclass
class DialogueResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–æ–Ω–∞ –≤—Å–µ–≥–æ –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∞"""
    scenario_name: str
    description: str
    steps: List[StepResult]
    total_time: float
    avg_response_time: float
    errors_count: int
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        if not self.steps:
            return 0
        successful = sum(1 for s in self.steps if not s.errors)
        return (successful / len(self.steps)) * 100

# ====== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ======
class CollaborativeTester:
    """–ö–ª–∞—Å—Å –¥–ª—è collaborative —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self):
        self.config = Config()
        self.router = Router(use_cache=True)
        self.response_generator = ResponseGenerator()
        self.history = HistoryManager()
        self.social_state = SocialStateManager()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        self.scenarios = self._load_scenarios()
    
    def _load_scenarios(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        path = Path(__file__).parent / "tests" / "test_scenarios_stress.json"
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    
    async def process_message(
        self, 
        message: str, 
        user_id: str
    ) -> Tuple[str, Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pipeline"""
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_messages = self.history.get_history(user_id)
        
        # Router
        router_start = time.time()
        try:
            route_result = await self.router.route(message, history_messages, user_id)
            router_time = time.time() - router_start
        except Exception as e:
            print(f"{Colors.RED}‚ùå Router failed: {e}{Colors.ENDC}")
            route_result = {
                "status": "error",
                "message": str(e)
            }
            router_time = time.time() - router_start
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        status = route_result.get("status", "offtopic")
        social_context = route_result.get("social_context", "")
        documents = route_result.get("documents", [])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        generator_time = 0
        source = "fallback"
        
        if status == "success":
            generator_start = time.time()
            try:
                response = await self.response_generator.generate(
                    {
                        "status": status,
                        "documents": documents,
                        "decomposed_questions": route_result.get("decomposed_questions", []),
                        "social_context": social_context,
                    },
                    history_messages
                )
                generator_time = time.time() - generator_start
                source = "claude"
            except Exception as e:
                print(f"{Colors.RED}‚ùå Generator failed: {e}{Colors.ENDC}")
                response = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"
                generator_time = time.time() - generator_start
        else:
            response = route_result.get("message", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —à–∫–æ–ª–µ.")
            source = "router_social" if social_context else "fallback"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.add_message(user_id, "user", message)
        self.history.add_message(user_id, "assistant", response)
        
        total_time = time.time() - start_time
        
        return response, {
            "status": status,
            "social_context": social_context,
            "documents": documents,
            "router_time": router_time,
            "generator_time": generator_time,
            "total_time": total_time,
            "source": source
        }
    
    async def run_dialogue(self, scenario: Dict) -> DialogueResult:
        """–ü—Ä–æ–≥–æ–Ω—è–µ—Ç –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        scenario_name = scenario["scenario_name"]
        description = scenario["description"]
        steps = scenario["steps"]
        
        print(f"\n{Colors.HEADER}{'='*70}")
        print(f"üìã –°–¶–ï–ù–ê–†–ò–ô: {scenario_name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"üìä –®–∞–≥–æ–≤: {len(steps)}")
        print(f"{'='*70}{Colors.ENDC}\n")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–∏–∞–ª–æ–≥–æ–º
        user_id = f"test_{scenario_name.replace(' ', '_').lower()}"
        self.history = HistoryManager()
        self.social_state = SocialStateManager()
        
        step_results = []
        dialogue_start = time.time()
        
        for i, message in enumerate(steps, 1):
            print(f"{Colors.DIM}‚îÅ‚îÅ‚îÅ –®–∞–≥ {i}/{len(steps)} ‚îÅ‚îÅ‚îÅ{Colors.ENDC}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response, metadata = await self.process_message(message, user_id)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞
            step_result = StepResult(
                step_num=i,
                user_message=message,
                bot_response=response,
                router_status=metadata["status"],
                social_context=metadata["social_context"],
                documents=metadata["documents"],
                router_time=metadata["router_time"],
                generator_time=metadata["generator_time"],
                total_time=metadata["total_time"],
                source=metadata["source"]
            )
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if "–æ—à–∏–±–∫–∞" in response.lower() or "error" in response.lower():
                step_result.errors.append("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
            
            step_results.append(step_result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.1)
        
        dialogue_time = time.time() - dialogue_start
        avg_time = dialogue_time / len(steps) if steps else 0
        errors_count = sum(len(s.errors) for s in step_results)
        
        return DialogueResult(
            scenario_name=scenario_name,
            description=description,
            steps=step_results,
            total_time=dialogue_time,
            avg_response_time=avg_time,
            errors_count=errors_count
        )
    
    def show_dialogue_results(self, result: DialogueResult):
        """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –°–ï–ö–¶–ò–Ø 1: –ü–û–õ–ù–´–ô –î–ò–ê–õ–û–ì –ë–ï–ó –û–ë–†–ï–ó–ö–ò
        print(f"\n{Colors.CYAN}{'='*80}")
        print(f"              –°–ï–ö–¶–ò–Ø 1: –ü–û–õ–ù–´–ï –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´")
        print(f"{'='*80}{Colors.ENDC}\n")
        
        for step in result.steps:
            print(f"{Colors.YELLOW}üë§ –í–æ–ø—Ä–æ—Å {step.step_num}:{Colors.ENDC}")
            print(f"   {step.user_message}")
            print(f"\n{Colors.GREEN}ü§ñ –û—Ç–≤–µ—Ç {step.step_num}:{Colors.ENDC}")
            # –í—ã–≤–æ–¥–∏–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            print(f"   {step.bot_response}")
            print(f"\n{Colors.DIM}{'‚îÄ'*80}{Colors.ENDC}\n")
        
        # –°–ï–ö–¶–ò–Ø 2: –ú–ï–¢–†–ò–ö–ò
        print(f"\n{Colors.CYAN}{'='*80}")
        print(f"                    –°–ï–ö–¶–ò–Ø 2: –ú–ï–¢–†–ò–ö–ò")
        print(f"{'='*80}{Colors.ENDC}\n")
        
        print(f"{Colors.BOLD}üìä –ú–ï–¢–†–ò–ö–ò –ü–û –®–ê–ì–ê–ú:{Colors.ENDC}\n")
        for step in result.steps:
            status_color = Colors.GREEN if step.router_status == "success" else Colors.YELLOW
            print(f"–®–∞–≥ {step.step_num}: {status_color}{step.router_status}{Colors.ENDC} | "
                  f"–ò—Å—Ç–æ—á–Ω–∏–∫: {step.source} | "
                  f"–í—Ä–µ–º—è: {step.total_time:.2f}s | "
                  f"Router: {step.router_time:.2f}s | "
                  f"Gen: {step.generator_time:.2f}s")
            if step.social_context:
                print(f"       –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {step.social_context}")
            if step.documents:
                print(f"       –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(step.documents)}")
            if step.errors:
                print(f"       {Colors.RED}–û—à–∏–±–∫–∏: {', '.join(step.errors)}{Colors.ENDC}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\n{Colors.BOLD}üìà –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:{Colors.ENDC}\n")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {result.total_time:.2f}s")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.avg_response_time:.2f}s")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.success_rate:.1f}%")
        print(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {result.errors_count}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = {}
        for step in result.steps:
            sources[step.source] = sources.get(step.source, 0) + 1
        print(f"\n  ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:")
        for source, count in sources.items():
            print(f"    - {source}: {count} ({count/len(result.steps)*100:.1f}%)")
    
    def analyze_dialogue(self, result: DialogueResult) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –°–ï–ö–¶–ò–Ø 3: –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        print(f"\n{Colors.CYAN}{'='*80}")
        print(f"            –°–ï–ö–¶–ò–Ø 3: –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print(f"{'='*80}{Colors.ENDC}\n")
        
        analysis = []
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        slow_steps = [s for s in result.steps if s.total_time > 5]
        if slow_steps:
            analysis.append(f"‚ö†Ô∏è {len(slow_steps)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (>5s)")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        social_steps = [s for s in result.steps if s.social_context]
        if social_steps:
            contexts = [s.social_context for s in social_steps]
            analysis.append(f"üëã –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã: {', '.join(set(contexts))}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        if result.errors_count > 0:
            analysis.append(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {result.errors_count} –æ—à–∏–±–æ–∫")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        all_docs = []
        for step in result.steps:
            all_docs.extend(step.documents)
        if all_docs:
            unique_docs = set(all_docs)
            analysis.append(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(unique_docs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
        
        return "\n".join(analysis) if analysis else "‚úÖ –î–∏–∞–ª–æ–≥ –ø—Ä–æ—à–µ–ª –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π"

# ====== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è collaborative —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CollaborativeTester()
    
    print(f"{Colors.HEADER}{'='*70}")
    print("     COLLABORATIVE TESTING FRAMEWORK")
    print("     –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º")
    print(f"{'='*70}{Colors.ENDC}\n")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print(f"{Colors.BOLD}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:{Colors.ENDC}")
    for i, scenario in enumerate(tester.scenarios):
        print(f"{i+1}. {scenario['scenario_name']}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    if len(sys.argv) > 1:
        try:
            scenario_num = int(sys.argv[1]) - 1
            if 0 <= scenario_num < len(tester.scenarios):
                scenario = tester.scenarios[scenario_num]
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è: {sys.argv[1]}")
                return
        except:
            # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
            scenario_name = " ".join(sys.argv[1:])
            scenario = next((s for s in tester.scenarios if s["scenario_name"].lower() == scenario_name.lower()), None)
            if not scenario:
                print(f"–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {scenario_name}")
                return
    else:
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python collaborative_test.py <–Ω–æ–º–µ—Ä>")
        print("  python collaborative_test.py <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  python collaborative_test.py 1")
        print('  python collaborative_test.py "–ó–∞–±—ã–≤—á–∏–≤–∞—è –±–∞–±—É—à–∫–∞"')
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    result = await tester.run_dialogue(scenario)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.show_dialogue_results(result)
    
    # –ê–Ω–∞–ª–∏–∑
    print(f"\n{Colors.BOLD}üîç –ê–ù–ê–õ–ò–ó:{Colors.ENDC}\n")
    analysis = tester.analyze_dialogue(result)
    print(analysis)
    
    print(f"\n{Colors.CYAN}{'='*70}")
    print("–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
    print(f"{'='*70}{Colors.ENDC}\n")

if __name__ == "__main__":
    asyncio.run(main())