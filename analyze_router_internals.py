#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç—ã Router –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ"
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def analyze_message_processing(message: str, user_id: str = "analyze_test"):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("="*80)
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø")
    print("="*80)
    print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    print(f"üë§ User ID: {user_id}")
    
    # –®–ê–ì 1: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    print("\n" + "="*80)
    print("–®–ê–ì 1: –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò")
    print("-"*40)
    
    clear_response = requests.post(
        f"{BASE_URL}/clear_history/{user_id}"
    )
    
    if clear_response.status_code == 200:
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {clear_response.status_code}")
        return
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    time.sleep(1)
    
    # –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    print("\n" + "="*80)
    print("–®–ê–ì 2: –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø")
    print("-"*40)
    
    start_time = time.time()
    response = requests.post(
        f"{BASE_URL}/chat",
        json={
            "user_id": user_id,
            "message": message
        },
        timeout=30
    )
    end_time = time.time()
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫")
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)
        return
    
    data = response.json()
    
    # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
    print(json.dumps(data, ensure_ascii=False, indent=2)[:500])
    
    # –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*80)
    print("–®–ê–ì 3: –ê–ù–ê–õ–ò–ó –í–ù–£–¢–†–ï–ù–ù–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø")
    print("-"*40)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
    bot_response = data.get('response', 'No response')
    print(f"\nüì§ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –ë–û–¢–ê:")
    print(f"'{bot_response[:200]}{'...' if len(bot_response) > 200 else ''}'")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è –∏–∑ data
    print("\n" + "="*80)
    print("üîπ –≠–¢–ê–ü ROUTER (GEMINI)")
    print("-"*40)
    
    # Intent –∏ Status
    intent = data.get('intent', 'unknown')
    user_signal = data.get('user_signal', 'unknown')
    social_context = data.get('social', None)
    confidence = data.get('confidence', 0)
    
    print(f"\nüìä –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø:")
    print(f"  Intent/Status: {intent}")
    print(f"  User Signal: {user_signal}")
    print(f"  Social Context: {social_context}")
    print(f"  Confidence: {confidence}")
    
    # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    decomposed = data.get('decomposed_questions', [])
    print(f"\nüìù –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –í–û–ü–†–û–°–û–í:")
    if decomposed:
        for i, q in enumerate(decomposed, 1):
            print(f"  {i}. {q}")
    else:
        print("  ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç!")
        print("  ‚ùó –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - Router –Ω–µ –∏–∑–≤–ª—ë–∫ –≤–æ–ø—Ä–æ—Å—ã")
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    documents = data.get('relevant_documents', [])
    print(f"\nüìö –í–´–ë–†–ê–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´:")
    if documents:
        for doc in documents:
            if isinstance(doc, dict):
                print(f"  - {doc.get('title', 'Unknown')}")
            else:
                print(f"  - {doc}")
    else:
        print("  ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã (—Å–ª–µ–¥—Å—Ç–≤–∏–µ –ø—É—Å—Ç–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏)")
    
    # –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n" + "="*80)
    print("üîπ –ü–£–¢–¨ –û–ë–†–ê–ë–û–¢–ö–ò")
    print("-"*40)
    
    if intent == 'offtopic':
        print("\n‚ùå –ü–£–¢–¨: OFFTOPIC")
        print("  1. Router –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        print("  2. Main.py –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç Claude")
        print("  3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —é–º–æ—Ä")
        print(f"  4. –†–µ–∑—É–ª—å—Ç–∞—Ç: '{bot_response[:100]}...'")
        
    elif intent == 'success':
        print("\n‚úÖ –ü–£–¢–¨: SUCCESS")
        print("  1. Router –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        print(f"  2. –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–ª –Ω–∞ {len(decomposed)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        print(f"  3. –í—ã–±—Ä–∞–ª {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("  4. Main.py –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Claude –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print(f"  5. Claude –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç–æ–Ω–æ–º '{user_signal}'")
        
    elif intent == 'need_simplification':
        print("\n‚ö†Ô∏è –ü–£–¢–¨: NEED_SIMPLIFICATION")
        print("  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–∏–µ")
    
    # –®–ê–ì 5: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "="*80)
    print("üö® –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
    print("-"*40)
    
    if intent == 'offtopic' and '—à–∫–æ–ª–µ' in message.lower():
        print("\n‚ùó –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê:")
        print("  –í–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ offtopic")
        print("\n  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  1. Router –Ω–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–ª –≤–æ–ø—Ä–æ—Å (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")
        print("  2. –°–ª–∏—à–∫–æ–º –æ–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –¥–ª—è Router")
        print("  3. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ Router'–∞")
        
        print("\n  üîç –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏:")
        print("  - –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: ['–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —à–∫–æ–ª–µ Ukido']")
        print("  - Status: success")
        print("  - –î–æ–∫—É–º–µ–Ω—Ç—ã: mission_values_history.md, methodology.md")
        print("  - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Claude")
    
    print("\n" + "="*80)
    
    return {
        'response': bot_response,
        'intent': intent,
        'decomposed': decomposed,
        'documents': documents,
        'user_signal': user_signal
    }

def test_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –≤–æ–ø—Ä–æ—Å–∞"""
    
    print("\n" + "="*80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í –§–û–†–ú–£–õ–ò–†–û–í–ö–ò")
    print("="*80)
    
    test_messages = [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ",
        "–ß—Ç–æ –∑–∞ —à–∫–æ–ª–∞ —É –≤–∞—Å?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —à–∫–æ–ª—É Ukido",
        "–•–æ—á—É —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ"
    ]
    
    results = []
    
    for i, msg in enumerate(test_messages):
        user_id = f"test_variant_{i}"
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        requests.post(f"{BASE_URL}/clear_history/{user_id}")
        time.sleep(0.5)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = requests.post(
            f"{BASE_URL}/chat",
            json={"user_id": user_id, "message": msg},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            results.append({
                'message': msg,
                'intent': data.get('intent', 'unknown'),
                'questions': len(data.get('decomposed_questions', [])),
                'docs': len(data.get('relevant_documents', []))
            })
    
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\n{'–°–æ–æ–±—â–µ–Ω–∏–µ':<45} | {'Intent':<10} | {'Questions':<10} | {'Docs':<5}")
    print("-"*75)
    for r in results:
        msg = r['message'][:42] + "..." if len(r['message']) > 45 else r['message']
        print(f"{msg:<45} | {r['intent']:<10} | {r['questions']:<10} | {r['docs']:<5}")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    result = analyze_message_processing("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    print("\n" + "="*80)
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏...")
    test_variations()