#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏–∞–ª–æ–≥—É –∏ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
"""

import json
import sys
from pathlib import Path
from typing import Dict, List
import glob

def load_latest_results() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    base_dir = Path(__file__).parent
    reports_dir = base_dir / "tests" / "reports"
    result_files = list(reports_dir.glob("test_results_*.json"))
    if not result_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ tests/test_router_with_report.py")
    return None
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    latest_file = max(result_files, key=lambda p: p.stat().st_mtime)
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑: {latest_file}")
    
    with open(latest_file, "r", encoding="utf-8") as f:
        return json.load(f)

def print_detailed_analysis(results: List[Dict]):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    
    print("\n" + "="*80)
    print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ñ–î–û–ú–£ –î–ò–ê–õ–û–ì–£")
    print("="*80)
    
    for scenario_num, scenario in enumerate(results, 1):
        print(f"\n{'='*80}")
        print(f"üé¨ –î–ò–ê–õ–û–ì #{scenario_num}: {scenario['name']}")
        print(f"{'='*80}")
        
        success_emoji = "‚úÖ" if scenario['success'] else "‚ùå"
        print(f"\n–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞: {success_emoji} {'–£—Å–ø–µ—à–Ω–æ' if scenario['success'] else '–° –æ—à–∏–±–∫–∞–º–∏'}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(scenario['steps'])}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –¥–∏–∞–ª–æ–≥–µ
        status_counts = {}
        for step in scenario['steps']:
            status = step.get('router_status', 'error')
            status_counts[status] = status_counts.get(status, 0) + 1
        
        print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞:")
        for status, count in status_counts.items():
            percentage = (count / len(scenario['steps']) * 100)
            print(f"   ‚Ä¢ {status}: {count} ({percentage:.0f}%)")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞–≥—É
        print(f"\nüìù –î–ï–¢–ê–õ–ò –ü–û –ö–ê–ñ–î–û–ú–£ –í–û–ü–†–û–°–£:")
        print("-" * 80)
        
        for step in scenario['steps']:
            step_num = step['step']
            user_msg = step['user_message']
            router_response = step.get('router_response', {})
            router_status = step.get('router_status', 'error')
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = {
                'success': '‚úÖ',
                'offtopic': '‚ùì',
                'need_simplification': 'üîÑ',
                'error': '‚ùå'
            }.get(router_status, '‚ö†Ô∏è')
            
            print(f"\nüîπ –®–ê–ì {step_num}:")
            print(f"   üë§ –í–æ–ø—Ä–æ—Å: {user_msg[:100]}{'...' if len(user_msg) > 100 else ''}")
            print(f"   {status_emoji} –°—Ç–∞—Ç—É—Å —Ä–æ—É—Ç–µ—Ä–∞: {router_status}")
            
            # –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if router_status == 'success':
                documents = router_response.get('documents', [])
                if documents:
                    print(f"   üìö –ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                    for doc in documents:
                        print(f"      ‚Ä¢ {doc}")
                else:
                    print(f"   ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                    
            elif router_status in ['offtopic', 'need_simplification']:
                message = router_response.get('message', '')
                if message:
                    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞:")
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    words = message.split()
                    line = "      "
                    for word in words:
                        if len(line) + len(word) > 75:
                            print(line)
                            line = "      " + word
                        else:
                            line += " " + word if line != "      " else word
                    if line.strip():
                        print(line)
            
            # –ü–µ—á–∞—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            decomposed = router_response.get('decomposed_questions') or []
            if isinstance(decomposed, list) and decomposed:
                print(f"   üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:")
                for i, q in enumerate(decomposed, 1):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                    q_str = str(q)
                    q_str_short = (q_str[:100] + '...') if len(q_str) > 100 else q_str
                    print(f"      {i}. {q_str_short}")

            elif 'error' in step:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {step['error']}")
        
        print("-" * 80)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ –¥–∏–∞–ª–æ–≥–µ
        docs_usage = {}
        for step in scenario['steps']:
            if step.get('router_status') == 'success':
                for doc in step.get('router_response', {}).get('documents', []):
                    docs_usage[doc] = docs_usage.get(doc, 0) + 1
        
        if docs_usage:
            print(f"\nüìö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–û–í –í –î–ò–ê–õ–û–ì–ï:")
            for doc, count in sorted(docs_usage.items(), key=lambda x: x[1], reverse=True):
                print(f"   ‚Ä¢ {doc}: {count} —Ä–∞–∑(–∞)")

def print_overall_statistics(results: List[Dict]):
    """–í—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–∏–∞–ª–æ–≥–∞–º"""
    
    print(f"\n{'='*80}")
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –î–ò–ê–õ–û–ì–ê–ú")
    print("="*80)
    
    total_scenarios = len(results)
    successful = sum(1 for r in results if r["success"])
    total_steps = sum(len(r["steps"]) for r in results)
    
    print(f"\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_scenarios}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {successful} ({successful/total_scenarios*100:.0f}%)")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_steps}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    all_statuses = {}
    for scenario in results:
        for step in scenario["steps"]:
            status = step.get("router_status", "error")
            all_statuses[status] = all_statuses.get(status, 0) + 1
    
    print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞ (–≤—Å–µ–≥–æ {total_steps} –≤–æ–ø—Ä–æ—Å–æ–≤):")
    for status, count in sorted(all_statuses.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_steps * 100)
        emoji = {
            'success': '‚úÖ',
            'offtopic': '‚ùì',
            'need_simplification': 'üîÑ',
            'error': '‚ùå'
        }.get(status, '‚ö†Ô∏è')
        print(f"   {emoji} {status}: {count} ({percentage:.1f}%)")
    
    # –¢–æ–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    all_docs = {}
    for scenario in results:
        for step in scenario["steps"]:
            if step.get("router_status") == "success":
                for doc in step.get("router_response", {}).get("documents", []):
                    all_docs[doc] = all_docs.get(doc, 0) + 1
    
    if all_docs:
        print(f"\nüìö –¢–û–ü-10 –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for i, (doc, count) in enumerate(sorted(all_docs.items(), key=lambda x: x[1], reverse=True)[:10], 1):
            print(f"   {i:2}. {doc}: {count} —Ä–∞–∑(–∞)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º —Å –æ—à–∏–±–∫–∞–º–∏
    failed_scenarios = [s for s in results if not s["success"]]
    if failed_scenarios:
        print(f"\n‚ö†Ô∏è –î–∏–∞–ª–æ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏:")
        for scenario in failed_scenarios:
            print(f"   ‚Ä¢ {scenario['name']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ïî" + "‚ïê"*78 + "‚ïó")
    print("‚ïë" + " –ê–ù–ê–õ–ò–ó–ê–¢–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–û–£–¢–ï–†–ê ".center(78) + "‚ïë")
    print("‚ïö" + "‚ïê"*78 + "‚ïù")
    print("–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∑–∞–ø—É—Å—Ç–∏–≤ tests/test_router_with_report.py (—Å–æ–∑–¥–∞—ë—Ç tests/reports/test_results_*.json)")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = load_latest_results()
    if not results:
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print_detailed_analysis(results)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_overall_statistics(results)
    
    print(f"\n{'='*80}")
    print("‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("="*80)

if __name__ == "__main__":
    main()