#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–∑–∞–±–∏—Ä–∞—Ç—å"
"""

import json
import httpx
import asyncio
from datetime import datetime

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
test_cases = [
    {
        "name": "–ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –∑–∞–±–∏—Ä–∞—Ç—å",
        "message": "–£–≥—É, –ø–æ–Ω—è—Ç–Ω–æ. –ê –∑–∞–Ω—è—Ç–∏—è –¥–æ–ª–≥–æ –∏–¥—É—Ç? –Ø –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –∑–∞–±–∏—Ä–∞—Ç—å –±—É–¥—É",
        "expected_contains": ["–æ–Ω–ª–∞–π–Ω", "zoom", "–∏–∑ –¥–æ–º–∞", "–Ω–µ –Ω—É–∂–Ω–æ", "–Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è"]
    },
    {
        "name": "–ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤–æ–∑–∏—Ç—å",
        "message": "–ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤–æ–∑–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è?",
        "expected_contains": ["–æ–Ω–ª–∞–π–Ω", "zoom", "–∏–∑ –¥–æ–º–∞", "–Ω–µ –Ω—É–∂–Ω–æ"]
    },
    {
        "name": "–î–∞–ª–µ–∫–æ –¥–æ–≤–æ–∑–∏—Ç—å",
        "message": "–£ –Ω–∞—Å –¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞—à–µ–≥–æ –æ—Ñ–∏—Å–∞, –∫–∞–∫ –¥–æ–≤–æ–∑–∏—Ç—å?",
        "expected_contains": ["–æ–Ω–ª–∞–π–Ω", "zoom", "–Ω–µ –Ω—É–∂–Ω–æ –µ—Ö–∞—Ç—å", "–∏–∑ –¥–æ–º–∞"]
    },
    {
        "name": "–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±—Ä–∞—Ç—å",
        "message": "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏–π?",
        "expected_contains": ["–æ–Ω–ª–∞–π–Ω", "zoom", "–∏–∑ –¥–æ–º–∞", "–∑–∞–±–∏—Ä–∞—Ç—å –Ω–µ"]
    }
]

async def test_transport_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã '–∑–∞–±–∏—Ä–∞—Ç—å'")
    print("=" * 60)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        passed = 0
        failed = 0
        
        for i, test in enumerate(test_cases, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {test['name']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test['message']}")
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π user_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            user_id = f"test_transport_{datetime.now().timestamp()}_{i}"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            greeting_response = await client.post(
                "http://localhost:8000/chat",
                json={
                    "user_id": user_id,
                    "message": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–∞—à–∏ –∫—É—Ä—Å—ã –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ 10 –ª–µ—Ç."
                }
            )
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = await client.post(
                "http://localhost:8000/chat",
                json={
                    "user_id": user_id,
                    "message": test["message"]
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get("response", "").lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                found_keywords = []
                missing_keywords = []
                
                for keyword in test["expected_contains"]:
                    if keyword.lower() in bot_response:
                        found_keywords.append(keyword)
                    else:
                        missing_keywords.append(keyword)
                
                if found_keywords and not missing_keywords:
                    print(f"   ‚úÖ PASSED - –ù–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ: {', '.join(found_keywords)}")
                    passed += 1
                elif found_keywords:
                    print(f"   ‚ö†Ô∏è  PARTIAL - –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ: {', '.join(found_keywords)}")
                    print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {', '.join(missing_keywords)}")
                    passed += 1  # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö –∫–∞–∫ —É—Å–ø–µ—Ö
                else:
                    print(f"   ‚ùå FAILED - –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {', '.join(test['expected_contains'])}")
                    failed += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                print(f"   –û—Ç–≤–µ—Ç –±–æ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
                print(f"   '{data.get('response', '')[:200]}...'")
                
                # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print(f"   Intent: {data.get('intent', 'N/A')}")
                print(f"   Signal: {data.get('user_signal', 'N/A')}")
            else:
                print(f"   ‚ùå FAILED - HTTP {response.status_code}")
                failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ Passed: {passed}/{len(test_cases)}")
    print(f"   ‚ùå Failed: {failed}/{len(test_cases)}")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed, failed

if __name__ == "__main__":
    passed, failed = asyncio.run(test_transport_fix())
    exit(0 if failed == 0 else 1)