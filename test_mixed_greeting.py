#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π mixed greeting detection"""

import asyncio
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from sandbox_v2 import SandboxV2, Colors

async def test_mixed_greetings():
    sandbox = SandboxV2()
    
    print(f"{Colors.HEADER}–¢–ï–°–¢: Mixed Greeting Detection{Colors.ENDC}\n")
    
    test_cases = [
        {
            "message": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –º–µ–Ω—è —Ç—Ä–æ–µ –¥–µ—Ç–µ–π: 7, 10 –∏ 13 –ª–µ—Ç",
            "expected_status": "success",
            "expected_social": "greeting",
            "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö"
        },
        {
            "message": "–ü—Ä–∏–≤–µ—Ç! –ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π",
            "expected_status": "success",
            "expected_social": "greeting",
            "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ–±–µ–Ω–∫–∞"
        },
        {
            "message": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫—É—Ä—Å –¥–ª—è 10-–ª–µ—Ç–Ω–µ–≥–æ",
            "expected_status": "success",
            "expected_social": "greeting",
            "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫—É—Ä—Å—É"
        },
        {
            "message": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!",
            "expected_status": "offtopic",
            "expected_social": "greeting",
            "description": "–ß–∏—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        },
        {
            "message": "–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ",
            "expected_status": "success",
            "expected_social": "thanks",
            "description": "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å + –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"
        }
    ]
    
    passed = 0
    failed = 0
    
    for i, test in enumerate(test_cases, 1):
        print(f"{Colors.BLUE}–¢–µ—Å—Ç {i}: {test['description']}{Colors.ENDC}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {test['message']}")
        
        result = await sandbox.process_message(test['message'], f"test_user_{i}")
        
        status_ok = result.router_status == test['expected_status']
        social_ok = result.social_context == test['expected_social']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è success —Å–ª—É—á–∞–µ–≤
        questions_ok = True
        if test['expected_status'] == 'success':
            questions_ok = len(result.questions) > 0
        
        if status_ok and social_ok and questions_ok:
            print(f"{Colors.GREEN}‚úÖ PASSED{Colors.ENDC}")
            print(f"  Status: {result.router_status}")
            print(f"  Social: {result.social_context}")
            if result.questions:
                print(f"  Questions: {result.questions}")
            passed += 1
        else:
            print(f"{Colors.RED}‚ùå FAILED{Colors.ENDC}")
            print(f"  Expected: status={test['expected_status']}, social={test['expected_social']}")
            print(f"  Got: status={result.router_status}, social={result.social_context}")
            if test['expected_status'] == 'success' and not result.questions:
                print(f"  {Colors.YELLOW}‚ö†Ô∏è No questions generated!{Colors.ENDC}")
            failed += 1
        
        print(f"{Colors.DIM}{'‚îÄ'*60}{Colors.ENDC}\n")
    
    # –ò—Ç–æ–≥–∏
    print(f"{Colors.HEADER}–†–ï–ó–£–õ–¨–¢–ê–¢–´:{Colors.ENDC}")
    print(f"{Colors.GREEN}‚úÖ Passed: {passed}/{len(test_cases)}{Colors.ENDC}")
    if failed > 0:
        print(f"{Colors.RED}‚ùå Failed: {failed}/{len(test_cases)}{Colors.ENDC}")
    
    if passed == len(test_cases):
        print(f"\n{Colors.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Mixed greeting detection —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!{Colors.ENDC}")
    else:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å mixed greeting detection{Colors.ENDC}")

if __name__ == "__main__":
    asyncio.run(test_mixed_greetings())
