#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
sys.path.insert(0, os.path.join(current_dir, 'src'))

from config import Config
from router import Router
from history_manager import HistoryManager
from zhvanetsky_humor import ZhvanetskyGenerator
from zhvanetsky_safety import SafetyChecker
from openrouter_client import OpenRouterClient


async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞"""
    print("=" * 60)
    print("üé≠ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –Æ–ú–û–†–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = Config()
    router = Router(use_cache=True)
    history = HistoryManager()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞
    print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π safety checker
    safety_checker = SafetyChecker()
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç (None –¥–ª—è mock —Ä–µ–∂–∏–º–∞)
    zhvanetsky_client = None  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API
    
    # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = ZhvanetskyGenerator(
        client=zhvanetsky_client,
        config=config
    )
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ mock —Ä–µ–∂–∏–º–µ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "user_id": "test_user_1",
            "message": "–ü—Ä–∏–≤–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —à–∫–æ–ª–µ",
            "expected": "business"
        },
        {
            "user_id": "test_user_2",
            "message": "–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª?",
            "expected": "offtopic"
        },
        {
            "user_id": "test_user_3",
            "message": "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞",
            "expected": "offtopic (unsafe)"
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n--- –¢–µ—Å—Ç {i}: {test['expected']} ---")
        print(f"üë§ User: {test['message']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_messages = history.get_history(test['user_id'])
        
        # –†–æ—É—Ç–∏–Ω–≥
        try:
            route_result = await router.route(
                user_message=test['message'],
                history=history_messages,
                user_id=test['user_id']
            )
            
            status = route_result.get('status', 'unknown')
            user_signal = route_result.get('user_signal', 'exploring_only')
            
            print(f"üìä Status: {status}")
            print(f"üìä Signal: {user_signal}")
            
            # –ï—Å–ª–∏ offtopic, –ø—Ä–æ–≤–µ—Ä—è–µ–º —é–º–æ—Ä
            if status == 'offtopic':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä
                can_use, context = safety_checker.should_use_humor(
                    message=test['message'],
                    user_signal=user_signal,
                    history=history_messages,
                    user_id=test['user_id'],
                    is_pure_social=False
                )
                
                print(f"üé≠ –Æ–º–æ—Ä —Ä–∞–∑—Ä–µ—à—ë–Ω: {'‚úÖ –î–∞' if can_use else '‚ùå –ù–µ—Ç'}")
                if not can_use:
                    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {context.get('reason', 'unknown')}")
                
                if can_use:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —é–º–æ—Ä
                    humor = await generator.generate_humor(
                        message=test['message'],
                        history=history_messages,
                        user_signal=user_signal,
                        user_id=test['user_id'],
                        timeout=3.0
                    )
                    
                    if humor:
                        # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                        safety_checker.mark_humor_used(test['user_id'])
                        print(f"üé≠ –û—Ç–≤–µ—Ç: {humor}")
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —é–º–æ—Ä")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\n" + "=" * 60)
    print("üìä –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´:")
    print("=" * 60)
    
    metrics = generator.get_metrics()
    print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {metrics['total_generated']}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_generated']}")
    print(f"Success rate: {metrics['success_rate']:.1%}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['average_generation_time']:.3f}s")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    asyncio.run(test_integration())