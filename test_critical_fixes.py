#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. Memory Leak (LRU Cache)
2. –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (Random Seed)
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from history_manager import HistoryManager
from standard_responses import get_offtopic_response
from social_responder import SocialResponder
from social_state import SocialStateManager
from social_intents import SocialIntent
import random

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def test_lru_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ LRU Cache –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print(f"\n{Colors.HEADER}=== –¢–ï–°–¢ 1: LRU Cache –≤ HistoryManager ==={Colors.ENDC}")
    
    manager = HistoryManager()
    manager.max_users = 5  # –î–ª—è —Ç–µ—Å—Ç–∞ —É–º–µ–Ω—å—à–∏–º –¥–æ 5
    
    # –î–æ–±–∞–≤–ª—è–µ–º 7 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞)
    for i in range(7):
        user_id = f"user_{i}"
        manager.add_message(user_id, "user", f"Message from user {i}")
        print(f"  –î–æ–±–∞–≤–ª–µ–Ω {user_id}, –≤—Å–µ–≥–æ –≤ –ø–∞–º—è—Ç–∏: {len(manager.storage)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    if len(manager.storage) == 5:
        print(f"{Colors.GREEN}‚úÖ LRU —Ä–∞–±–æ—Ç–∞–µ—Ç! –í –ø–∞–º—è—Ç–∏ —Ä–æ–≤–Ω–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–∏–º–∏—Ç){Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å user_2 - user_6 (–ø–µ—Ä–≤—ã–µ –¥–≤–∞ —É–¥–∞–ª–µ–Ω—ã)
        remaining_users = list(manager.storage.keys())
        expected = ['user_2', 'user_3', 'user_4', 'user_5', 'user_6']
        if remaining_users == expected:
            print(f"{Colors.GREEN}‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ (user_0, user_1){Colors.ENDC}")
        else:
            print(f"{Colors.RED}‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏: {remaining_users}{Colors.ENDC}")
    else:
        print(f"{Colors.RED}‚ùå LRU –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í –ø–∞–º—è—Ç–∏ {len(manager.storage)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π{Colors.ENDC}")
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n{Colors.BLUE}–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:{Colors.ENDC}")
    manager.add_message("user_2", "user", "–Ø —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
    
    # user_2 –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–æ–Ω–µ—Ü
    users_order = list(manager.storage.keys())
    if users_order[-1] == "user_2":
        print(f"{Colors.GREEN}‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–æ–Ω–µ—Ü{Colors.ENDC}")
    else:
        print(f"{Colors.RED}‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–º–µ—â—ë–Ω{Colors.ENDC}")

def test_determinism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å random –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print(f"\n{Colors.HEADER}=== –¢–ï–°–¢ 2: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (Random Seed) ==={Colors.ENDC}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    responses1 = []
    for _ in range(5):
        responses1.append(get_offtopic_response())
    
    # "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º" - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç –∂–µ seed
    random.seed(42)
    responses2 = []
    for _ in range(5):
        responses2.append(get_offtopic_response())
    
    if responses1 == responses2:
        print(f"{Colors.GREEN}‚úÖ Offtopic –æ—Ç–≤–µ—Ç—ã –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã!{Colors.ENDC}")
        print(f"  –ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è:  {responses1[0][:30]}...")
        print(f"  –í—Ç–æ—Ä–∞—è —Å–µ—Ä–∏—è:  {responses2[0][:30]}...")
    else:
        print(f"{Colors.RED}‚ùå –û—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ –ø–æ—Å–ª–µ '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞'!{Colors.ENDC}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    print(f"\n{Colors.BLUE}–¢–µ—Å—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:{Colors.ENDC}")
    
    state = SocialStateManager()
    responder = SocialResponder(state)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(42)
    apologies1 = []
    for i in range(3):
        apologies1.append(responder.make_prefix(f"test_{i}", SocialIntent.APOLOGY))
    
    # –°–Ω–æ–≤–∞ —Å —Ç–µ–º –∂–µ seed
    random.seed(42)
    apologies2 = []
    for i in range(3):
        apologies2.append(responder.make_prefix(f"test_{i}", SocialIntent.APOLOGY))
    
    if apologies1 == apologies2:
        print(f"{Colors.GREEN}‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã!{Colors.ENDC}")
        print(f"  –ò–∑–≤–∏–Ω–µ–Ω–∏—è: {apologies1}")
    else:
        print(f"{Colors.RED}‚ùå –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã!{Colors.ENDC}")

def test_memory_estimation():
    """–û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print(f"\n{Colors.HEADER}=== –¢–ï–°–¢ 3: –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ ==={Colors.ENDC}")
    
    manager = HistoryManager()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
    for i in range(manager.max_users):
        user_id = f"production_user_{i:04d}"
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ~500 —Å–∏–º–≤–æ–ª–æ–≤
        for j in range(10):
            manager.add_message(user_id, "user" if j % 2 == 0 else "assistant", 
                              "–≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–æ—Ç–∞. " * 10)
    
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏
    users_count = len(manager.storage)
    messages_total = sum(len(history) for history in manager.storage.values())
    avg_message_size = 500  # –±–∞–π—Ç
    estimated_memory_kb = (messages_total * avg_message_size) / 1024
    estimated_memory_mb = estimated_memory_kb / 1024
    
    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {users_count}")
    print(f"  –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_total}")
    print(f"  –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {estimated_memory_mb:.2f} MB")
    
    if estimated_memory_mb < 20:
        print(f"{Colors.GREEN}‚úÖ –ü–∞–º—è—Ç—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º (<20MB –¥–ª—è {manager.max_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π){Colors.ENDC}")
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —É–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç—ã{Colors.ENDC}")

if __name__ == "__main__":
    print(f"{Colors.BOLD}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π{Colors.ENDC}")
    
    test_lru_cache()
    test_determinism()
    test_memory_estimation()
    
    print(f"\n{Colors.HEADER}=== –ò–¢–û–ì–ò ==={Colors.ENDC}")
    print(f"{Colors.GREEN}–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª—ë–Ω—ã–µ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ MVP!{Colors.ENDC}")
    print(f"Memory Leak –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ LRU Cache (max 1000 users)")
    print(f"Random –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ seed=42")