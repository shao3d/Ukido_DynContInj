"""
Chainlit –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Ukido AI Assistant v0.13.5
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏ –∫—Ä–∞—Å–∏–≤—ã–π UI –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
"""

import chainlit as cl
import sys
import os
import asyncio
import json
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ö–õ–ê–°–°–´, –∞ –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
from src.router import Router
from src.response_generator import ResponseGenerator  
from src.history_manager import HistoryManager
from src.persistence_manager import PersistenceManager, create_state_snapshot, restore_state_snapshot
from src.social_state import SocialStateManager
from src.simple_cta_blocker import SimpleCTABlocker
from src.config import Config
from src.standard_responses import get_offtopic_response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
config = Config()
router = Router(use_cache=True)
response_generator = ResponseGenerator()
history_manager = HistoryManager()
persistence_manager = PersistenceManager(base_path="data/persistent_states")
social_state = SocialStateManager()
simple_cta_blocker = SimpleCTABlocker()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è user_signals (–∫–∞–∫ –≤ main.py)
user_signals_history = {}

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
zhvanetsky_generator = None
zhvanetsky_safety_checker = None

if config.ZHVANETSKY_ENABLED:
    try:
        from src.zhvanetsky_humor import ZhvanetskyGenerator
        from src.zhvanetsky_safety import SafetyChecker
        from src.openrouter_client import OpenRouterClient
        
        zhvanetsky_client = OpenRouterClient(
            api_key=config.OPENROUTER_API_KEY,
            model="anthropic/claude-3.5-haiku",
            temperature=config.ZHVANETSKY_TEMPERATURE
        )
        
        zhvanetsky_safety_checker = SafetyChecker()
        zhvanetsky_generator = ZhvanetskyGenerator(
            client=zhvanetsky_client,
            config=config
        )
        print(f"üé≠ –Æ–º–æ—Ä –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Chainlit (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {config.ZHVANETSKY_PROBABILITY * 100}%)")
    except Exception as e:
        print(f"‚ö†Ô∏è –Æ–º–æ—Ä –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")

@cl.on_chat_start
async def start_chat():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.id –∫–∞–∫ user_id
    user_id = cl.context.session.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    cl.user_session.set("user_id", user_id)
    cl.user_session.set("message_count", 0)
    cl.user_session.set("greeting_exchanged", False)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saved_state = persistence_manager.load_state(user_id)
    if saved_state:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main.py
        restore_state_snapshot(
            saved_state, 
            history_manager, 
            user_signals_history,
            social_state, 
            user_id
        )
        cl.user_session.set("user_signal", saved_state.get("user_signal", "exploring_only"))
        cl.user_session.set("message_count", saved_state.get("message_count", 0))
        cl.user_session.set("greeting_exchanged", saved_state.get("greeting_exchanged", False))
        
        await cl.Message(
            content="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥. –ü—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å!"
        ).send()
    else:
        cl.user_session.set("user_signal", "exploring_only")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã Ukido.
        
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ:
‚Ä¢ üéì –ö—É—Ä—Å–∞—Ö soft skills –¥–ª—è –¥–µ—Ç–µ–π 7-14 –ª–µ—Ç
‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è  
‚Ä¢ üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∏ –º–µ—Ç–æ–¥–∏–∫–µ
‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
        
        await cl.Message(content=welcome_message).send()

@cl.on_message
async def main(message: cl.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    user_id = cl.user_session.get("user_id")
    message_count = cl.user_session.get("message_count", 0) + 1
    cl.user_session.set("message_count", message_count)
    
    user_signal = cl.user_session.get("user_signal", "exploring_only")
    greeting_exchanged = cl.user_session.get("greeting_exchanged", False)
    
    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    msg = cl.Message(content="")
    await msg.send()
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await msg.stream_token("üîç ")
        await asyncio.sleep(0.3)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_messages = history_manager.get_history(user_id)
        
        # === –≠–¢–ê–ü 1: ROUTER ===
        router_result = await router.route(
            message.content, 
            history_messages, 
            user_id
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞
        intent = router_result.get("intent", "success")
        new_signal = router_result.get("user_signal", user_signal)
        documents = router_result.get("documents", [])
        decomposed_questions = router_result.get("decomposed_questions", [])
        
        # HOTFIX: –°–æ—Ö—Ä–∞–Ω—è–µ–º user_signal (–∫–∞–∫ –≤ main.py)
        if new_signal and new_signal != user_signal:
            user_signals_history[user_id] = new_signal
            cl.user_session.set("user_signal", new_signal)
            user_signal = new_signal  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ (–ø–æ–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤)
        
        # === –≠–¢–ê–ü 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê ===
        response_text = ""
        response_metadata = {}
        
        if intent == "offtopic":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ offtopic —Å —é–º–æ—Ä–æ–º
            humor_generated = False
            
            if zhvanetsky_generator and config.ZHVANETSKY_ENABLED:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä
                if zhvanetsky_safety_checker:
                    can_use_humor = zhvanetsky_safety_checker.check_user_signal(new_signal)
                    if can_use_humor:
                        try:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —é–º–æ—Ä–∞
                            await msg.stream_token("üé≠ ")
                            await asyncio.sleep(0.2)
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —é–º–æ—Ä
                            humor_response = await zhvanetsky_generator.generate_humor(
                                message.content,
                                history_messages[-5:] if history_messages else [],
                                new_signal,
                                is_greeting=(not greeting_exchanged and social_state.is_greeting(message.content))
                            )
                            
                            if humor_response and humor_response.strip():
                                response_text = humor_response
                                humor_generated = True
                                response_metadata = {"humor_generated": True}
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–º–æ—Ä–∞: {e}")
            
            # –ï—Å–ª–∏ —é–º–æ—Ä –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not response_text:
                response_text = get_offtopic_response()
                response_metadata = {"humor_generated": False}
                
        elif intent == "need_simplification":
            response_text = "–Ø –∑–∞–º–µ—Ç–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º –∏—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?"
            response_metadata = {"intent": "need_simplification"}
            
        else:  # success
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            router_data = {
                "status": "success",
                "documents": documents,
                "decomposed_questions": decomposed_questions,
                "user_signal": new_signal,
                "cta_blocked": False,  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è MVP
                "cta_frequency_modifier": 1.0,
                "social_context": {"greeting_exchanged": greeting_exchanged}
            }
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response_text, response_metadata = await response_generator.generate(
                router_data,
                history=history_messages,
                current_message=message.content
            )
        
        # === –≠–¢–ê–ü 3: –°–¢–†–ò–ú–ò–ù–ì –û–¢–í–ï–¢–ê ===
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        words = response_text.split()
        
        # –°—Ç—Ä–∏–º–∏–º –ø–æ 2-3 —Å–ª–æ–≤–∞ –∑–∞ —Ä–∞–∑ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        for i in range(0, len(words), 2):
            chunk = " ".join(words[i:min(i+2, len(words))])
            if i > 0:
                chunk = " " + chunk  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
            await msg.stream_token(chunk)
            await asyncio.sleep(0.03)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
        await msg.update()
        
        # === –≠–¢–ê–ü 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_manager.add_message(user_id, "user", message.content)
        history_manager.add_message(user_id, "assistant", response_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º greeting status
        if social_state.is_greeting(message.content):
            cl.user_session.set("greeting_exchanged", True)
            social_state.mark_greeted(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–∞–∫ –≤ main.py)
        state_snapshot = create_state_snapshot(
            history_manager,
            user_signals_history, 
            social_state,
            user_id
        )
        persistence_manager.save_state(user_id, state_snapshot)
        
    except Exception as e:
        error_msg = f"üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        # –î–ª—è –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cl.Message(content=error_msg).send()
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Chainlit: {e}")
        import traceback
        traceback.print_exc()

@cl.on_stop
async def stop_chat():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞"""
    user_id = cl.user_session.get("user_id")
    if user_id:
        try:
            state_snapshot = create_state_snapshot(
                history_manager,
                user_signals_history,
                social_state, 
                user_id
            )
            persistence_manager.save_state(user_id, state_snapshot)
            print(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è {user_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    cl.run()