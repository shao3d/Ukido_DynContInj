#!/usr/bin/env python3
"""
HTTP API –ü–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ukido AI Assistant —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
–í–µ—Ä—Å–∏—è: 1.0 (MVP)

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞ —Å production —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ HTTP API
- –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã (–≤–∫–ª—é—á–∞—è —é–º–æ—Ä –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ)
- –¢—Ä–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π, single message, batch testing
- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python http_sandbox.py
    
    # –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    python http_sandbox.py -m "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å?"
    
    # Batch —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    python http_sandbox.py --test
"""

import asyncio
import httpx
import json
import sys
import time
import os
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import argparse

# ====== –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ======
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    PURPLE = '\033[95m'  # –î–ª—è —é–º–æ—Ä–∞

# ====== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò ======
@dataclass
class ProcessingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP API"""
    user_message: str
    response_text: str
    intent: str
    user_signal: Optional[str]
    social_context: Optional[str]
    documents: List[str]
    questions: List[str]
    total_time: float
    fuzzy_matched: bool = False
    confidence: float = 1.0
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    is_humor: bool = False
    raw_response: Dict[str, Any] = None

# ====== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–ï–°–û–ß–ù–ò–¶–´ ======
class HTTPSandbox:
    """HTTP –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session_stats = {
            "total_requests": 0,
            "success_count": 0,
            "offtopic_count": 0,
            "humor_detected": 0,
            "avg_response_time": 0.0,
            "signals": {}
        }
        
    async def check_server_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/health", timeout=2.0)
                return response.status_code == 200
        except:
            return False
    
    async def process_message(
        self,
        message: str,
        user_id: str = "test_user",
        show_details: bool = True
    ) -> ProcessingResult:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å retry –ª–æ–≥–∏–∫–æ–π"""
        
        start_time = time.time()
        max_retries = 3
        timeout_seconds = 15.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 15 —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_retries):
            try:
                async with httpx.AsyncClient() as client:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    if attempt > 0:
                        print(f"{Colors.YELLOW}‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}...{Colors.ENDC}")
                    
                    response = await client.post(
                        f"{self.base_url}/chat",
                        json={"user_id": user_id, "message": message},
                        timeout=timeout_seconds
                    )
                
                    if response.status_code != 200:
                        print(f"{Colors.RED}‚ùå Server error: {response.status_code}{Colors.ENDC}")
                        if response.status_code == 500 and attempt < max_retries - 1:
                            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ retry
                            continue
                        return None
                
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
                    try:
                        data = response.json()
                    except json.JSONDecodeError as e:
                        print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: {e}{Colors.ENDC}")
                        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                        data = {
                            "response": response.text[:500] if response.text else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
                            "intent": "error",
                            "error": str(e)
                        }
                    
                    total_time = time.time() - start_time
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    if not isinstance(data, dict):
                        print(f"{Colors.YELLOW}‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON –æ–±—ä–µ–∫—Ç–æ–º{Colors.ENDC}")
                        data = {"response": str(data), "intent": "error"}
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                    response_text = data.get("response", "")
                    if not response_text:
                        response_text = data.get("message", "")  # Fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
                        if not response_text:
                            response_text = "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ —à–∫–æ–ª–µ Ukido?"
                    
                    # –î–µ—Ç–µ–∫—Ü–∏—è —é–º–æ—Ä–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    is_humor = self._detect_humor(response_text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                    self._update_stats(data, total_time, is_humor)
                    
                    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    result = ProcessingResult(
                        user_message=message,
                        response_text=response_text,
                        intent=data.get("intent", "unknown"),
                        user_signal=data.get("user_signal"),
                        social_context=data.get("social"),
                        documents=data.get("relevant_documents", data.get("documents", [])),
                        questions=data.get("decomposed_questions", data.get("questions", [])),
                        total_time=total_time,
                        fuzzy_matched=data.get("fuzzy_matched", False),
                        confidence=data.get("confidence", 1.0),
                        is_humor=is_humor,
                        raw_response=data
                    )
                    
                    if show_details:
                        self._show_processing_details(result)
                    
                    return result
                
            except httpx.ConnectError:
                if attempt == 0:
                    print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É{Colors.ENDC}")
                    print(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:{Colors.ENDC}")
                    print(f"   python src/main.py")
                return None
                
            except httpx.TimeoutException as e:
                if attempt < max_retries - 1:
                    print(f"{Colors.YELLOW}‚è±Ô∏è Timeout –ø–æ—Å–ª–µ {timeout_seconds}—Å, –ø–æ–≤—Ç–æ—Ä—è–µ–º...{Colors.ENDC}")
                    await asyncio.sleep(0.5)
                    continue
                else:
                    print(f"{Colors.RED}‚ùå Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª {timeout_seconds} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫{Colors.ENDC}")
                    return None
                    
            except Exception as e:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}{Colors.ENDC}")
                if attempt < max_retries - 1 and "timeout" in str(e).lower():
                    await asyncio.sleep(0.5)
                    continue
                return None
        
        return None
    
    def _detect_humor(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ
        
        –Æ–º–æ—Ä –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏,
        –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —à–∫–æ–ª—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
        """
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
        humor_patterns = [
            # –ò—Ä–æ–Ω–∏—á–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            "–∞ —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏",
            "–∫–∞–∫ –≤ –∞–Ω–µ–∫–¥–æ—Ç–µ", 
            "–∑–Ω–∞–µ—Ç–µ —á—Ç–æ —Å–º–µ—à–Ω–æ",
            "–∑–∞–±–∞–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
            
            # –ü–∞—Ä–∞–¥–æ–∫—Å–∞–ª—å–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 
            "—ç—Ç–æ –∫–∞–∫",
            "–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ",
            "–≤—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ",
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
            "–º—ã —Ç—É—Ç —Ç–∞–∫–∏–µ",
            "—É –Ω–∞—Å —Ç—É—Ç —Ç–∞–∫–∞—è",
            "–∑–Ω–∞–µ—Ç–µ, —É –Ω–∞—Å",
            
            # –Ø–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —é–º–æ—Ä–∞
            "—à—É—Ç–∫–∞", "—Å–º–µ—à–Ω–æ", "–∑–∞–±–∞–≤–Ω–æ",
            "–ø—Ä–∏–∫–æ–ª", "–∞–Ω–µ–∫–¥–æ—Ç"
        ]
        
        text_lower = text.lower()
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ –ù–ï —é–º–æ—Ä
        serious_markers = [
            "–º–µ—Ç–æ–¥–∏–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "–ø–µ–¥–∞–≥–æ–≥", "–ø—Å–∏—Ö–æ–ª–æ–≥", "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–º–∞–≥–∏—Å—Ç—Ä"
        ]
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, —ç—Ç–æ –≤—Ä—è–¥ –ª–∏ —é–º–æ—Ä
        serious_count = sum(1 for marker in serious_markers if marker in text_lower)
        if serious_count >= 3:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        return any(pattern.lower() in text_lower for pattern in humor_patterns)
    
    def _update_stats(self, response_data: dict, time_taken: float, is_humor: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        self.session_stats["total_requests"] += 1
        
        intent = response_data.get("intent", "unknown")
        if intent == "success":
            self.session_stats["success_count"] += 1
        elif intent == "offtopic":
            self.session_stats["offtopic_count"] += 1
        
        if is_humor:
            self.session_stats["humor_detected"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        n = self.session_stats["total_requests"]
        prev_avg = self.session_stats["avg_response_time"]
        self.session_stats["avg_response_time"] = (prev_avg * (n-1) + time_taken) / n
        
        # –°—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signal = response_data.get("user_signal", "unknown")
        if signal not in self.session_stats["signals"]:
            self.session_stats["signals"][signal] = 0
        self.session_stats["signals"][signal] += 1
    
    def _show_processing_details(self, result: ProcessingResult):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"\n{Colors.DIM}{'='*60}{Colors.ENDC}")
        print(f"{Colors.CYAN}‚è±Ô∏è  Response time:{Colors.ENDC} {result.total_time:.2f}s")
        print(f"{Colors.CYAN}üìä Intent:{Colors.ENDC} {result.intent}")
        
        if result.user_signal:
            signal_icon = self._get_signal_icon(result.user_signal)
            print(f"{Colors.CYAN}üéØ Signal:{Colors.ENDC} {signal_icon} {result.user_signal}")
        
        if result.social_context:
            print(f"{Colors.CYAN}üëã Social:{Colors.ENDC} {result.social_context}")
        
        if result.documents:
            print(f"{Colors.CYAN}üìö Documents:{Colors.ENDC} {', '.join(result.documents)}")
        
        if result.questions:
            print(f"{Colors.CYAN}‚ùì Questions:{Colors.ENDC}")
            for q in result.questions:
                print(f"   ‚Ä¢ {q}")
        
        if result.fuzzy_matched:
            print(f"{Colors.YELLOW}üîç Fuzzy matching used{Colors.ENDC}")
        
        if result.is_humor:
            print(f"{Colors.PURPLE}üé≠ –Æ–º–æ—Ä –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ detected!{Colors.ENDC}")
    
    def _get_signal_icon(self, signal: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è user_signal"""
        icons = {
            "price_sensitive": "üí∞",
            "anxiety_about_child": "üòü",
            "ready_to_buy": "‚úÖ",
            "exploring_only": "üîç"
        }
        return icons.get(signal, "‚ùì")
    
    def show_result(self, result: ProcessingResult):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not result:
            return
        
        print(f"\n{Colors.BOLD}=== RESPONSE ==={Colors.ENDC}")
        
        # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —é–º–æ—Ä —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º
        if result.is_humor:
            print(f"{Colors.PURPLE}üé≠ {result.response_text}{Colors.ENDC}")
        else:
            print(result.response_text)
        
        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        self._show_analysis(result)
    
    def _show_analysis(self, result: ProcessingResult):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è Claude"""
        print(f"\n{Colors.DIM}--- Analysis for Claude ---{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_signal
        if "—Å–∫–æ–ª—å–∫" in result.user_message.lower() or "—Ü–µ–Ω" in result.user_message.lower():
            if result.user_signal == "price_sensitive":
                checks.append(f"{Colors.GREEN}‚úì Correctly detected price sensitivity{Colors.ENDC}")
            else:
                checks.append(f"{Colors.YELLOW}‚ö† Expected price_sensitive, got {result.user_signal}{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ anxiety
        anxiety_words = ["–±–æ–∏—Ç—Å—è", "—Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π", "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π", "–ø–µ—Ä–µ–∂–∏–≤–∞—é"]
        if any(word in result.user_message.lower() for word in anxiety_words):
            if result.user_signal == "anxiety_about_child":
                checks.append(f"{Colors.GREEN}‚úì Correctly detected anxiety{Colors.ENDC}")
            else:
                checks.append(f"{Colors.YELLOW}‚ö† Missed anxiety signal{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ready_to_buy
        if "–∑–∞–ø–∏—à–∏—Ç–µ" in result.user_message.lower() or "–≥–æ—Ç–æ–≤" in result.user_message.lower():
            if result.user_signal == "ready_to_buy":
                checks.append(f"{Colors.GREEN}‚úì Correctly detected purchase intent{Colors.ENDC}")
            else:
                checks.append(f"{Colors.YELLOW}‚ö† Missed ready_to_buy signal{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        if result.social_context:
            if result.social_context == "greeting" and ("–ø—Ä–∏–≤–µ—Ç" in result.user_message.lower() or "–∑–¥—Ä–∞–≤—Å—Ç–≤" in result.user_message.lower()):
                checks.append(f"{Colors.GREEN}‚úì Correctly detected greeting{Colors.ENDC}")
            elif result.social_context == "thanks" and "—Å–ø–∞—Å–∏–±" in result.user_message.lower():
                checks.append(f"{Colors.GREEN}‚úì Correctly detected thanks{Colors.ENDC}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
        if checks:
            for check in checks:
                print(f"  {check}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if result.intent == "offtopic" and not result.is_humor and len(result.response_text) < 50:
            recommendations.append("üí° Generic offtopic response could be more helpful")
        
        if result.user_signal == "anxiety_about_child" and not any(word in result.response_text.lower() for word in ["–ø–æ–Ω–∏–º–∞—é", "–≤–∞–∂–Ω–æ"]):
            recommendations.append("üí° Consider adding empathy for anxious parent")
        
        if result.user_signal == "price_sensitive" and "—Å–∫–∏–¥–∫" not in result.response_text.lower():
            recommendations.append("üí° Consider mentioning discounts for price-sensitive user")
        
        if result.user_signal == "ready_to_buy" and not result.questions:
            recommendations.append("üí° Ready to buy user should get implicit questions")
        
        if recommendations:
            print(f"\n  {Colors.CYAN}Recommendations:{Colors.ENDC}")
            for rec in recommendations:
                print(f"  {rec}")
    
    def show_session_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        print(f"\n{Colors.BOLD}=== SESSION STATISTICS ==={Colors.ENDC}")
        print(f"Total requests: {self.session_stats['total_requests']}")
        print(f"Success rate: {self.session_stats['success_count']}/{self.session_stats['total_requests']}")
        print(f"Offtopic: {self.session_stats['offtopic_count']}")
        if self.session_stats['humor_detected'] > 0:
            print(f"{Colors.PURPLE}üé≠ Humor detected: {self.session_stats['humor_detected']} times{Colors.ENDC}")
        print(f"Avg response time: {self.session_stats['avg_response_time']:.2f}s")
        
        if self.session_stats['signals']:
            print(f"\nUser signals distribution:")
            for signal, count in self.session_stats['signals'].items():
                icon = self._get_signal_icon(signal)
                print(f"  {icon} {signal}: {count}")

# ====== –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ ======

async def interactive_mode(sandbox: HTTPSandbox):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print(f"{Colors.HEADER}üöÄ HTTP Sandbox - Interactive Mode{Colors.ENDC}")
    print(f"Commands: /quit, /clear, /user <id>, /stats, /help")
    print(f"{Colors.DIM}Connecting to {sandbox.base_url}...{Colors.ENDC}")
    
    if not await sandbox.check_server_health():
        print(f"{Colors.RED}‚ùå Server not available at {sandbox.base_url}{Colors.ENDC}")
        print(f"{Colors.YELLOW}üí° Start server with: python src/main.py{Colors.ENDC}")
        return
    
    print(f"{Colors.GREEN}‚úÖ Connected to server{Colors.ENDC}\n")
    
    user_id = "test_user"
    message_count = 0
    
    while True:
        try:
            # –ü—Ä–æ–º–ø—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            prompt = f"{Colors.CYAN}[{message_count}] You:{Colors.ENDC} "
            user_input = input(prompt)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input.lower() in ['/quit', '/exit', '/q']:
                sandbox.show_session_stats()
                print(f"{Colors.YELLOW}Goodbye!{Colors.ENDC}")
                break
            
            elif user_input.lower() == '/clear':
                print("\033[2J\033[H")  # Clear screen
                print(f"{Colors.GREEN}Screen cleared{Colors.ENDC}")
                continue
            
            elif user_input.lower().startswith('/user '):
                user_id = user_input[6:].strip()
                print(f"{Colors.GREEN}Switched to user: {user_id}{Colors.ENDC}")
                continue
            
            elif user_input.lower() == '/stats':
                sandbox.show_session_stats()
                continue
            
            elif user_input.lower() == '/help':
                print(f"{Colors.CYAN}Available commands:{Colors.ENDC}")
                print("  /quit - exit sandbox")
                print("  /clear - clear screen")
                print("  /user <id> - switch user ID")
                print("  /stats - show session statistics")
                print("  /help - show this help")
                continue
            
            elif user_input.startswith('/'):
                print(f"{Colors.YELLOW}Unknown command. Type /help for commands{Colors.ENDC}")
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await sandbox.process_message(user_input, user_id, show_details=True)
            if result:
                sandbox.show_result(result)
                message_count += 1
            
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}Interrupted{Colors.ENDC}")
            break
        except Exception as e:
            print(f"{Colors.RED}Error: {e}{Colors.ENDC}")

async def single_message_mode(sandbox: HTTPSandbox, message: str, user_id: str = "test_user"):
    """–†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"{Colors.HEADER}üöÄ HTTP Sandbox - Single Message{Colors.ENDC}")
    
    if not await sandbox.check_server_health():
        print(f"{Colors.RED}‚ùå Server not available{Colors.ENDC}")
        print(f"{Colors.YELLOW}üí° Start server with: python src/main.py{Colors.ENDC}")
        return 1
    
    result = await sandbox.process_message(message, user_id, show_details=True)
    if result:
        sandbox.show_result(result)
        return 0 if result.intent == "success" else 1
    return 1

async def dialogue_test_mode(sandbox: HTTPSandbox, dialogue_id: int):
    """–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ test_humor_scenarios.json"""
    print(f"{Colors.HEADER}üöÄ HTTP Sandbox - Dialogue Test Mode{Colors.ENDC}")
    
    if not await sandbox.check_server_health():
        print(f"{Colors.RED}‚ùå Server not available{Colors.ENDC}")
        print(f"{Colors.YELLOW}üí° Start server with: python src/main.py{Colors.ENDC}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
    scenarios_file = "test_humor_scenarios.json"
    if not os.path.exists(scenarios_file):
        print(f"{Colors.RED}‚ùå File {scenarios_file} not found{Colors.ENDC}")
        return
    
    with open(scenarios_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
        scenarios = data.get('test_scenarios', data.get('scenarios', []))
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –¥–∏–∞–ª–æ–≥
    dialogue = None
    for scenario in scenarios:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ ID (5), —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ (dialog_5)
        scenario_id = str(scenario.get('id', ''))
        if scenario_id == str(dialogue_id) or scenario_id == f"dialog_{dialogue_id}":
            dialogue = scenario
            break
    
    if not dialogue:
        print(f"{Colors.RED}‚ùå Dialogue with ID {dialogue_id} not found{Colors.ENDC}")
        print(f"Available IDs: {', '.join(str(s['id']) for s in scenarios)}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
    print(f"\n{Colors.BOLD}=== SCENARIO {dialogue['id']}: {dialogue['name']} ==={Colors.ENDC}")
    print(f"{Colors.CYAN}Description:{Colors.ENDC} {dialogue['description']}")
    if 'expected_signal' in dialogue:
        print(f"{Colors.CYAN}Expected signal:{Colors.ENDC} {dialogue['expected_signal']}")
    if 'expected_humor' in dialogue:
        print(f"{Colors.CYAN}Expected humor:{Colors.ENDC} {dialogue['expected_humor']}")
    elif 'expected_humor_count' in dialogue:
        print(f"{Colors.CYAN}Expected humor:{Colors.ENDC} {dialogue['expected_humor_count']}")
    print(f"{Colors.DIM}{'='*60}{Colors.ENDC}\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    dialogue_stats = {
        "total_messages": len(dialogue['messages']),
        "offtopic_count": 0,
        "humor_detected": 0,
        "signal_correct": True,
        "current_signal": None,
        "failed_messages": 0
    }
    
    user_id = f"humor_test_{dialogue_id}"
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ user_id –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{sandbox.base_url}/clear_history/{user_id}")
            if response.status_code == 200:
                print(f"{Colors.GREEN}‚úì History cleared for {user_id}{Colors.ENDC}\n")
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞)
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–∏–∞–ª–æ–≥–∞
    for i, msg_data in enumerate(dialogue['messages'], 1):
        print(f"{Colors.BOLD}[Message {i}/{len(dialogue['messages'])}]{Colors.ENDC}")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç—ã
        if isinstance(msg_data, str):
            message = msg_data
            print(f"{Colors.CYAN}USER:{Colors.ENDC} {message}")
        else:
            message = msg_data['message']
            print(f"{Colors.CYAN}USER:{Colors.ENDC} {message}")
            print(f"{Colors.DIM}Expected: {msg_data.get('expected_intent', 'N/A')}")
            if msg_data.get('is_offtopic'):
                print(f"          Offtopic=True, Humor possible={msg_data.get('humor_possible', False)}{Colors.ENDC}")
            else:
                print(f"{Colors.ENDC}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await sandbox.process_message(
            message,
            user_id,
            show_details=False  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏, –ø–æ–∫–∞–∂–µ–º —Å–≤–æ–∏
        )
        
        if result:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if result.is_humor:
                print(f"{Colors.PURPLE}üé≠ ASSISTANT: {result.response_text}{Colors.ENDC}")
                dialogue_stats["humor_detected"] += 1
            else:
                print(f"{Colors.GREEN}ASSISTANT:{Colors.ENDC} {result.response_text}")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            print(f"\n{Colors.DIM}Analysis:{Colors.ENDC}")
            
            # Intent (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            if isinstance(msg_data, dict) and 'expected_intent' in msg_data:
                if result.intent == msg_data['expected_intent']:
                    print(f"  {Colors.GREEN}‚úì Intent: {result.intent}{Colors.ENDC}")
                else:
                    print(f"  {Colors.RED}‚úó Intent: got {result.intent}, expected {msg_data['expected_intent']}{Colors.ENDC}")
            else:
                print(f"  Intent: {result.intent}")
            
            # Signal tracking
            if result.user_signal:
                dialogue_stats["current_signal"] = result.user_signal
                print(f"  Signal: {result.user_signal}")
            
            # Offtopic tracking
            if isinstance(msg_data, dict) and msg_data.get('is_offtopic'):
                dialogue_stats["offtopic_count"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —é–º–æ—Ä–∞
                if msg_data.get('humor_possible'):
                    if result.is_humor:
                        print(f"  {Colors.PURPLE}üé≠ HUMOR DETECTED (good!){Colors.ENDC}")
                    else:
                        print(f"  {Colors.DIM}No humor (33% chance){Colors.ENDC}")
                elif msg_data.get('block_reason'):
                    if result.is_humor:
                        print(f"  {Colors.RED}‚úó HUMOR SHOULD BE BLOCKED ({msg_data['block_reason']}){Colors.ENDC}")
                    else:
                        print(f"  {Colors.GREEN}‚úì Humor correctly blocked ({msg_data['block_reason']}){Colors.ENDC}")
            
            # Signal change tracking
            if isinstance(msg_data, dict) and msg_data.get('signal_change'):
                print(f"  {Colors.YELLOW}Signal change expected: ‚Üí {msg_data['signal_change']}{Colors.ENDC}")
            
            print(f"\n{Colors.DIM}{'‚îÄ'*60}{Colors.ENDC}\n")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        else:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {Colors.ENDC}")
            print(f"{Colors.RED}‚úó Request failed{Colors.ENDC}")
            dialogue_stats["failed_messages"] += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if isinstance(msg_data, dict):
                print(f"{Colors.DIM}  Expected intent: {msg_data.get('expected_intent', 'N/A')}{Colors.ENDC}")
                print(f"{Colors.DIM}  Message type: {type(msg_data['message']) if 'message' in msg_data else type(msg_data)}{Colors.ENDC}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–ª–æ–≥—É
    print(f"\n{Colors.BOLD}=== DIALOGUE SUMMARY ==={Colors.ENDC}")
    print(f"Total messages: {dialogue_stats['total_messages']}")
    print(f"Offtopic messages: {dialogue_stats['offtopic_count']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –±—ã–ª–∏
    if dialogue_stats.get('failed_messages', 0) > 0:
        print(f"{Colors.RED}Failed messages: {dialogue_stats['failed_messages']}{Colors.ENDC}")
    
    if dialogue_stats['offtopic_count'] > 0:
        humor_rate = (dialogue_stats['humor_detected'] / dialogue_stats['offtopic_count']) * 100
        print(f"{Colors.PURPLE}üé≠ Humor detected: {dialogue_stats['humor_detected']}/{dialogue_stats['offtopic_count']} offtopic ({humor_rate:.0f}%){Colors.ENDC}")
        
        # –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–Ω–∏—è–º
        if dialogue['expected_humor_count'] == "0 (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É)":
            if dialogue_stats['humor_detected'] == 0:
                print(f"{Colors.GREEN}‚úì Humor correctly blocked as expected{Colors.ENDC}")
            else:
                print(f"{Colors.RED}‚úó Humor should have been blocked!{Colors.ENDC}")
        else:
            print(f"Expected: {dialogue['expected_humor_count']}")
            if humor_rate >= 20 and humor_rate <= 50:
                print(f"{Colors.GREEN}‚úì Humor rate is within expected range{Colors.ENDC}")
            elif humor_rate < 20:
                print(f"{Colors.YELLOW}‚ö† Humor rate is lower than expected{Colors.ENDC}")
            else:
                print(f"{Colors.YELLOW}‚ö† Humor rate is higher than expected{Colors.ENDC}")
    
    print(f"\nFinal signal: {dialogue_stats['current_signal']}")
    if 'expected_signal' in dialogue:
        print(f"Expected signal pattern: {dialogue['expected_signal']}")

async def batch_test_mode(sandbox: HTTPSandbox, test_file: str = None):
    """–†–µ–∂–∏–º batch —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Colors.HEADER}üöÄ HTTP Sandbox - Batch Test Mode{Colors.ENDC}")
    
    if not await sandbox.check_server_health():
        print(f"{Colors.RED}‚ùå Server not available{Colors.ENDC}")
        print(f"{Colors.YELLOW}üí° Start server with: python src/main.py{Colors.ENDC}")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    if test_file and os.path.exists(test_file):
        print(f"Loading scenarios from: {test_file}")
        with open(test_file, 'r', encoding='utf-8') as f:
            test_data = json.load(f)
            test_scenarios = test_data.get('scenarios', [])
            print(f"Loaded {len(test_scenarios)} scenarios\n")
    else:
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        test_scenarios = [
            {"id": "price_1", "message": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å?", "user_id": "test_price"},
            {"id": "anxiety_1", "message": "–ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–¥–æ–π–¥—É—Ç –ª–∏ –µ–º—É –∑–∞–Ω—è—Ç–∏—è?", "user_id": "test_anxiety"},
            {"id": "ready_1", "message": "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∫—É—Ä—Å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞", "user_id": "test_ready"},
            {"id": "exploring_1", "message": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ", "user_id": "test_explore"},
            {"id": "greeting_1", "message": "–ü—Ä–∏–≤–µ—Ç!", "user_id": "test_social"},
            {"id": "offtopic_1", "message": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", "user_id": "test_offtopic"},
            {"id": "mixed_1", "message": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞?", "user_id": "test_mixed"},
        ]
    
    print(f"Running {len(test_scenarios)} test scenarios...\n")
    
    results = []
    categories = {}  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    for i, scenario in enumerate(test_scenarios, 1):
        category = scenario.get('category', 'default')
        print(f"{Colors.CYAN}[{i}/{len(test_scenarios)}] {category.upper()}: {scenario['id']}{Colors.ENDC}")
        print(f"Message: \"{scenario['message']}\"")
        
        result = await sandbox.process_message(
            scenario['message'],
            scenario.get('user_id', 'test_user'),
            show_details=False
        )
        
        if result:
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–π
            expected = scenario.get('expected', {})
            checks_passed = []
            checks_failed = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ intent
            if 'intent' in expected:
                if result.intent == expected['intent']:
                    checks_passed.append(f"intent={result.intent}")
                else:
                    checks_failed.append(f"intent: got {result.intent}, expected {expected['intent']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_signal
            if 'user_signal' in expected:
                if result.user_signal == expected['user_signal']:
                    checks_passed.append(f"signal={result.user_signal}")
                else:
                    checks_failed.append(f"signal: got {result.user_signal}, expected {expected['user_signal']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ social
            if 'social' in expected:
                if result.social_context == expected['social']:
                    checks_passed.append(f"social={result.social_context}")
                else:
                    checks_failed.append(f"social: got {result.social_context}, expected {expected['social']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            if 'should_have' in expected:
                found_words = [word for word in expected['should_have'] if word in result.response_text.lower()]
                missing_words = [word for word in expected['should_have'] if word not in result.response_text.lower()]
                if found_words:
                    checks_passed.append(f"keywords: {', '.join(found_words)}")
                if missing_words:
                    checks_failed.append(f"missing keywords: {', '.join(missing_words)}")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if checks_passed:
                print(f"{Colors.GREEN}  ‚úì {', '.join(checks_passed)}{Colors.ENDC}")
            if checks_failed:
                for fail in checks_failed:
                    print(f"{Colors.RED}  ‚úó {fail}{Colors.ENDC}")
            
            # –î–µ—Ç–µ–∫—Ü–∏—è —é–º–æ—Ä–∞ –¥–ª—è offtopic
            if result.intent == "offtopic":
                if result.is_humor:
                    print(f"{Colors.PURPLE}  üé≠ HUMOR DETECTED!{Colors.ENDC}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —é–º–æ—Ä–∞
                    humor_preview = result.response_text[:100] + "..." if len(result.response_text) > 100 else result.response_text
                    print(f"{Colors.PURPLE}     \"{humor_preview}\"{Colors.ENDC}")
                elif category in ["pure_offtopic", "humor_test"]:
                    print(f"{Colors.DIM}  No humor (33% chance expected){Colors.ENDC}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results.append({
                "scenario": scenario,
                "result": result,
                "passed": len(checks_failed) == 0
            })
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if category not in categories:
                categories[category] = {"passed": 0, "failed": 0, "total": 0}
            categories[category]["total"] += 1
            if len(checks_failed) == 0:
                categories[category]["passed"] += 1
            else:
                categories[category]["failed"] += 1
        else:
            print(f"{Colors.RED}  ‚úó Request failed{Colors.ENDC}")
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{Colors.BOLD}=== BATCH TEST SUMMARY ==={Colors.ENDC}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if categories:
        print(f"\n{Colors.CYAN}Results by category:{Colors.ENDC}")
        for cat_name, cat_stats in categories.items():
            pass_rate = (cat_stats['passed'] / cat_stats['total'] * 100) if cat_stats['total'] > 0 else 0
            color = Colors.GREEN if pass_rate >= 70 else Colors.YELLOW if pass_rate >= 40 else Colors.RED
            print(f"  {cat_name}: {color}{cat_stats['passed']}/{cat_stats['total']} ({pass_rate:.0f}%){Colors.ENDC}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_passed = sum(1 for r in results if r.get('passed', False))
    print(f"\n{Colors.CYAN}Overall:{Colors.ENDC}")
    print(f"  Total tests: {len(results)}")
    print(f"  Passed: {total_passed}/{len(results)} ({total_passed/len(results)*100:.0f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —é–º–æ—Ä–∞
    humor_count = sum(1 for r in results if r['result'].is_humor)
    humor_scenarios = [r for r in results if r['scenario'].get('category') == 'humor_test']
    if humor_scenarios:
        humor_detected = sum(1 for r in humor_scenarios if r['result'].is_humor)
        print(f"\n{Colors.PURPLE}Humor statistics:{Colors.ENDC}")
        print(f"  Humor tests: {len(humor_scenarios)}")
        print(f"  Humor detected: {humor_detected}/{len(humor_scenarios)} ({humor_detected/len(humor_scenarios)*100:.0f}%)")
        print(f"  Expected ~33%, got {humor_detected/len(humor_scenarios)*100:.0f}%")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    critical_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
    signal_issues = [r for r in results 
                     if r['scenario'].get('expected', {}).get('user_signal') 
                     and r['result'].user_signal != r['scenario']['expected']['user_signal']]
    
    if signal_issues:
        critical_issues.append(f"User signal detection: {len(signal_issues)} failures")
    
    if critical_issues:
        print(f"\n{Colors.RED}‚ö†Ô∏è  CRITICAL ISSUES FOUND:{Colors.ENDC}")
        for issue in critical_issues:
            print(f"  ‚Ä¢ {issue}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{Colors.YELLOW}üìã RECOMMENDATIONS:{Colors.ENDC}")
        if signal_issues:
            print(f"  1. Fix user_signal detection in router.py")
            print(f"     Failed signals: {', '.join(set(r['scenario']['expected']['user_signal'] for r in signal_issues))}")
            print(f"     Check prompt in router.py lines ~180-220")

# ====== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='HTTP Sandbox for Ukido AI Assistant')
    parser.add_argument('-m', '--message', help='Send single message')
    parser.add_argument('-u', '--user', default='test_user', help='User ID')
    parser.add_argument('--test', nargs='?', const=True, help='Run batch tests, optionally with test file')
    parser.add_argument('--dialogue', type=str, help='Run dialogue test by ID from test_humor_scenarios.json')
    parser.add_argument('--url', default='http://localhost:8000', help='Server URL')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞—ë–º –ø–µ—Å–æ—á–Ω–∏—Ü—É
    sandbox = HTTPSandbox(base_url=args.url)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if args.message:
        # Single message mode
        exit_code = await single_message_mode(sandbox, args.message, args.user)
        sys.exit(exit_code)
    elif args.dialogue:
        # Dialogue test mode
        await dialogue_test_mode(sandbox, args.dialogue)
    elif args.test:
        # Batch test mode
        test_file = args.test if isinstance(args.test, str) else None
        await batch_test_mode(sandbox, test_file)
    else:
        # Interactive mode
        await interactive_mode(sandbox)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}Goodbye!{Colors.ENDC}")