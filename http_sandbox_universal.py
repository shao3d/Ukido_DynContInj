#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è HTTP –ø–µ—Å–æ—á–Ω–∏—Ü–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
–ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
"""

import json
import sys
import time
import os
from datetime import datetime
import requests
from typing import Dict, List, Any, Optional

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏
TEST_FILES = {
    'v1': 'test_humor_dialogues.json',
    'v2': 'test_dialogues_v2.json',
    'scenarios': 'tests/test_scenarios_state_machine.json'
}

def detect_test_file(dialogue_id: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ –ø–æ ID –¥–∏–∞–ª–æ–≥–∞"""
    if dialogue_id.startswith('dialog_v2_'):
        return TEST_FILES['v2']
    elif dialogue_id.startswith('dialog_'):
        return TEST_FILES['v1']
    elif dialogue_id.startswith('scenario_'):
        return TEST_FILES['scenarios']
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±—É–µ–º v1
        return TEST_FILES['v1']

def load_dialogue(dialogue_id: str, filename: Optional[str] = None) -> Optional[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not filename:
        filename = detect_test_file(dialogue_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
            # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if filename == TEST_FILES['scenarios']:
                # –§–æ—Ä–º–∞—Ç test_scenarios_state_machine.json
                for scenario in data:
                    if f"scenario_{scenario.get('scenario_name', '').lower().replace(' ', '_')}" == dialogue_id:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ª–æ–≥–∞
                        return {
                            'id': dialogue_id,
                            'name': scenario['scenario_name'],
                            'description': scenario['description'],
                            'messages': scenario['steps'],
                            'expected_signal': scenario.get('expected_signal'),
                            'user_id': f"test_{dialogue_id}_{int(time.time())}"
                        }
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å scenarios
                scenarios = data.get('scenarios', [])
                for scenario in scenarios:
                    if scenario.get('id') == dialogue_id:
                        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {filename}")
                        # –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if 'user_id' not in scenario:
                            scenario['user_id'] = f"test_{dialogue_id}_{int(time.time())}"
                        return scenario
            
            # –ù–µ –Ω–∞—à–ª–∏ –¥–∏–∞–ª–æ–≥
            available = []
            if filename == TEST_FILES['scenarios']:
                available = [f"scenario_{s.get('scenario_name', '').lower().replace(' ', '_')}" for s in data]
            else:
                available = [s.get('id') for s in data.get('scenarios', [])]
            
            print(f"‚ùå –î–∏–∞–ª–æ–≥ '{dialogue_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filename}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏: {available}")
            return None
            
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {filename}: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return None

def test_dialogue(dialogue_id: str, server_url: str = "http://localhost:8000", filename: Optional[str] = None) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
    dialogue = load_dialogue(dialogue_id, filename)
    if not dialogue:
        return
    
    print(f"\n{'='*60}")
    print(f"üìù –¢–µ—Å—Ç: {dialogue['name']}")
    print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {dialogue['description']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'expected_signal_transition' in dialogue:
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {dialogue['expected_signal_transition']}")
    elif 'expected_signal' in dialogue:
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Å–∏–≥–Ω–∞–ª: {dialogue['expected_signal']}")
    
    if 'expected_humor' in dialogue:
        print(f"üòÑ –û–∂–∏–¥–∞–µ–º—ã–π —é–º–æ—Ä: {dialogue['expected_humor']}")
    
    print(f"{'='*60}\n")
    
    # –í–°–ï–ì–î–ê –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å timestamp
    # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    user_id = f"test_{dialogue_id}_{int(time.time())}"
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π user_id: {user_id}\n")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    results = {
        "dialogue_id": dialogue_id,
        "dialogue_name": dialogue['name'],
        "description": dialogue['description'],
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        "messages": [],
        "signal_transitions": [],
        "humor_count": 0,
        "errors": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        health_response = requests.get(f"{server_url}/health", timeout=2)
        if health_response.status_code != 200:
            print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ health check failed")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {server_url}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python src/main.py")
        return
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ö–æ—Ç—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º user_id —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    try:
        clear_response = requests.post(f"{server_url}/clear_history/{user_id}", timeout=5)
        if clear_response.status_code == 200:
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}\n")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    last_signal = None
    last_response_has_humor = False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = dialogue.get('messages', [])
    total_messages = len(messages)
    
    for i, message in enumerate(messages, 1):
        print(f"[{i}/{total_messages}] USER: {message}")
        
        # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å
        request_data = {
            "user_id": user_id,
            "message": message
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            start_time = time.time()
            response = requests.post(
                f"{server_url}/chat",
                json=request_data,
                timeout=30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )
            elapsed_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç (—Å–æ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
                if len(bot_response) > 150:
                    display_response = bot_response[:150] + "..."
                else:
                    display_response = bot_response
                print(f"BOT: {display_response}")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                intent = data.get('intent', 'unknown')
                signal = data.get('user_signal', 'unknown')
                metadata = data.get('metadata', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —é–º–æ—Ä–∞ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                humor_indicators = [
                    '–∞ –≤–æ—Ç', '–∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è', '–≤–∏–¥–∏–º–æ', '–ø–æ—Ö–æ–∂–µ',
                    '–∑–Ω–∞–µ—Ç–µ', '!', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–Ω–∞–≤–µ—Ä–Ω–æ–µ'
                ]
                has_humor = any(ind in bot_response.lower() for ind in humor_indicators)
                
                # –ñ–≤–∞–Ω–µ—Ü–∫–∏–π-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                zhvanetsky_phrases = [
                    '—Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
                    '—Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏—à–∞–º',
                    '—ç–∫–æ–Ω–æ–º-–∫–ª–∞—Å—Å –¥–ª—è —ç–∫–æ–Ω–æ–º-—Ä–æ–¥–∏—Ç–µ–ª–µ–π',
                    '—á–µ–º–ø–∏–æ–Ω –º–∏—Ä–∞ –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º'
                ]
                if any(phrase in bot_response.lower() for phrase in zhvanetsky_phrases):
                    has_humor = True
                    
                if has_humor and intent == 'offtopic':
                    results["humor_count"] += 1
                    print(f"üòÑ –Æ–º–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! (–≤—Å–µ–≥–æ: {results['humor_count']})")
                
                print(f"üìä Intent: {intent} | Signal: {signal} | Time: {elapsed_time:.2f}s")
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤
                if last_signal and last_signal != signal:
                    transition = f"{last_signal} ‚Üí {signal}"
                    results["signal_transitions"].append({
                        "message_num": i,
                        "transition": transition
                    })
                    print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ —Å–∏–≥–Ω–∞–ª–∞: {transition}")
                
                last_signal = signal
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results["messages"].append({
                    "num": i,
                    "user": message,
                    "bot": bot_response,
                    "intent": intent,
                    "signal": signal,
                    "has_humor": has_humor,
                    "response_time": elapsed_time,
                    "metadata": metadata
                })
                
            else:
                error_msg = f"HTTP {response.status_code}: {response.text[:100]}"
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_msg}")
                results["errors"].append({
                    "message_num": i,
                    "error": error_msg
                })
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è Timeout –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥")
            results["errors"].append({
                "message_num": i,
                "error": "Timeout 30s"
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
            results["errors"].append({
                "message_num": i,
                "error": str(e)[:100]
            })
        
        print("-" * 40)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if i < total_messages:
            time.sleep(0.5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚îú‚îÄ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results['messages'])}")
    print(f"‚îú‚îÄ –û—à–∏–±–æ–∫: {len(results['errors'])}")
    print(f"‚îú‚îÄ –Æ–º–æ—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {results['humor_count']}")
    
    if results["signal_transitions"]:
        transitions = ' ‚Üí '.join([t['transition'] for t in results['signal_transitions']])
        print(f"‚îú‚îÄ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {transitions}")
    elif last_signal:
        print(f"‚îú‚îÄ –°–∏–≥–Ω–∞–ª —Å—Ç–∞–±–∏–ª–µ–Ω: {last_signal}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
    if 'expected_signal' in dialogue:
        if last_signal == dialogue['expected_signal']:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {dialogue['expected_signal']}")
        else:
            print(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç! –û–∂–∏–¥–∞–ª—Å—è: {dialogue['expected_signal']}, –ø–æ–ª—É—á–µ–Ω: {last_signal}")
    
    print(f"{'='*60}")

def save_results(results: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ markdown —Ñ–∞–π–ª"""
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs("test_results", exist_ok=True)
    
    # –ò–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_results/{results['dialogue_id']}_{timestamp}.md"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º markdown
    md_content = f"""# –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {results['dialogue_name']}

**ID:** {results['dialogue_id']}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {results['description']}
**–î–∞—Ç–∞:** {results['timestamp']}

## –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {len(results['messages'])}
- **–û—à–∏–±–æ–∫:** {len(results['errors'])}
- **–Æ–º–æ—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** {results['humor_count']}
"""
    
    if results["signal_transitions"]:
        transitions = ' ‚Üí '.join([t['transition'] for t in results['signal_transitions']])
        md_content += f"- **–ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤:** {transitions}\n"
    elif results['messages']:
        last_signal = results['messages'][-1].get('signal', 'unknown')
        md_content += f"- **–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª:** {last_signal}\n"
    
    # –î–∏–∞–ª–æ–≥
    md_content += "\n## –î–∏–∞–ª–æ–≥\n\n"
    
    for msg in results['messages']:
        md_content += f"""### –°–æ–æ–±—â–µ–Ω–∏–µ {msg['num']}

**USER:** {msg['user']}

**BOT:** {msg['bot']}

**–ú–µ—Ç—Ä–∏–∫–∏:**
- Intent: `{msg['intent']}`
- Signal: `{msg['signal']}`
- –Æ–º–æ—Ä: {'‚úÖ' if msg.get('has_humor') else '‚ùå'}
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {msg.get('response_time', 0):.2f}—Å
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ –±—ã–ª
        for transition in results['signal_transitions']:
            if transition['message_num'] == msg['num']:
                md_content += f"- üîÑ **–ü–µ—Ä–µ—Ö–æ–¥ —Å–∏–≥–Ω–∞–ª–∞:** {transition['transition']}\n"
        
        md_content += "\n---\n\n"
    
    # –û—à–∏–±–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏
    if results['errors']:
        md_content += "## –û—à–∏–±–∫–∏\n\n"
        for error in results['errors']:
            md_content += f"- –°–æ–æ–±—â–µ–Ω–∏–µ {error['message_num']}: {error['error']}\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def list_available_tests() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n")
    
    for key, filename in TEST_FILES.items():
        if not os.path.exists(filename):
            print(f"  ‚ùå {filename} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
                if key == 'scenarios':
                    # –û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç
                    scenarios = data
                    print(f"\n  üìÇ {filename}:")
                    for s in scenarios[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        scenario_id = f"scenario_{s.get('scenario_name', '').lower().replace(' ', '_')}"
                        print(f"    - {scenario_id}: {s.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                    if len(scenarios) > 5:
                        print(f"    ... –∏ –µ—â—ë {len(scenarios) - 5} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    scenarios = data.get('scenarios', [])
                    print(f"\n  üìÇ {filename}:")
                    for s in scenarios[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        print(f"    - {s.get('id')}: {s.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    if len(scenarios) > 5:
                        print(f"    ... –∏ –µ—â—ë {len(scenarios) - 5} –¥–∏–∞–ª–æ–≥–æ–≤")
                        
        except Exception as e:
            print(f"  ‚ö†Ô∏è {filename} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üìñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è HTTP –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python http_sandbox_universal.py <dialogue_id>")
        print("  python http_sandbox_universal.py --file <filename> <dialogue_id>")
        print("  python http_sandbox_universal.py --list")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python http_sandbox_universal.py dialog_1          # –∏–∑ test_humor_dialogues.json")
        print("  python http_sandbox_universal.py dialog_v2_1       # –∏–∑ test_dialogues_v2.json")
        print("  python http_sandbox_universal.py --list            # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        sys.exit(1)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if sys.argv[1] == "--list":
        list_available_tests()
        sys.exit(0)
    elif sys.argv[1] == "--file" and len(sys.argv) >= 4:
        filename = sys.argv[2]
        dialogue_id = sys.argv[3]
        test_dialogue(dialogue_id, filename=filename)
    else:
        dialogue_id = sys.argv[1]
        test_dialogue(dialogue_id)

if __name__ == "__main__":
    main()