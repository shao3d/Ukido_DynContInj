#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π HTML –æ—Ç—á–µ—Ç–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
"""

import asyncio
import json
import sys
import webbrowser
import html
from html import escape
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ tests)
sys.path.append(str(Path(__file__).parent.parent / "src"))

from router import Router


class DialogScenarioTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""
    
    def __init__(self):
        self.router = Router()
        self.scenarios = self._load_scenarios()
        self.results = []
    
    def _load_scenarios(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ test_scenarios.json"""
        try:
            # –§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ tests
            scenarios_path = Path(__file__).parent / "test_scenarios.json"
            with open(scenarios_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª test_scenarios.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
    
    async def test_scenario(self, scenario: Dict, scenario_num: int) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π (–º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥)"""
        scenario_name = scenario.get("scenario_name", f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_num}")
        steps = scenario.get("steps", [])
        
        print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π #{scenario_num}: {scenario_name}")
        print(f"   –®–∞–≥–æ–≤: {len(steps)}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ—á–∏—â–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
        history = []
        scenario_results = {
            "name": scenario_name,
            "steps": [],
            "success": True
        }
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —à–∞–≥–∞–º –¥–∏–∞–ª–æ–≥–∞
        for step_num, user_message in enumerate(steps, 1):
            print(f"   ‚Ä¢ –®–∞–≥ {step_num}/{len(steps)}...", end="")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            try:
                result = await self.router.route(user_message, history)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                status = result.get("status", "unknown")
                print(f" [{status}]")
                
                if status == "success":
                    documents = result.get("documents", [])
                    assistant_response = f"[–û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {', '.join(documents)}]"
                elif status in ["offtopic", "need_simplification"]:
                    message = result.get("message", "")
                    assistant_response = message
                else:
                    assistant_response = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                    scenario_results["success"] = False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                history.append({"role": "user", "content": user_message})
                history.append({"role": "assistant", "content": assistant_response})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞
                scenario_results["steps"].append({
                    "step": step_num,
                    "user_message": user_message,
                    "router_status": status,
                    "router_response": result
                })
                
            except Exception as e:
                print(f" [–û–®–ò–ë–ö–ê: {e}]")
                scenario_results["success"] = False
                scenario_results["steps"].append({
                    "step": step_num,
                    "user_message": user_message,
                    "error": str(e)
                })
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.3)
        
        return scenario_results
    
    async def run_all_scenarios(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if not self.scenarios:
            print("‚ùå –ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(self.scenarios)}")
        print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(self.router.summaries)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        for i, scenario in enumerate(self.scenarios, 1):
            result = await self.test_scenario(scenario, i)
            self.results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            if i < len(self.scenarios):
                await asyncio.sleep(0.5)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        self._save_json_results()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
        html_file = self._generate_html_report()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞—é –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {html_file}")
        webbrowser.open(f"file://{html_file}")
    
    def _save_json_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É reports
            reports_dir = Path(__file__).parent / "reports"
            reports_dir.mkdir(exist_ok=True)
            filename = reports_dir / f"test_results_{timestamp}.json"
            
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename.relative_to(Path.cwd())}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON –æ—Ç—á—ë—Ç–∞: {e}")
    
    def _generate_html_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML –æ—Ç—á–µ—Ç"""
        now = datetime.now()
        timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É reports
        reports_dir = Path(__file__).parent / "reports"
        reports_dir.mkdir(exist_ok=True)
        filename = reports_dir / f"test_report_{now.strftime('%Y%m%d_%H%M%S')}.html"
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_scenarios = len(self.results)
        successful = sum(1 for r in self.results if r["success"])
        total_steps = sum(len(r["steps"]) for r in self.results)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for scenario in self.results:
            for step in scenario["steps"]:
                status = step.get("router_status", "error")
                status_counts[status] = status_counts.get(status, 0) + 1
        
        # –¢–æ–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        all_docs = {}
        for scenario in self.results:
            for step in scenario["steps"]:
                if step.get("router_status") == "success":
                    for doc in step.get("router_response", {}).get("documents", []):
                        all_docs[doc] = all_docs.get(doc, 0) + 1
        
        # HTML —à–∞–±–ª–æ–Ω
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ - {timestamp}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }}
        
        header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }}
        
        h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
        }}
        
        .timestamp {{
            opacity: 0.9;
            font-size: 1.1em;
        }}
        
        .summary {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 30px;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }}
        
        .stat-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .stat-value {{
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }}
        
        .stat-label {{
            color: #6c757d;
            margin-top: 5px;
        }}
        
        .content {{
            padding: 30px;
        }}
        
        .scenario {{
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            margin-bottom: 20px;
            overflow: hidden;
        }}
        
        .scenario-header {{
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: background 0.3s;
        }}
        
        .scenario-header:hover {{
            background: #e9ecef;
        }}
        
        .scenario-title {{
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 5px;
        }}
        
        .scenario-meta {{
            color: #6c757d;
        }}
        
        .scenario-body {{
            padding: 20px;
            display: none;
        }}
        
        .scenario.expanded .scenario-body {{
            display: block;
        }}
        
        .step {{
            background: #f8f9fa;
            border-left: 4px solid #667eea;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 5px;
        }}
        
        .step-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }}
        
        .step-number {{
            font-weight: bold;
            color: #495057;
        }}
        
        .status-badge {{
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }}
        
        .status-success {{
            background: #d4edda;
            color: #155724;
        }}
        
        .status-offtopic {{
            background: #fff3cd;
            color: #856404;
        }}
        
        .status-need_simplification {{
            background: #e2e3ff;
            color: #383d7c;
        }}
        
        .status-error {{
            background: #f8d7da;
            color: #721c24;
        }}
        
        .message {{
            background: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }}
        
        .user-message {{
            border-left: 3px solid #667eea;
            padding-left: 10px;
        }}
        
        .router-response {{
            border-left: 3px solid #28a745;
            padding-left: 10px;
        }}
        
        .documents {{
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }}
        
        .document-tag {{
            background: #e9ecef;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 0.9em;
        }}
        
        .charts {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }}
        
        .chart-card {{
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
        }}
        
        .chart-title {{
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #495057;
        }}
        
        .bar {{
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }}
        
        .bar-label {{
            width: 150px;
            font-size: 0.9em;
        }}
        
        .bar-container {{
            flex: 1;
            background: #e9ecef;
            height: 25px;
            border-radius: 5px;
            position: relative;
            overflow: hidden;
        }}
        
        .bar-fill {{
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 5px;
            color: white;
            font-size: 0.8em;
            font-weight: bold;
        }}
        
        footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #6c757d;
            border-top: 1px solid #e9ecef;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üìä –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ Ukido</h1>
            <div class="timestamp">üìÖ {timestamp}</div>
        </header>
        
        <div class="summary">
            <div class="stat-card">
                <div class="stat-value">{total_scenarios}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{successful}</div>
                <div class="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{total_steps}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{(successful/total_scenarios*100 if total_scenarios > 0 else 0):.1f}%</div>
                <div class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            </div>
        </div>
        
        <div class="content">
            <h2 style="margin-bottom: 20px;">üìù –î–µ—Ç–∞–ª–∏ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º</h2>
            <p style="color: #6c757d; margin-bottom: 20px;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏</p>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        for i, scenario in enumerate(self.results, 1):
            success_icon = "‚úÖ" if scenario["success"] else "‚ùå"
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_status_counts = {}
            for step in scenario["steps"]:
                status = step.get("router_status", "error")
                scenario_status_counts[status] = scenario_status_counts.get(status, 0) + 1
            
            escaped_scenario_name = escape(scenario['name'])
            html += f"""
            <div class="scenario" id="scenario-{i}">
                <div class="scenario-header" onclick="toggleScenario({i})">
                    <div>
                        <div class="scenario-title">{success_icon} –î–∏–∞–ª–æ–≥ #{i}: {escaped_scenario_name}</div>
                        <div class="scenario-meta">
                            –®–∞–≥–æ–≤: {len(scenario['steps'])} | 
                            –°—Ç–∞—Ç—É—Å—ã: {', '.join([f"{k}: {v}" for k, v in scenario_status_counts.items()])}
                        </div>
                    </div>
                </div>
                <div class="scenario-body">
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
            for step in scenario["steps"]:
                step_num = step["step"]
                user_msg = escape(step["user_message"])
                status = step.get("router_status", "error")
                response = step.get("router_response", {})
                
                status_class = f"status-{status}"
                
                html += f"""
                    <div class="step">
                        <div class="step-header">
                            <span class="step-number">–®–∞–≥ {step_num}</span>
                            <span class="status-badge {status_class}">{status}</span>
                        </div>
                        <div class="message user-message">
                            <strong>üë§ –í–æ–ø—Ä–æ—Å:</strong> {user_msg}
                        </div>
"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º decomposed_questions –µ—Å–ª–∏ –µ—Å—Ç—å
                decomposed_questions = response.get("decomposed_questions", [])
                if decomposed_questions:
                    html += """
                        <div class="message router-response">
                            <strong>üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</strong>
                            <ol style="margin-left: 20px; margin-top: 5px;">
"""
                    for question in decomposed_questions:
                        escaped_question = escape(question)
                        html += f'                            <li style="margin-bottom: 3px;">{escaped_question}</li>\n'
                    html += """                            </ol>
                        </div>
"""
                
                if status == "success":
                    documents = response.get("documents", [])
                    if documents:
                        html += """
                        <div class="message router-response">
                            <strong>ü§ñ –ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</strong>
                            <div class="documents">
"""
                        for doc in documents:
                            html += f'<span class="document-tag">{doc}</span>'
                        html += """
                            </div>
                        </div>
"""
                elif status in ["offtopic", "need_simplification"]:
                    message = response.get("message", "")
                    if message:
                        escaped_message = escape(message)
                        html += f"""
                        <div class="message router-response">
                            <strong>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞:</strong><br>
                            {escaped_message}
                        </div>
"""
                elif "error" in step:
                    escaped_error = escape(step['error'])
                    html += f"""
                        <div class="message router-response">
                            <strong>‚ùå –û—à–∏–±–∫–∞:</strong> {escaped_error}
                        </div>
"""
                
                html += "</div>"
            
            html += """
                </div>
            </div>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        html += """
            <h2 style="margin: 30px 0 20px 0;">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="charts">
                <div class="chart-card">
                    <div class="chart-title">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤</div>
"""
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
        for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_steps * 100) if total_steps > 0 else 0
            html += f"""
                    <div class="bar">
                        <div class="bar-label">{status}</div>
                        <div class="bar-container">
                            <div class="bar-fill" style="width: {percentage}%">
                                {count} ({percentage:.1f}%)
                            </div>
                        </div>
                    </div>
"""
        
        html += """
                </div>
                <div class="chart-card">
                    <div class="chart-title">–¢–æ–ø-10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</div>
"""
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for doc, count in list(sorted(all_docs.items(), key=lambda x: x[1], reverse=True))[:10]:
            max_count = max(all_docs.values()) if all_docs else 1
            percentage = (count / max_count * 100)
            html += f"""
                    <div class="bar">
                        <div class="bar-label">{doc}</div>
                        <div class="bar-container">
                            <div class="bar-fill" style="width: {percentage}%">
                                {count}
                            </div>
                        </div>
                    </div>
"""
        
        html += """
                </div>
            </div>
        </div>
        
        <footer>
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ Ukido</p>
        </footer>
    </div>
    
    <script>
        function toggleScenario(id) {
            const scenario = document.getElementById('scenario-' + id);
            scenario.classList.toggle('expanded');
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥
        document.getElementById('scenario-1')?.classList.add('expanded');
    </script>
</body>
</html>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(html)
            
            print(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename.relative_to(Path.cwd())}")
            return filename.absolute()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ HTML –æ—Ç—á—ë—Ç–∞: {e}")
            return str(filename)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ïî" + "‚ïê"*58 + "‚ïó")
    print("‚ïë" + " –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–û–£–¢–ï–†–ê –° HTML –û–¢–ß–ï–¢–û–ú ".center(58) + "‚ïë")
    print("‚ïö" + "‚ïê"*58 + "‚ïù")
    
    tester = DialogScenarioTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    if not tester.scenarios:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ test_scenarios.json")
        return
    
    if not tester.router.summaries:
        print("\n‚ùå –†–æ—É—Ç–µ—Ä –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å summaries.json!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª data/summaries.json")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await tester.run_all_scenarios()
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")


if __name__ == "__main__":
    asyncio.run(main())