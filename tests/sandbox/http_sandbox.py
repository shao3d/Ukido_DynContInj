#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ukido AI Assistant
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π http_sandbox
"""

import httpx
import json
import sys
import os
import argparse
from typing import Dict, List, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

DEFAULT_API_URL = "http://localhost:8000/chat"
DEFAULT_USER_ID = "test_user"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
def load_test_dialogues():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    dialogues_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'dialogues_v2.json')
    if os.path.exists(dialogues_path):
        with open(dialogues_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def send_message(message: str, user_id: str = DEFAULT_USER_ID, api_url: str = DEFAULT_API_URL) -> Dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    payload = {
        "user_id": user_id,
        "message": message
    }
    
    try:
        with httpx.Client(timeout=30.0) as client:
            response = client.post(api_url, json=payload)
            response.raise_for_status()
            return response.json()
    except httpx.TimeoutException:
        return {"error": "Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 30 —Å–µ–∫—É–Ω–¥"}
    except httpx.RequestError as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"}
    except httpx.HTTPStatusError as e:
        return {"error": f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text}"}

def run_dialogue(dialogue_name: str, messages: List[str], user_id: Optional[str] = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not user_id:
        user_id = f"{dialogue_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    print(f"\n{'='*80}")
    print(f"–î–∏–∞–ª–æ–≥: {dialogue_name}")
    print(f"User ID: {user_id}")
    print(f"{'='*80}\n")
    
    for i, message in enumerate(messages, 1):
        print(f"[{i}] USER: {message}")
        response = send_message(message, user_id)
        
        if "error" in response:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {response['error']}")
        else:
            print(f"ü§ñ BOT: {response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            if response.get('intent'):
                print(f"   üìä Intent: {response['intent']}")
            if response.get('user_signal'):
                print(f"   üéØ Signal: {response['user_signal']}")
            if response.get('detected_language'):
                print(f"   üåê Language: {response['detected_language']}")
        print()

def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nü§ñ Ukido AI Assistant - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    user_id = f"interactive_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    while True:
        try:
            message = input("YOU: ").strip()
            if message.lower() in ['exit', 'quit', 'q']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not message:
                continue
                
            response = send_message(message, user_id)
            
            if "error" in response:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {response['error']}")
            else:
                print(f"BOT: {response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                metadata = []
                if response.get('intent'):
                    metadata.append(f"intent={response['intent']}")
                if response.get('user_signal'):
                    metadata.append(f"signal={response['user_signal']}")
                if response.get('detected_language'):
                    metadata.append(f"lang={response['detected_language']}")
                
                if metadata:
                    print(f"     [{', '.join(metadata)}]")
            print()
            
        except KeyboardInterrupt:
            print("\n\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ukido AI Assistant')
    parser.add_argument('dialogue', nargs='?', help='–ò–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('-u', '--user-id', help='User ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('-m', '--message', help='–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    parser.add_argument('-i', '--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏')
    parser.add_argument('--api-url', default=DEFAULT_API_URL, help='URL API endpoint')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        with httpx.Client(timeout=2.0) as client:
            client.get(args.api_url.replace('/chat', '/health'))
    except:
        print("‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python src/main.py")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
    test_dialogues = load_test_dialogues()
    
    # –†–µ–∂–∏–º —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    if args.list:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏:")
        for name, data in test_dialogues.items():
            desc = data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            print(f"  {name}: {desc}")
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        interactive_mode()
        return
    
    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if args.message:
        user_id = args.user_id or f"single_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        response = send_message(args.message, user_id, args.api_url)
        
        if "error" in response:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {response['error']}")
        else:
            print(f"–û–¢–í–ï–¢: {response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            print(f"\n–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
            print(json.dumps({
                k: v for k, v in response.items() 
                if k != 'response'
            }, indent=2, ensure_ascii=False))
        return
    
    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞
    if args.dialogue:
        if args.dialogue in test_dialogues:
            dialogue_data = test_dialogues[args.dialogue]
            messages = dialogue_data.get('messages', [])
            run_dialogue(args.dialogue, messages, args.user_id)
        else:
            print(f"–î–∏–∞–ª–æ–≥ '{args.dialogue}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    interactive_mode()

if __name__ == "__main__":
    main()