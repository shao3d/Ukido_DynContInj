#!/usr/bin/env python3
"""
HTTP –ø–µ—Å–æ—á–Ω–∏—Ü–∞ v2 - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python http_sandbox_v2.py dialog_1              # –∏–∑ test_humor_dialogues.json
    python http_sandbox_v2.py dialog_v2_1           # –∏–∑ test_dialogues_v2.json
    python http_sandbox_v2.py --file test_dialogues_v2.json dialog_v2_1  # —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
"""

import json
import sys
import time
import os
from datetime import datetime
import requests

DEFAULT_FILE = 'test_humor_dialogues.json'
V2_FILE = 'test_dialogues_v2.json'

def load_dialogue(dialogue_id, filename=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç"""
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ ID
    if not filename:
        if dialogue_id.startswith('dialog_v2_'):
            filename = V2_FILE
        else:
            filename = DEFAULT_FILE
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            scenarios = data.get('scenarios', [])
            
            for scenario in scenarios:
                if scenario['id'] == dialogue_id:
                    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {filename}")
                    return scenario
            
            print(f"‚ùå –î–∏–∞–ª–æ–≥ '{dialogue_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filename}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏: {[s['id'] for s in scenarios]}")
            return None
            
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def test_dialogue(dialogue_id, server_url="http://localhost:8000", filename=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥"""
    
    dialogue = load_dialogue(dialogue_id, filename)
    if not dialogue:
        return
    
    print(f"\n{'='*60}")
    print(f"üìù –¢–µ—Å—Ç: {dialogue['name']}")
    print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {dialogue['description']}")
    if 'expected_signal_transition' in dialogue:
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {dialogue['expected_signal_transition']}")
    if 'expected_humor' in dialogue:
        print(f"üòÑ –û–∂–∏–¥–∞–µ–º—ã–π —é–º–æ—Ä: {dialogue['expected_humor']}")
    print(f"{'='*60}\n")
    
    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
    user_id = dialogue.get('user_id', f"test_{dialogue_id}_{int(time.time())}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    results = {
        "dialogue_id": dialogue_id,
        "dialogue_name": dialogue['name'],
        "description": dialogue['description'],
        "timestamp": datetime.now().isoformat(),
        "messages": [],
        "signal_transitions": []
    }
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    try:
        requests.post(f"{server_url}/clear_history/{user_id}", timeout=2)
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n")
    except:
        pass
    
    # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    last_signal = None
    
    # –ü—Ä–æ–≥–æ–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, message in enumerate(dialogue['messages'], 1):
        print(f"[{i}/{len(dialogue['messages'])}] USER: {message}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            response = requests.post(
                f"{server_url}/chat",
                json={"user_id": user_id, "message": message},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get('response', 'No response')
                
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                display_response = bot_response[:150] + "..." if len(bot_response) > 150 else bot_response
                print(f"BOT: {display_response}")
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                intent = data.get('intent', 'unknown')
                signal = data.get('user_signal', 'unknown')
                
                print(f"Intent: {intent} | Signal: {signal}")
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤
                if last_signal and last_signal != signal:
                    transition = f"{last_signal} ‚Üí {signal}"
                    results["signal_transitions"].append({
                        "message_num": i,
                        "transition": transition
                    })
                    print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ —Å–∏–≥–Ω–∞–ª–∞: {transition}")
                last_signal = signal
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results["messages"].append({
                    "num": i,
                    "user": message,
                    "bot": bot_response,
                    "intent": intent,
                    "signal": signal
                })
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                
        except requests.exceptions.Timeout:
            print("‚ùå Timeout - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-"*40)
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò:")
    if results["signal_transitions"]:
        print(f"–ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {' ‚Üí '.join([t['transition'] for t in results['signal_transitions']])}")
    else:
        print(f"–°–∏–≥–Ω–∞–ª —Å—Ç–∞–±–∏–ª–µ–Ω: {last_signal}")
    print(f"{'='*60}")

def save_results(results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ markdown —Ñ–∞–π–ª"""
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs("test_results", exist_ok=True)
    
    # –ò–º—è —Ñ–∞–π–ª–∞
    filename = f"test_results/{results['dialogue_id']}_v2.md"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º markdown
    md_content = f"""# –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {results['dialogue_name']}

**ID:** {results['dialogue_id']}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {results['description']}
**–î–∞—Ç–∞:** {results['timestamp']}

## –î–∏–∞–ª–æ–≥

"""
    
    for msg in results['messages']:
        md_content += f"""### –°–æ–æ–±—â–µ–Ω–∏–µ {msg['num']}

**USER:** {msg['user']}

**BOT:** {msg['bot']}

**–ú–µ—Ç—Ä–∏–∫–∏:**
- Intent: {msg['intent']}
- Signal: {msg['signal']}

"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    md_content += f"""## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(results['messages'])}
"""
    
    if results["signal_transitions"]:
        transitions = [t['transition'] for t in results['signal_transitions']]
        md_content += f"- –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {' ‚Üí '.join(transitions)}\n"
    else:
        if results['messages']:
            md_content += f"- –°–∏–≥–Ω–∞–ª —Å—Ç–∞–±–∏–ª–µ–Ω: {results['messages'][-1]['signal']}\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python http_sandbox_v2.py dialog_1")
        print("  python http_sandbox_v2.py dialog_v2_1")
        print("  python http_sandbox_v2.py --file test_dialogues_v2.json dialog_v2_1")
        sys.exit(1)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if sys.argv[1] == "--file" and len(sys.argv) >= 4:
        filename = sys.argv[2]
        dialogue_id = sys.argv[3]
    else:
        filename = None
        dialogue_id = sys.argv[1]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_dialogue(dialogue_id, filename=filename)