#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ mixed –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import json
from typing import List, Dict

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
TEST_CASES = [
    {
        "name": "Mixed: –°–ø–∞—Å–∏–±–æ + –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
        "message": "–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks"
    },
    {
        "name": "Mixed: –°–ø–∞—Å–∏–±–æ + —Å–æ–≥–ª–∞—Å–∏–µ",
        "message": "–°–ø–∞—Å–∏–±–æ. –ú—ã —Å–æ–≥–ª–∞—Å–Ω—ã.",
        "expected_status": "success", 
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks"
    },
    {
        "name": "Mixed: –ü—Ä–∏–≤–µ—Ç + –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ",
        "message": "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å?",
        "expected_status": "success",
        "expected_signal": "price_sensitive",
        "expected_social": "greeting"
    },
    {
        "name": "–ß–∏—Å—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π: –°–ø–∞—Å–∏–±–æ",
        "message": "–°–ø–∞—Å–∏–±–æ!",
        "expected_status": "offtopic",
        "expected_signal": "exploring_only",
        "expected_social": "thanks"
    },
    {
        "name": "–ß–∏—Å—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π: –ü—Ä–∏–≤–µ—Ç",
        "message": "–ü—Ä–∏–≤–µ—Ç",
        "expected_status": "offtopic",
        "expected_signal": "exploring_only",
        "expected_social": "greeting"
    },
    {
        "name": "Ready to buy: –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞",
        "message": "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∫—É—Ä—Å",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": None
    },
    {
        "name": "Mixed: –ë–ª–∞–≥–æ–¥–∞—Ä—é + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "message": "–ë–ª–∞–≥–æ–¥–∞—Ä—é! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—è",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks"
    },
    {
        "name": "Mixed: –°–ø–∞—Å–∏–±–æ + –¥–µ–π—Å—Ç–≤–∏–µ",
        "message": "–°–ø–∞—Å–∏–±–æ. –î–µ–π—Å—Ç–≤—É–µ–º.",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks"
    }
]

async def test_endpoint(message: str, user_id: str = "test_user") -> Dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /chat endpoint"""
    import httpx
    
    url = "http://localhost:8000/chat"
    payload = {
        "message": message,
        "user_id": user_id
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {"error": str(e)}

async def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MIXED –ò–ù–¢–ï–ù–¢–û–í –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 60)
    
    results = []
    
    for i, test in enumerate(TEST_CASES, 1):
        print(f"\nüìù –¢–µ—Å—Ç #{i}: {test['name']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await test_endpoint(test['message'], f"test_user_{i}")
        
        if "error" in response:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response['error']}")
            results.append({"test": test['name'], "status": "ERROR", "error": response['error']})
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        actual_status = response.get("intent", "unknown")
        actual_signal = response.get("user_signal", "unknown")
        actual_social = response.get("social")
        
        status_match = actual_status == test['expected_status']
        signal_match = actual_signal == test['expected_signal']
        social_match = actual_social == test['expected_social']
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: {test['expected_status']}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: {actual_status} {'‚úÖ' if status_match else '‚ùå'}")
        
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π signal: {test['expected_signal']}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π signal: {actual_signal} {'‚úÖ' if signal_match else '‚ùå'}")
        
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π social: {test['expected_social']}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π social: {actual_social} {'‚úÖ' if social_match else '‚ùå'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        print(f"   –û—Ç–≤–µ—Ç: {response.get('response', '')[:100]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_passed = status_match and signal_match and social_match
        results.append({
            "test": test['name'],
            "status": "PASS" if test_passed else "FAIL",
            "details": {
                "status": f"{actual_status} ({'‚úÖ' if status_match else '‚ùå'})",
                "signal": f"{actual_signal} ({'‚úÖ' if signal_match else '‚ùå'})",
                "social": f"{actual_social} ({'‚úÖ' if social_match else '‚ùå'})"
            }
        })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    total = len(results)
    passed = sum(1 for r in results if r['status'] == 'PASS')
    failed = sum(1 for r in results if r['status'] == 'FAIL')
    errors = sum(1 for r in results if r['status'] == 'ERROR')
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed} ({passed/total*100:.1f}%)")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed} ({failed/total*100:.1f}%)")
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {errors} ({errors/total*100:.1f}%)")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if failed > 0:
        print("\nüî¥ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
        for r in results:
            if r['status'] == 'FAIL':
                print(f"  - {r['test']}")
                for key, value in r['details'].items():
                    print(f"    {key}: {value}")
    
    return results

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python src/main.py")
    
    try:
        results = asyncio.run(run_tests())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open("test_results_mixed_intents.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results_mixed_intents.json")
        
    except KeyboardInterrupt:
        print("\n‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")