#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π State Machine –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
–í–µ—Ä—Å–∏—è 2.0: –ü–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ñ–∏–∫—Å–æ–≤
"""

import asyncio
import json
from typing import List, Dict

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–∏–∫—Å–æ–≤
TEST_CASES = [
    # Fix 1: Ready_to_buy —Å –ø—É—Å—Ç—ã–º–∏ questions
    {
        "category": "Fix 1: Implicit Questions",
        "name": "–°–æ–≥–ª–∞—Å–∏–µ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞",
        "message": "–°–ø–∞—Å–∏–±–æ. –ú—ã —Å–æ–≥–ª–∞—Å–Ω—ã.",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks",
        "expected_response_contains": ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "—É–∑–Ω–∞—Ç—å"]  # –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    },
    {
        "category": "Fix 1: Implicit Questions",
        "name": "–î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞",
        "message": "–°–ø–∞—Å–∏–±–æ. –î–µ–π—Å—Ç–≤—É–µ–º.",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks",
        "expected_response_contains": ["—à–∞–≥–∏", "–∑–∞–ø–∏—Å–∏"]
    },
    {
        "category": "Fix 1: Implicit Questions",
        "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞",
        "message": "–ë–ª–∞–≥–æ–¥–∞—Ä—é! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—è",
        "expected_status": "success",
        "expected_signal": "ready_to_buy",
        "expected_social": "thanks",
        "expected_response_contains": ["–∑–∞–ø–∏—Å", "shao3d.github.io"]
    },
    
    # Fix 2: Repeated_greeting
    {
        "category": "Fix 2: Repeated Greeting",
        "name": "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "sequence": [
            {"message": "–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –∫—É—Ä—Å—ã?", "user_id": "test_repeat_1"},
            {"message": "–ü—Ä–∏–≤–µ—Ç! –ê —Ü–µ–Ω—ã –∫–∞–∫–∏–µ?", "user_id": "test_repeat_1"}
        ],
        "check_second": True,
        "expected_no_duplicate_greeting": True
    },
    
    # Fix 4: State Machine —É—Å–∏–ª–µ–Ω–∏–µ
    {
        "category": "Fix 4: State Machine",
        "name": "Price_sensitive –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ —Å–∫–∏–¥–∫–∏",
        "message": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç? –î–æ—Ä–æ–≥–æ –Ω–∞–≤–µ—Ä–Ω–æ–µ?",
        "expected_signal": "price_sensitive",
        "expected_response_contains": ["—Å–∫–∏–¥–∫", "10%", "15%", "20%"]
    },
    {
        "category": "Fix 4: State Machine",
        "name": "Anxiety –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —ç–º–ø–∞—Ç–∏–∏",
        "message": "–ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –±–æ–∏—Ç—Å—è –≤—ã—Å—Ç—É–ø–∞—Ç—å",
        "expected_signal": "anxiety_about_child",
        "expected_response_contains": ["–ø–æ–Ω–∏–º–∞–µ–º", "–º–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏", "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ"]
    },
    {
        "category": "Fix 4: State Machine",
        "name": "Ready_to_buy –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è",
        "message": "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∫—É—Ä—Å",
        "expected_signal": "ready_to_buy",
        "expected_response_contains": ["–¥–ª—è –∑–∞–ø–∏—Å–∏", "—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "shao3d.github.io/trial/"]
    },
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    {
        "category": "–ë–∞–∑–æ–≤—ã–µ",
        "name": "–ß–∏—Å—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π: –°–ø–∞—Å–∏–±–æ",
        "message": "–°–ø–∞—Å–∏–±–æ!",
        "expected_status": "offtopic",
        "expected_signal": "exploring_only",
        "expected_social": "thanks"
    },
    {
        "category": "–ë–∞–∑–æ–≤—ã–µ",
        "name": "Mixed: –ü—Ä–∏–≤–µ—Ç + –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ",
        "message": "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å?",
        "expected_status": "success",
        "expected_signal": "price_sensitive",
        "expected_social": "greeting"
    }
]

async def test_endpoint(message: str, user_id: str = "test_user") -> Dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /chat endpoint"""
    import httpx
    
    url = "http://localhost:8000/chat"
    payload = {
        "message": message,
        "user_id": user_id
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {"error": str(e)}

async def test_sequence(sequence: List[Dict]) -> List[Dict]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
    results = []
    for msg in sequence:
        result = await test_endpoint(msg["message"], msg["user_id"])
        results.append(result)
    return results

async def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô STATE MACHINE –ò –°–û–¶–ò–ê–õ–ö–ò")
    print("=" * 60)
    
    results = []
    
    for i, test in enumerate(TEST_CASES, 1):
        print(f"\nüìù –¢–µ—Å—Ç #{i}: {test.get('name', test.get('category'))}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        if "sequence" in test:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ {len(test['sequence'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
            seq_results = await test_sequence(test["sequence"])
            
            if test.get("check_second"):
                response = seq_results[1]
                print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                if test.get("expected_no_duplicate_greeting"):
                    greeting_words = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤", "–¥–æ–±—Ä"]
                    has_greeting = any(word in response.get("response", "").lower()[:50] 
                                     for word in greeting_words)
                    
                    if not has_greeting:
                        print(f"   ‚úÖ –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
                        results.append({"test": test["name"], "status": "PASS"})
                    else:
                        print(f"   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!")
                        results.append({"test": test["name"], "status": "FAIL"})
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
            response = await test_endpoint(test['message'], f"test_user_{i}")
            
            if "error" in response:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response['error']}")
                results.append({"test": test['name'], "status": "ERROR"})
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            checks_passed = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if "expected_status" in test:
                actual = response.get("intent", "unknown")
                expected = test["expected_status"]
                if actual == expected:
                    print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {actual}")
                else:
                    print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: {actual} (–æ–∂–∏–¥–∞–ª—Å—è {expected})")
                    checks_passed = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ signal
            if "expected_signal" in test:
                actual = response.get("user_signal", "unknown")
                expected = test["expected_signal"]
                if actual == expected:
                    print(f"   ‚úÖ Signal: {actual}")
                else:
                    print(f"   ‚ùå Signal: {actual} (–æ–∂–∏–¥–∞–ª—Å—è {expected})")
                    checks_passed = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if "expected_response_contains" in test:
                response_text = response.get("response", "").lower()
                found = []
                not_found = []
                
                for keyword in test["expected_response_contains"]:
                    if keyword.lower() in response_text:
                        found.append(keyword)
                    else:
                        not_found.append(keyword)
                
                if not_found:
                    print(f"   ‚ùå –í –æ—Ç–≤–µ—Ç–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ: {not_found}")
                    checks_passed = False
                else:
                    print(f"   ‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {found}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            print(f"   –û—Ç–≤–µ—Ç: {response.get('response', '')[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results.append({
                "test": test['name'],
                "category": test.get('category', 'Other'),
                "status": "PASS" if checks_passed else "FAIL"
            })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for r in results:
        cat = r.get('category', 'Other')
        if cat not in categories:
            categories[cat] = {"pass": 0, "fail": 0, "error": 0}
        
        status = r['status'].lower()
        if status in categories[cat]:
            categories[cat][status] += 1
    
    # –í—ã–≤–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for cat, stats in categories.items():
        total = sum(stats.values())
        passed = stats.get('pass', 0)
        print(f"\n{cat}:")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.0f}%)")
        if stats.get('fail', 0) > 0:
            print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {stats['fail']}")
        if stats.get('error', 0) > 0:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∏: {stats['error']}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(results)
    passed = sum(1 for r in results if r['status'] == 'PASS')
    failed = sum(1 for r in results if r['status'] == 'FAIL')
    errors = sum(1 for r in results if r['status'] == 'ERROR')
    
    print("\n" + "=" * 60)
    print(f"–ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    if failed > 0:
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    if errors > 0:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {errors}")
    print("=" * 60)
    
    return results

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python src/main.py")
    
    try:
        results = asyncio.run(run_tests())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("test_results_state_machine_fixes.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results_state_machine_fixes.json")
        
    except KeyboardInterrupt:
        print("\n‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")