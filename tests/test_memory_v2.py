#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ v2 - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–Ω–∏—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
"""

import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime

sys.path.append(str(Path(__file__).parent.parent / "src"))

from main import app
import httpx


async def test_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    scenario = {
        "scenario_name": "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏",
        "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–Ω–∏—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å–≤–æ–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "steps": [
            "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫—É—Ä—Å —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã?",
            "–ê –∫–∞–∫–∞—è —É –≤–∞—Å —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?",  
            "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ –Ω–∞ –∫—É—Ä—Å–µ –Æ–Ω—ã–π –û—Ä–∞—Ç–æ—Ä?",
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã–¥–∞–µ—Ç–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ª–µ—Ç–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤—ã?",
            "–ê –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ?",
            "–í—ã –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –≥–æ–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ –∑–∞–ø–∏—Å—å —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –æ—Ç–≤–µ—á–∞–ª–∏?",
            "–ò –Ω–∞–ø–æ–º–Ω–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ –≤—ã –Ω–∞–∑—ã–≤–∞–ª–∏ –¥–ª—è –Æ–Ω–æ–≥–æ –û—Ä–∞—Ç–æ—Ä–∞?"
        ]
    }
    
    print("\n" + "=" * 80)
    print("üß† –¢–ï–°–¢ –ü–ê–ú–Ø–¢–ò v2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 80)
    print("\nüìä –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:")
    print("  ‚Ä¢ –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏: 10 —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("  ‚Ä¢ –ü–æ—Å–ª–µ —à–∞–≥–∞ 5: –≤ –∏—Å—Ç–æ—Ä–∏–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (5 –ø–∞—Ä)")
    print("  ‚Ä¢ –ü–æ—Å–ª–µ —à–∞–≥–∞ 6: –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è, —à–∞–≥ 1 –∑–∞–±—ã—Ç")
    print("  ‚Ä¢ –®–∞–≥ 7: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–≤–µ—Ç –∏–∑ —à–∞–≥–∞ 1")
    print("  ‚Ä¢ –®–∞–≥ 8: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–≤–µ—Ç –∏–∑ —à–∞–≥–∞ 3")
    print("\n" + "-" * 80)
    
    user_id = f"memory_v2_{datetime.now().timestamp()}"
    results = []
    
    async with httpx.AsyncClient(app=app, base_url="http://test") as client:
        for idx, user_message in enumerate(scenario['steps'], 1):
            print(f"\nüîπ –®–∞–≥ {idx}/8:")
            print(f"üë§ User: {user_message}")
            
            try:
                payload = {"user_id": user_id, "message": user_message}
                resp = await client.post("/chat", json=payload, timeout=60.0)
                
                if resp.status_code != 200:
                    print(f"‚ùå HTTP {resp.status_code}")
                    continue
                
                data = resp.json()
                response_text = data.get("response", "")
                
                print(f"ü§ñ Bot: {response_text[:150]}...")
                
                results.append({
                    "step": idx,
                    "user_message": user_message,
                    "bot_response": response_text,
                    "intent": data.get("intent"),
                    "documents": data.get("relevant_documents", [])
                })
                
                # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
                if idx == 1:
                    print("   üí° –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–æ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É")
                
                if idx == 3:
                    print("   üí° –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ")
                    
                if idx == 7:
                    print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –®–∞–≥ 7:")
                    print("   –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–≤–µ—Ç –∏–∑ —à–∞–≥–∞ 1 (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±—ã—Ç)")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    first_response = results[0]["bot_response"] if results else ""
                    if any(phrase in response_text.lower() for phrase in ["–ø–æ–ª—å—à", "–æ–Ω–ª–∞–π–Ω", "zoom"]):
                        print("   ‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–ú–ù–ò–¢ –¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–≥–∞ 1")
                    else:
                        print("   üî¥ –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–ú–ù–ò–¢ –¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–≥–∞ 1")
                        print("   üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã:", data.get("relevant_documents", []))
                
                if idx == 8:
                    print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –®–∞–≥ 8:")
                    print("   –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–≤–µ—Ç –∏–∑ —à–∞–≥–∞ 3 (–º–æ–∂–µ—Ç –ø–æ–º–Ω–∏—Ç—å)")
                    if "8" in response_text or "–≤–æ—Å–µ–º" in response_text.lower():
                        print("   ‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–ú–ù–ò–¢ –∏–ª–∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    else:
                        print("   üî¥ –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–ú–ù–ò–¢ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —à–∞–≥–∞ 3")
                        print("   üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã:", data.get("relevant_documents", []))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(0.3)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    reports_dir = Path(__file__).parent / "reports"
    reports_dir.mkdir(exist_ok=True)
    
    output_file = reports_dir / f"test_memory_v2_{timestamp}.json"
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "scenario": scenario,
            "results": results,
            "analysis": {
                "history_limit": 10,
                "expected_forgotten_after": "step 6",
                "step_7_asks_about": "step 1 response",
                "step_8_asks_about": "step 3 response"
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_file.relative_to(Path.cwd())}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 80)
    print("üìä –í–´–í–û–î–´:")
    print("=" * 80)
    print("\nüîç –í–∞–∂–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ:")
    print("  –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ —à–∞–≥–∞—Ö 7-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:")
    print("  1) –û–Ω–∞ –ü–û–ú–ù–ò–¢ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
    print("  2) –û–Ω–∞ –ó–ê–ù–û–í–û –æ—Ç–≤–µ—á–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–∫—É–º–µ–Ω—Ç—ã (–æ–∂–∏–¥–∞–µ–º–æ)")
    print("\n  –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
    print("  –ï—Å–ª–∏ documents=[] - –∑–Ω–∞—á–∏—Ç –ø–æ–º–Ω–∏—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    print("  –ï—Å–ª–∏ documents=['...'] - –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞–Ω–æ–≤–æ")


if __name__ == "__main__":
    asyncio.run(test_memory())