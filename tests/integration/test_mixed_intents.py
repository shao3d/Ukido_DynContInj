#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ mixed –∏–Ω—Ç–µ–Ω—Ç–æ–≤ (—Å–æ—Ü–∏–∞–ª–∫–∞ + –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∫–æ–ª–µ)
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ router.py —Å—Ç—Ä–æ–∫–∏ 515-525
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_mixed_intent(message: str, expected_status: str, expected_has_questions: bool):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω mixed intent"""
    
    user_id = f"test_mixed_{hash(message)}"
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    requests.post(f"{BASE_URL}/clear_history/{user_id}")
    time.sleep(0.5)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = requests.post(
        f"{BASE_URL}/chat",
        json={"user_id": user_id, "message": message},
        timeout=30
    )
    
    if response.status_code == 200:
        data = response.json()
        
        actual_status = data.get('intent', 'unknown')
        actual_questions = data.get('decomposed_questions', [])
        social = data.get('social')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        status_ok = actual_status == expected_status
        questions_ok = (len(actual_questions) > 0) == expected_has_questions
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        status_symbol = "‚úÖ" if status_ok else "‚ùå"
        questions_symbol = "‚úÖ" if questions_ok else "‚ùå"
        
        print(f"\n{'='*80}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"üìä –û–∂–∏–¥–∞–Ω–∏—è: status={expected_status}, has_questions={expected_has_questions}")
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: status={actual_status} {status_symbol}, questions={len(actual_questions)} {questions_symbol}")
        print(f"   Social: {social}")
        if actual_questions:
            print(f"   Questions: {actual_questions}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {data.get('response', '')[:100]}...")
        
        return status_ok and questions_ok
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return False

def main():
    print("="*80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MIXED –ò–ù–¢–ï–ù–¢–û–í")
    print("="*80)
    print("\n–°–æ–≥–ª–∞—Å–Ω–æ router.py —Å—Ç—Ä–æ–∫–∏ 515-525:")
    print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ/–¥–µ—Ç—è—Ö = SUCCESS —Å implicit questions")
    print("="*80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä–∞–º –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    test_cases = [
        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä—è–º–æ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ Router'–∞ (—Å—Ç—Ä–æ–∫–∏ 520-523)
        ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –º–µ–Ω—è —Ç—Ä–æ–µ –¥–µ—Ç–µ–π", "success", True),
        ("–ü—Ä–∏–≤–µ—Ç! –ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π", "success", True),
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫—É—Ä—Å –¥–ª—è 10-–ª–µ—Ç–Ω–µ–≥–æ", "success", True),
        ("–°–ø–∞—Å–∏–±–æ! –£ –º–µ–Ω—è –¥–≤–æ–µ –¥–µ—Ç–µ–π 7 –∏ 12 –ª–µ—Ç", "success", True),
        
        # –ù–∞—à –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
        ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ", "success", True),
        ("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –∑–∞ —à–∫–æ–ª–∞ —É –≤–∞—Å?", "success", True),
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("–ü—Ä–∏–≤–µ—Ç!", "offtopic", False),  # –ß–∏—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        ("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ", "success", True),  # –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    ]
    
    results = []
    for message, expected_status, expected_has_questions in test_cases:
        result = test_mixed_intent(message, expected_status, expected_has_questions)
        results.append((message, result))
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed < total:
        print("\n‚ùå FAILED —Ç–µ—Å—Ç—ã:")
        for message, result in results:
            if not result:
                print(f"  - {message}")
        
        print("\n‚ö†Ô∏è –í–´–í–û–î: Router –ù–ï —Å–ª–µ–¥—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è mixed –∏–Ω—Ç–µ–Ω—Ç–æ–≤!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.")
    else:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Mixed –∏–Ω—Ç–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

if __name__ == "__main__":
    main()