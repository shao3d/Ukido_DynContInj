#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ Quick Regex
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ mixed –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import asyncio
import aiohttp
import json

BASE_URL = "http://localhost:8000"

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
TEST_CASES = [
    {
        "name": "–ß–∏—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "user_id": "test_user_1",
        "messages": ["–ü—Ä–∏–≤–µ—Ç!"],
        "expected": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    },
    {
        "name": "Mixed: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –≤–æ–ø—Ä–æ—Å",
        "user_id": "test_user_2", 
        "messages": ["–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç?"],
        "expected": "–æ—Ç–≤–µ—Ç –ø—Ä–æ –∫—É—Ä—Å—ã"
    },
    {
        "name": "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "user_id": "test_user_3",
        "messages": [
            "–ü—Ä–∏–≤–µ—Ç!",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?",
            "–ü—Ä–∏–≤–µ—Ç!"
        ],
        "expected": "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
    },
    {
        "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
        "user_id": "test_user_4",
        "messages": [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ü–µ–Ω—ã",
            "–ê?"
        ],
        "expected": "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–æ —Ü–µ–Ω—ã"
    },
    {
        "name": "Mixed: –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å + –≤–æ–ø—Ä–æ—Å",
        "user_id": "test_user_5",
        "messages": ["–°–ø–∞—Å–∏–±–æ! –ê –µ—Å—Ç—å —Å–∫–∏–¥–∫–∏?"],
        "expected": "–æ—Ç–≤–µ—Ç –ø—Ä–æ —Å–∫–∏–¥–∫–∏"
    },
    {
        "name": "–ü—Ä–æ—â–∞–Ω–∏–µ",
        "user_id": "test_user_6",
        "messages": [
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫—É—Ä—Å—ã?",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        ],
        "expected": "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –±–µ–∑ offtopic"
    }
]

async def send_message(session, user_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    data = {
        "user_id": user_id,
        "message": message
    }
    
    try:
        async with session.post(f"{BASE_URL}/chat", json=data) as response:
            if response.status == 200:
                return await response.json()
            else:
                return {"error": f"Status {response.status}"}
    except Exception as e:
        return {"error": str(e)}

async def run_test_case(session, test_case):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    print(f"\n{'='*60}")
    print(f"üìù –¢–µ—Å—Ç: {test_case['name']}")
    print(f"üë§ User ID: {test_case['user_id']}")
    print(f"üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: {test_case['expected']}")
    print('-'*60)
    
    for i, message in enumerate(test_case['messages'], 1):
        print(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
        
        result = await send_message(session, test_case['user_id'], message)
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('intent', 'unknown')}")
            
            if result.get('social'):
                print(f"üëã –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {result['social']}")
            
            if result.get('decomposed_questions'):
                print(f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {', '.join(result['decomposed_questions'])}")
            
            if result.get('relevant_documents'):
                print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(result['relevant_documents'])}")
    
    print(f"\n{'='*60}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ukido AI Assistant –±–µ–∑ Quick Regex")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    print("‚úÖ Quick Regex –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–¢–ö–õ–Æ–ß–ï–ù (USE_QUICK_REGEX = False)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{BASE_URL}/health") as response:
                if response.status == 200:
                    health = await response.json()
                    print(f"\n‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {health}")
                else:
                    print(f"\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return
        except Exception as e:
            print(f"\n‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python src/main.py")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for test_case in TEST_CASES:
            await run_test_case(session, test_case)
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("1. Mixed –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("2. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è")
        print("3. –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("4. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())