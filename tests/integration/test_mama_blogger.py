#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –º–∞–º–∞-–±–ª–æ–≥–µ—Ä"
–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
"""

import asyncio
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from interactive_test import test_pipeline, GLOBAL_HISTORY, GLOBAL_SOCIAL_STATE

async def test_mama_blogger_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –º–∞–º—ã-–±–ª–æ–≥–µ—Ä–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    with open('tests/test_scenarios.json', 'r', encoding='utf-8') as f:
        scenarios = json.load(f)
    
    mama_scenario = scenarios[0]  # –ü–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π - –º–∞–º–∞-–±–ª–æ–≥–µ—Ä
    questions = mama_scenario['steps']
    
    user_id = 'mama_blogger'
    
    print("\n" + "="*80)
    print("üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø: –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –º–∞–º–∞-–±–ª–æ–≥–µ—Ä")
    print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    print("="*80)
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    GLOBAL_HISTORY.storage.clear()
    GLOBAL_SOCIAL_STATE._store.clear()
    GLOBAL_SOCIAL_STATE._expires.clear()
    print("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞\n")
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º
    for i, question in enumerate(questions, 1):
        print("\n" + "="*80)
        print(f"üìç –í–û–ü–†–û–° {i}/{len(questions)}")
        print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        history = GLOBAL_HISTORY.get_history(user_id)
        print(f"üìö –í –∏—Å—Ç–æ—Ä–∏–∏ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        if history:
            print("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", history[-1]['content'][:100] + "...")
        
        print("\n" + "-"*80)
        print(f"üë§ –í–û–ü–†–û–°: {question}")
        print("-"*80)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        response = await test_pipeline(question, user_id, show_details=True)
        
        print("\n" + "="*80)
        print(f"üîç –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–ê {i}/{len(questions)}")
        print("="*80)
        print(f"üë§ –í–û–ü–†–û–°: {question}")
        print(f"ü§ñ –û–¢–í–ï–¢: {response}")
        print("="*80)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        if i < len(questions):
            await asyncio.sleep(1)
    
    print("\n" + "="*80)
    print("‚úÖ –°–¶–ï–ù–ê–†–ò–ô –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"üìö –í –∏—Å—Ç–æ—Ä–∏–∏: {len(GLOBAL_HISTORY.get_history(user_id))} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("="*80)

if __name__ == "__main__":
    asyncio.run(test_mama_blogger_scenario())