#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ - –ó–∞–±—ã–≤—á–∏–≤–∞—è –±–∞–±—É—à–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
"""

import asyncio
import json
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from main import router, response_generator, history, social_state
from src.main import ChatRequest

async def run_dialogue():
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ test_scenarios_stress.json"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    with open('tests/test_scenarios_stress.json', 'r', encoding='utf-8') as f:
        scenarios = json.load(f)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario = scenarios[0]
    print(f"üìã –°–¶–ï–ù–ê–†–ò–ô: {scenario['scenario_name']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}")
    print(f"üìä –®–∞–≥–æ–≤: {len(scenario['steps'])}")
    print("\n" + "="*60 + "\n")
    
    user_id = "babushka_test"
    results = []
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in history.storage:
        history.storage[user_id] = []
    if user_id in social_state._store:
        del social_state._store[user_id]
    
    print("üìù –ü–û–õ–ù–´–ô –î–ò–ê–õ–û–ì:")
    print("-" * 60)
    
    for i, message in enumerate(scenario['steps'], 1):
        print(f"\nüë§ –í–æ–ø—Ä–æ—Å {i}: {message}")
        
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_messages = history.get_history(user_id)
        
        # Router
        try:
            route_result = await router.route(message, history_messages, user_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Router: {e}")
            route_result = {"status": "error", "message": str(e)}
        
        status = route_result.get("status", "offtopic")
        response_text = ""
        source = "unknown"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if status == "offtopic":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if route_result.get("social_context"):
                response_text = route_result.get("message", "–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å")
                source = "router_social"
            else:
                response_text = route_result.get("message", "–≠—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥")
                source = "router_offtopic"
        
        elif status == "need_simplification":
            response_text = route_result.get("message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
            source = "router_simplification"
        
        elif status == "success":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Claude
            try:
                response_text = await response_generator.generate(
                    router_result=route_result,
                    history=history_messages
                )
                source = "claude"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ Generator: {e}")
                response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
                source = "error"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.add_message(user_id, "user", message)
        history.add_message(user_id, "assistant", response_text)
        
        elapsed = time.time() - start_time
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response_text}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f}s | –ò—Å—Ç–æ—á–Ω–∏–∫: {source} | –°—Ç–∞—Ç—É—Å: {status}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append({
            "step": i,
            "question": message,
            "answer": response_text,
            "status": status,
            "source": source,
            "time": elapsed,
            "documents": route_result.get("documents", []),
            "decomposed_questions": route_result.get("decomposed_questions", []),
            "social_context": route_result.get("social_context"),
            "repeated_question": route_result.get("repeated_question", False)
        })
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("-" * 60)
    
    total_time = sum(r["time"] for r in results)
    avg_time = total_time / len(results)
    success_count = sum(1 for r in results if r["status"] == "success")
    
    print(f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")
    print(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count}/{len(results)} ({success_count/len(results)*100:.1f}%)")
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    sources = {}
    for r in results:
        sources[r["source"]] = sources.get(r["source"], 0) + 1
    
    print("\n‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:")
    for source, count in sorted(sources.items(), key=lambda x: x[1], reverse=True):
        print(f"  - {source}: {count} ({count/len(results)*100:.1f}%)")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —à–∞–≥–∞–º
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ü–û –®–ê–ì–ê–ú:")
    print("-" * 60)
    for r in results:
        print(f"–®–∞–≥ {r['step']}: {r['status']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {r['source']} | –í—Ä–µ–º—è: {r['time']:.2f}s")
        if r['documents']:
            print(f"  –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(r['documents'])}")
        if r['social_context']:
            print(f"  –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {r['social_context']}")
        if r['repeated_question']:
            print(f"  üîÑ –ü–û–í–¢–û–†–ù–´–ô –í–û–ü–†–û–°")
    
    return results

if __name__ == "__main__":
    results = asyncio.run(run_dialogue())