import re
import os

# –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
personas = [
    ("1", "–≠–∫–æ–Ω–æ–º–Ω–∞—è –º–∞–º–∞ –û–∫—Å–∞–Ω–∞", "price_sensitive"),
    ("2", "–¢—Ä–µ–≤–æ–∂–Ω–∞—è –±–∞–±—É—à–∫–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "anxiety_about_child"),
    ("3", "–†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–ø–∞ –ê–Ω–¥—Ä–µ–π", "ready_to_buy"),
    ("4", "–õ—é–±–æ–ø—ã—Ç–Ω–∞—è —Ç—ë—Ç—è –ù–∞—Ç–∞—à–∞", "exploring_only"),
    ("5", "–°–∫–µ–ø—Ç–∏–∫-–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ –ò–≥–æ—Ä—å", "price_sensitive"),
    ("6", "–ó–∞–±–æ—Ç–ª–∏–≤–∞—è –º–∞–º–∞ –ø–µ—Ä–≤–µ–Ω—Ü–∞ –Æ–ª–∏—è", "anxiety_about_child"),
    ("7", "–ó–∞–Ω—è—Ç–æ–π –±–∏–∑–Ω–µ—Å–º–µ–Ω –ú–∞–∫—Å–∏–º", "ready_to_buy")
]

def extract_dialogue(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    dialogue_start = content.find("–°–ï–ö–¶–ò–Ø 1: –ü–û–õ–ù–´–ï –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´")
    dialogue_end = content.find("–°–ï–ö–¶–ò–Ø 2: –ú–ï–¢–†–ò–ö–ò")
    if dialogue_start != -1 and dialogue_end != -1:
        dialogue = content[dialogue_start:dialogue_end]
        # –û—á–∏—â–∞–µ–º –æ—Ç ANSI –∫–æ–¥–æ–≤
        dialogue = re.sub(r'\x1b\[[0-9;]*m', '', dialogue)
        return dialogue.strip()
    return ""

def extract_metrics(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    metrics_start = content.find("–°–ï–ö–¶–ò–Ø 2: –ú–ï–¢–†–ò–ö–ò")
    metrics_end = content.find("–°–ï–ö–¶–ò–Ø 3: –ê–ù–ê–õ–ò–ó")
    if metrics_start != -1 and metrics_end != -1:
        metrics = content[metrics_start:metrics_end]
        # –û—á–∏—â–∞–µ–º –æ—Ç ANSI –∫–æ–¥–æ–≤
        metrics = re.sub(r'\x1b\[[0-9;]*m', '', metrics)
        return metrics.strip()
    return ""

def extract_state_machine_analysis(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ State Machine"""
    analysis_start = content.find("üéØ –ê–ù–ê–õ–ò–ó STATE MACHINE")
    if analysis_start != -1:
        analysis = content[analysis_start:]
        # –ò—â–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        score_match = re.search(r'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ([\d.]+)/10', analysis)
        score = score_match.group(1) if score_match else "N/A"
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        accuracy_match = re.search(r'–¢–æ—á–Ω–æ—Å—Ç—å: ([\d.]+)%', analysis)
        accuracy = accuracy_match.group(1) if accuracy_match else "N/A"
        
        # –û—á–∏—â–∞–µ–º –æ—Ç ANSI –∫–æ–¥–æ–≤
        analysis = re.sub(r'\x1b\[[0-9;]*m', '', analysis)
        
        return analysis.strip(), score, accuracy
    return "", "N/A", "N/A"

# –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
report = []
summary_data = []

for num, name, expected_type in personas:
    file_path = f"tests/reports/temp_persona_{num}.txt"
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        dialogue = extract_dialogue(content)
        metrics = extract_metrics(content)
        analysis, score, accuracy = extract_state_machine_analysis(content)
        
        summary_data.append({
            'num': num,
            'name': name,
            'type': expected_type,
            'score': score,
            'accuracy': accuracy
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
        report.append(f"## –ü–µ—Ä—Å–æ–Ω–∞–∂ {num}: {name}")
        report.append(f"**–û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø**: {expected_type}")
        report.append(f"**–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞**: {score}/10")
        report.append(f"**–¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**: {accuracy}%")
        report.append("")
        
        if dialogue:
            report.append("### –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥")
            report.append("```")
            report.append(dialogue)
            report.append("```")
            report.append("")
        
        if metrics:
            report.append("### –ú–µ—Ç—Ä–∏–∫–∏")
            report.append("```")
            report.append(metrics)
            report.append("```")
            report.append("")
        
        if analysis:
            report.append("### –ê–Ω–∞–ª–∏–∑ State Machine")
            report.append("```")
            report.append(analysis)
            report.append("```")
            report.append("")
        
        report.append("---")
        report.append("")

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
summary_table = ["## üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", ""]
summary_table.append("| # | –ü–µ—Ä—Å–æ–Ω–∞–∂ | –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø | –¢–æ—á–Ω–æ—Å—Ç—å | –û—Ü–µ–Ω–∫–∞ |")
summary_table.append("|---|----------|---------------|----------|--------|")

total_score = 0
valid_scores = 0

for data in summary_data:
    summary_table.append(f"| {data['num']} | {data['name']} | {data['type']} | {data['accuracy']}% | **{data['score']}/10** |")
    try:
        score_float = float(data['score'])
        total_score += score_float
        valid_scores += 1
    except:
        pass

if valid_scores > 0:
    avg_score = total_score / valid_scores
    summary_table.append("")
    summary_table.append(f"**–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ State Machine: {avg_score:.1f}/10**")

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
final_report = "\n".join(summary_table) + "\n\n---\n\n" + "\n".join(report)

print(final_report)
