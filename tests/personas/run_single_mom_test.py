#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–¥–∏–Ω–æ–∫–æ–π –º–∞–º—ã —Å –°–î–í–ì-—Ä–µ–±—ë–Ω–∫–æ–º
"""

import json
import time
import requests
from datetime import datetime
import re

def run_single_mom_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    with open('test_single_mom_adhd.json', 'r', encoding='utf-8') as f:
        test_data = json.load(f)
    
    scenario = test_data['scenarios'][0]
    dialogue_id = scenario['id']
    user_id = f"{scenario['user_id']}_{int(time.time())}"
    
    print(f"\n{'='*60}")
    print(f"üíî –¢–ï–°–¢: {scenario['name']}")
    print(f"üìù ID: {dialogue_id}")
    print(f"üë§ User: {user_id}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:")
    print(f"   {scenario.get('expected_signal_transition', 'N/A')}")
    print(f"üò¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø")
    print(f"{'='*60}\n")
    
    results = []
    
    for i, message in enumerate(scenario['messages'], 1):
        print(f"\n{'‚îÄ'*50}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(scenario['messages'])}")
        print(f"üë© –ú–∞–º–∞: {message[:70]}{'...' if len(message) > 70 else ''}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                'http://localhost:8000/chat',
                json={'user_id': user_id, 'message': message},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = data.get('metadata', {})
                intent = metadata.get('intent', data.get('intent', 'unknown'))
                user_signal = metadata.get('user_signal', data.get('user_signal', 'unknown'))
                humor = metadata.get('humor_generated', False)
                cta_added = metadata.get('cta_added', False)
                
                # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_emoji = {
                    'anxiety_about_child': 'üò∞',
                    'price_sensitive': 'üí∏',
                    'exploring_only': 'üîç',
                    'ready_to_buy': '‚úÖ'
                }.get(user_signal, '‚ùì')
                
                print(f"ü§ñ Ukido: {data['response'][:120]}{'...' if len(data['response']) > 120 else ''}")
                print(f"üìä {signal_emoji} Signal: {user_signal} | Intent: {intent}")
                
                results.append({
                    'message': message,
                    'response': data['response'],
                    'intent': intent,
                    'user_signal': user_signal,
                    'humor_generated': humor,
                    'cta_added': cta_added
                })
                
                time.sleep(0.3)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*60}")
    print("üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"{'='*60}")
    
    # –ü–æ–¥—Å—á—ë—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
    signals = [r['user_signal'] for r in results]
    signal_counts = {}
    for s in signals:
        signal_counts[s] = signal_counts.get(s, 0) + 1
    
    print("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    for signal, count in signal_counts.items():
        emoji = {
            'anxiety_about_child': 'üò∞',
            'price_sensitive': 'üí∏',
            'exploring_only': 'üîç',
            'ready_to_buy': '‚úÖ'
        }.get(signal, '‚ùì')
        print(f"  {emoji} {signal}: {count} —Ä–∞–∑")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–ø–∞—Ç–∏–∏
    empathy_words = ['–ø–æ–Ω–∏–º–∞', '–ø–æ–¥–¥–µ—Ä–∂', '–ø–æ–º–æ', '—Å–æ—á—É–≤—Å—Ç–≤', '—Å–ª–æ–∂–Ω', '—Ç—Ä—É–¥', '–Ω–µ–ª–µ–≥–∫', '–æ–ø—ã—Ç']
    empathy_count = 0
    for r in results:
        if any(word in r['response'].lower() for word in empathy_words):
            empathy_count += 1
    
    print(f"\nüíô –≠–º–ø–∞—Ç–∏—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö: {empathy_count}/{len(results)} ({empathy_count*100//len(results)}%)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –°–î–í–ì/–≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    adhd_handled = 0
    for r in results:
        if any(word in r['response'].lower() for word in ['–≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤', '—Å–¥–≤–≥', '–∞–∫—Ç–∏–≤–Ω', '—ç–Ω–µ—Ä–≥–∏', '–ø–æ–¥–≤–∏–∂–Ω']):
            adhd_handled += 1
    
    print(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–î–í–ì –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {adhd_handled} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    financial_solutions = 0
    for r in results:
        if any(word in r['response'].lower() for word in ['—Ä–∞—Å—Å—Ä–æ—á–∫', '—Å–∫–∏–¥–∫', '–ø—Ä–æ–±–Ω', '–±–µ—Å–ø–ª–∞—Ç–Ω', '–æ–ø–ª–∞—Ç']):
            financial_solutions += 1
    
    print(f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã: {financial_solutions} —Ä–∞–∑")
    
    # –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    unique_signals = []
    for s in signals:
        if not unique_signals or s != unique_signals[-1]:
            unique_signals.append(s)
    
    print(f"\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤:")
    print(f"   {' ‚Üí '.join(unique_signals)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ ready_to_buy
    if 'ready_to_buy' in signals:
        ready_index = signals.index('ready_to_buy')
        if ready_index == len(signals) - 1 or ready_index == len(signals) - 2:
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ ready_to_buy –≤ –∫–æ–Ω—Ü–µ –¥–∏–∞–ª–æ–≥–∞ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ ready_to_buy")
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–∞
    print(f"\n{'='*60}")
    print("üéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
    
    quality_score = 0
    max_score = 0
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –≠–º–ø–∞—Ç–∏—è (–º–∞–∫—Å 30 –±–∞–ª–ª–æ–≤)
    empathy_score = min(30, empathy_count * 10)
    quality_score += empathy_score
    max_score += 30
    print(f"üíô –≠–º–ø–∞—Ç–∏—è: {empathy_score}/30")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–î–í–ì (–º–∞–∫—Å 20 –±–∞–ª–ª–æ–≤)
    adhd_score = min(20, adhd_handled * 10)
    quality_score += adhd_score
    max_score += 20
    print(f"üß† –°–î–í–ì –∫–æ–Ω—Ç–µ–∫—Å—Ç: {adhd_score}/20")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è (–º–∞–∫—Å 20 –±–∞–ª–ª–æ–≤)
    finance_score = min(20, financial_solutions * 10)
    quality_score += finance_score
    max_score += 20
    print(f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å: {finance_score}/20")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–º–∞–∫—Å 30 –±–∞–ª–ª–æ–≤)
    if 'anxiety_about_child' in signal_counts and signal_counts['anxiety_about_child'] >= 2:
        signal_score = 15
    else:
        signal_score = 5
    if 'price_sensitive' in signal_counts:
        signal_score += 10
    if 'ready_to_buy' in signals:
        signal_score += 5
    quality_score += signal_score
    max_score += 30
    print(f"üìä –°–∏–≥–Ω–∞–ª—ã: {signal_score}/30")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    percentage = quality_score * 100 // max_score
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score}/{max_score} ({percentage}%)")
    
    if percentage >= 80:
        print("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—è–≤–∏–ª–∞ –≤—ã—Å–æ–∫—É—é —ç–º–ø–∞—Ç–∏—é")
    elif percentage >= 60:
        print("‚≠ê‚≠ê‚≠ê‚≠ê –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é")
    elif percentage >= 40:
        print("‚≠ê‚≠ê‚≠ê –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ï—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
    else:
        print("‚≠ê‚≠ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–º–ø–∞—Ç–∏–∏")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"test_results/single_mom_adhd_{timestamp}.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"# –û—Ç—á—ë—Ç —Ç–µ—Å—Ç–∞: {scenario['name']}\n\n")
        f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write(f"**User ID:** {user_id}\n\n")
        f.write(f"## –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {percentage}%\n\n")
        f.write(f"- **–≠–º–ø–∞—Ç–∏—è:** {empathy_score}/30\n")
        f.write(f"- **–°–î–í–ì –∫–æ–Ω—Ç–µ–∫—Å—Ç:** {adhd_score}/20\n")
        f.write(f"- **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:** {finance_score}/20\n")
        f.write(f"- **–°–∏–≥–Ω–∞–ª—ã:** {signal_score}/30\n\n")
        f.write(f"## –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤\n\n")
        f.write(f"{' ‚Üí '.join(unique_signals)}\n\n")
        
        f.write("## –î–∏–∞–ª–æ–≥\n\n")
        for i, r in enumerate(results, 1):
            signal_emoji = {
                'anxiety_about_child': 'üò∞',
                'price_sensitive': 'üí∏',
                'exploring_only': 'üîç',
                'ready_to_buy': '‚úÖ'
            }.get(r['user_signal'], '‚ùì')
            
            f.write(f"### –°–æ–æ–±—â–µ–Ω–∏–µ {i}\n\n")
            f.write(f"**–ú–∞–º–∞:** {r['message']}\n\n")
            f.write(f"**Ukido:** {r['response']}\n\n")
            f.write(f"*{signal_emoji} Signal: {r['user_signal']}, Intent: {r['intent']}*\n\n")
            f.write("---\n\n")
    
    print(f"\nüìÅ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")

if __name__ == "__main__":
    run_single_mom_test()