#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Tech Twins Parent —á–µ—Ä–µ–∑ API
"""

import json
import time
import requests
from datetime import datetime

def run_dialogue_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–∞–ø–æ–π –±–ª–∏–∑–Ω–µ—Ü–æ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    with open('test_tech_twins_parent.json', 'r', encoding='utf-8') as f:
        test_data = json.load(f)
    
    scenario = test_data['scenarios'][0]
    dialogue_id = scenario['id']
    user_id = f"{scenario['user_id']}_{int(time.time())}"
    
    print(f"\n{'='*60}")
    print(f"üß™ –¢–µ—Å—Ç: {scenario['name']}")
    print(f"üìù ID: {dialogue_id}")
    print(f"üë§ User: {user_id}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {scenario.get('expected_signal_transition', 'N/A')}")
    print(f"üòÑ –û–∂–∏–¥–∞–µ–º—ã–π —é–º–æ—Ä: {scenario.get('expected_humor', 'N/A')}")
    print(f"{'='*60}\n")
    
    results = []
    
    for i, message in enumerate(scenario['messages'], 1):
        print(f"\n{'‚îÄ'*50}")
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(scenario['messages'])}")
        print(f"üë§ User: {message[:100]}{'...' if len(message) > 100 else ''}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                'http://localhost:8000/chat',
                json={'user_id': user_id, 'message': message},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = data.get('metadata', {})
                intent = metadata.get('intent', data.get('intent', 'unknown'))
                user_signal = metadata.get('user_signal', data.get('user_signal', 'unknown'))
                humor = metadata.get('humor_generated', False)
                cta_added = metadata.get('cta_added', False)
                
                print(f"ü§ñ Bot: {data['response'][:200]}{'...' if len(data['response']) > 200 else ''}")
                print(f"üìä Intent: {intent} | Signal: {user_signal} | Humor: {humor} | CTA: {cta_added}")
                
                results.append({
                    'message': message,
                    'response': data['response'],
                    'intent': intent,
                    'user_signal': user_signal,
                    'humor_generated': humor,
                    'cta_added': cta_added
                })
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                time.sleep(0.5)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   {response.text[:200]}")
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è Timeout –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*60}")
    print("üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"{'='*60}")
    
    # –ü–æ–¥—Å—á—ë—Ç —é–º–æ—Ä–∞
    humor_count = sum(1 for r in results if r['humor_generated'])
    print(f"üòÑ –Æ–º–æ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {humor_count} —Ä–∞–∑")
    
    # –ü–æ–¥—Å—á—ë—Ç CTA
    cta_count = sum(1 for r in results if r['cta_added'])
    print(f"üì¢ CTA –¥–æ–±–∞–≤–ª–µ–Ω: {cta_count} —Ä–∞–∑")
    
    # –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    signals = [r['user_signal'] for r in results]
    unique_signals = []
    for s in signals:
        if not unique_signals or s != unique_signals[-1]:
            unique_signals.append(s)
    
    print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {' ‚Üí '.join(unique_signals)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π
    twin_mentions = 0
    for r in results:
        if any(word in r['response'].lower() for word in ['–∞—Ä—Ç—ë–º', '—Å–æ—Ñ–∏—è', '–±–ª–∏–∑–Ω–µ—Ü', '–æ–±–∞', '–¥–≤–æ–∏—Ö']):
            twin_mentions += 1
    
    print(f"üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–ª–∏–∑–Ω–µ—Ü–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö: {twin_mentions}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"test_results/tech_twins_{timestamp}.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"# –û—Ç—á—ë—Ç —Ç–µ—Å—Ç–∞: {scenario['name']}\n\n")
        f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write(f"**User ID:** {user_id}\n\n")
        f.write(f"## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n")
        f.write(f"- **–Æ–º–æ—Ä:** {humor_count} —Ä–∞–∑\n")
        f.write(f"- **CTA:** {cta_count} —Ä–∞–∑\n")
        f.write(f"- **–ü–µ—Ä–µ—Ö–æ–¥—ã:** {' ‚Üí '.join(unique_signals)}\n")
        f.write(f"- **–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–ª–∏–∑–Ω–µ—Ü–æ–≤:** {twin_mentions}\n\n")
        
        f.write("## –î–∏–∞–ª–æ–≥\n\n")
        for i, r in enumerate(results, 1):
            f.write(f"### –°–æ–æ–±—â–µ–Ω–∏–µ {i}\n\n")
            f.write(f"**User:** {r['message']}\n\n")
            f.write(f"**Bot:** {r['response']}\n\n")
            f.write(f"*–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: intent={r['intent']}, signal={r['user_signal']}, "
                   f"humor={r['humor_generated']}, cta={r['cta_added']}*\n\n")
            f.write("---\n\n")
    
    print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")

if __name__ == "__main__":
    run_dialogue_test()