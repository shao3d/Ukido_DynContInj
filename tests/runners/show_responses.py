#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
"""

import asyncio
import httpx
import json
from datetime import datetime

TEST_QUERIES = [
    {
        "category": "Ready to buy (–Ω–µ—è–≤–Ω—ã–µ)",
        "queries": [
            "–°–ø–∞—Å–∏–±–æ. –ú—ã —Å–æ–≥–ª–∞—Å–Ω—ã.",
            "–°–ø–∞—Å–∏–±–æ. –î–µ–π—Å—Ç–≤—É–µ–º.",
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—è"
        ]
    },
    {
        "category": "State Machine —Å–∏–≥–Ω–∞–ª—ã",
        "queries": [
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç? –î–æ—Ä–æ–≥–æ –Ω–∞–≤–µ—Ä–Ω–æ–µ?",
            "–ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π",
            "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∫—É—Ä—Å"
        ]
    },
    {
        "category": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
        "queries": [
            "–°–ø–∞—Å–∏–±–æ!",
            "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫—É—Ä—Å?"
        ]
    }
]

async def get_response(message: str, user_id: str = "test_user") -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã"""
    url = "http://localhost:8000/chat"
    payload = {"message": message, "user_id": user_id}
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {"error": str(e)}

async def main():
    print("=" * 80)
    print("üìã –ü–û–õ–ù–´–ï –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´ –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    results = []
    
    for category_data in TEST_QUERIES:
        category = category_data["category"]
        print(f"\n{'='*60}")
        print(f"üìÇ {category}")
        print("="*60)
        
        for i, query in enumerate(category_data["queries"], 1):
            print(f"\n{i}. üí¨ –í–æ–ø—Ä–æ—Å: '{query}'")
            print("-" * 40)
            
            response = await get_response(query, f"user_{category}_{i}")
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.get('intent', 'unknown')}")
            print(f"üéØ User Signal: {response.get('user_signal', 'unknown')}")
            print(f"üëã Social Context: {response.get('social', 'None')}")
            
            # –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            decomposed = response.get('decomposed_questions', [])
            if decomposed:
                print(f"üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
                for q in decomposed:
                    print(f"   - {q}")
            
            # –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
            print(f"\nüí° –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
            print("-" * 40)
            full_response = response.get('response', '')
            print(full_response)
            print("-" * 40)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            results.append({
                "category": category,
                "query": query,
                "status": response.get('intent'),
                "signal": response.get('user_signal'),
                "social": response.get('social'),
                "decomposed": decomposed,
                "response": full_response
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"full_responses_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–∏—Å—Ç–µ–º—ã...")
    print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python src/main.py")
    asyncio.run(main())