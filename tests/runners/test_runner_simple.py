#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—É - –ø–æ –æ–¥–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é –∑–∞ —Ä–∞–∑
"""

import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Å–æ—á–Ω–∏—Ü—É
from sandbox_v2 import SandboxV2, Colors

async def run_one_scenario(scenario_num: int = 1, use_advanced: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏
    test_file = "tests/test_advanced_dialogues.json" if use_advanced else "tests/test_comprehensive_dialogues.json"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
    with open(test_file, 'r', encoding='utf-8') as f:
        scenarios = json.load(f)
    
    if scenario_num < 1 or scenario_num > len(scenarios):
        print(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_num} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(scenarios)}")
        return
    
    scenario = scenarios[scenario_num - 1]
    sandbox = SandboxV2()
    
    print(f"{Colors.HEADER}{'='*80}")
    print(f"–°–¶–ï–ù–ê–†–ò–ô #{scenario_num}: {scenario['scenario_name']}")
    print(f"{'='*80}{Colors.ENDC}")
    print(f"{Colors.DIM}–û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}{Colors.ENDC}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if 'expected_signal_progression' in scenario:
        print(f"{Colors.DIM}–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: {' ‚Üí '.join(scenario['expected_signal_progression'])}{Colors.ENDC}")
    elif 'expected_signal' in scenario:
        print(f"{Colors.DIM}–û–∂–∏–¥–∞–µ–º—ã–π —Å–∏–≥–Ω–∞–ª: {scenario['expected_signal']}{Colors.ENDC}")
    if 'secondary_signal' in scenario:
        print(f"{Colors.DIM}–í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {scenario['secondary_signal']}{Colors.ENDC}")
    
    print()
    
    user_id = f"test_user_{scenario_num}"
    
    for i, message in enumerate(scenario['steps'], 1):
        print(f"\n{Colors.BLUE}‚îÅ‚îÅ‚îÅ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(scenario['steps'])} ‚îÅ‚îÅ‚îÅ{Colors.ENDC}")
        print(f"{Colors.BOLD}üë§ User:{Colors.ENDC} {message}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—É
        result = await sandbox.process_message(message, user_id, show_details=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        print(f"\n{Colors.GREEN}ü§ñ Bot:{Colors.ENDC} {result.response}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print(f"\n{Colors.CYAN}üìä –ê–Ω–∞–ª–∏–∑:{Colors.ENDC}")
        print(f"  ‚Ä¢ Router status: {result.router_status}")
        if result.social_context:
            print(f"  ‚Ä¢ Social context: {result.social_context}")
        if result.questions:
            print(f"  ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: {result.questions}")
        if result.documents:
            print(f"  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join([d.split('/')[-1].replace('.md', '') for d in result.documents])}")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è: Router {result.router_time:.2f}s, Generator {result.generator_time:.2f}s")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        validation = sandbox.validate_result(result)
        if hasattr(validation, 'warnings') and validation.warnings:
            print(f"\n{Colors.YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:{Colors.ENDC}")
            for warning in validation.warnings:
                print(f"  ‚Ä¢ {warning}")
        elif hasattr(validation, 'checks'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            problems = [c for c in validation.checks if "‚ùå" in c or "‚ö†Ô∏è" in c]
            if problems:
                print(f"\n{Colors.YELLOW}‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∏:{Colors.ENDC}")
                for check in problems:
                    print(f"  {check}")
        
        print(f"\n{Colors.DIM}{'‚îÄ'*80}{Colors.ENDC}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        await asyncio.sleep(0.1)
    
    print(f"\n{Colors.GREEN}‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π #{scenario_num} –∑–∞–≤–µ—Ä—à—ë–Ω{Colors.ENDC}\n")

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ --advanced
    use_advanced = '--advanced' in sys.argv
    if use_advanced:
        sys.argv.remove('--advanced')
    
    if len(sys.argv) > 1:
        try:
            scenario_num = int(sys.argv[1])
            await run_one_scenario(scenario_num, use_advanced)
        except ValueError:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_runner_simple.py [–Ω–æ–º–µ—Ä_—Å—Ü–µ–Ω–∞—Ä–∏—è] [--advanced]")
            print("–ù–∞–ø—Ä–∏–º–µ—Ä: python test_runner_simple.py 1")
            print("         python test_runner_simple.py 1 --advanced")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π
        await run_one_scenario(1, use_advanced)

if __name__ == "__main__":
    asyncio.run(main())