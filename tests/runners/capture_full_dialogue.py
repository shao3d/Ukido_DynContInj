#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ü–û–õ–ù–´–• –¥–∏–∞–ª–æ–≥–æ–≤ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ State Machine
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
"""

import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def run_and_capture(persona_num):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥"""
    import subprocess
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    cmd = f"python collaborative_test.py --diverse {persona_num}"
    process = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    
    stdout, stderr = await process.communicate()
    full_output = stdout.decode('utf-8', errors='replace')
    
    # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ª–æ–≥ –∏–∑ –≤—ã–≤–æ–¥–∞
    dialogue = {"raw_output": full_output}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    questions = []
    answers = []
    
    lines = full_output.split('\n')
    for i, line in enumerate(lines):
        if 'üë§ –í–æ–ø—Ä–æ—Å' in line:
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤–æ–ø—Ä–æ—Å
            if i + 1 < len(lines):
                questions.append(lines[i + 1].strip())
        elif 'ü§ñ –û—Ç–≤–µ—Ç' in line:
            # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            answer_lines = []
            j = i + 1
            while j < len(lines) and '‚îÄ‚îÄ‚îÄ' not in lines[j] and 'üë§' not in lines[j]:
                answer_lines.append(lines[j].strip())
                j += 1
            answers.append('\n'.join(answer_lines))
    
    dialogue['questions'] = questions
    dialogue['answers'] = answers
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:' in full_output:
        score_line = [l for l in lines if '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:' in l]
        if score_line:
            try:
                score = float(score_line[0].split(':')[1].split('/')[0].strip())
                dialogue['score'] = score
            except:
                dialogue['score'] = 0.0
    
    return dialogue

async def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ 7 –ø–µ—Ä—Å–æ–Ω –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    
    personas = [
        {"num": 1, "name": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –æ—Ç–µ—Ü –í–∏–∫—Ç–æ—Ä", "expected": "price_sensitive"},
        {"num": 2, "name": "–ü–∞–Ω–∏—á–µ—Å–∫–∞—è –º–∞–º–∞ –°–≤–µ—Ç–ª–∞–Ω–∞", "expected": "anxiety_about_child"},
        {"num": 3, "name": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫ –ï–ª–µ–Ω–∞", "expected": "ready_to_buy"},
        {"num": 4, "name": "–ë–∞–±—É—à–∫–∞-–æ–ø–µ–∫—É–Ω –†–∞–∏—Å–∞", "expected": "anxiety_about_child"},
        {"num": 5, "name": "–ú–æ–ª–æ–¥–∞—è –º–∞–º–∞-–±–ª–æ–≥–µ—Ä –ö–∞—Ä–∏–Ω–∞", "expected": "exploring_only"},
        {"num": 6, "name": "–î–µ–¥—É—à–∫–∞-—Å–∫–µ–ø—Ç–∏–∫ –ë–æ—Ä–∏—Å", "expected": "exploring_only"},
        {"num": 7, "name": "–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è –º–∞–º–∞ –û–ª—è", "expected": "price_sensitive"}
    ]
    
    results = []
    
    print("="*80)
    print("–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STATE MACHINE V0.9.1")
    print("="*80)
    
    for p in personas:
        print(f"\n‚ñ∂Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω—É {p['num']}: {p['name']}...")
        dialogue = await run_and_capture(p['num'])
        
        results.append({
            "persona": p,
            "dialogue": dialogue
        })
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ü–µ–Ω–∫–∞: {dialogue.get('score', 'N/A')}/10")
        print(f"   –í–æ–ø—Ä–æ—Å–æ–≤: {len(dialogue.get('questions', []))}")
        print(f"   –û—Ç–≤–µ—Ç–æ–≤: {len(dialogue.get('answers', []))}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"tests/reports/state_machine_FULL_DIALOGUES_{timestamp}.json"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    scores = [r['dialogue'].get('score', 0) for r in results]
    avg_score = sum(scores) / len(scores) if scores else 0
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/10")
    print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(scores):.1f}/10")
    print(f"   –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min(scores):.1f}/10")
    
    return results

if __name__ == "__main__":
    asyncio.run(main())