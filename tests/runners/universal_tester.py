#!/usr/bin/env python3
"""
Universal Tester - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ukido AI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –≤—Å–µ –º–∏–Ω–∏–¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSON –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
"""

import asyncio
import json
import sys
import time
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass, field
from html import escape

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from social_state import SocialStateManager
from config import Config

# ====== –¶–í–ï–¢–ê –î–õ–Ø –ö–û–ù–°–û–õ–ò ======
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'

# ====== –†–ï–ó–£–õ–¨–¢–ê–¢ –®–ê–ì–ê ======
@dataclass
class StepResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    step_num: int
    user_message: str
    bot_response: str
    router_status: str
    social_context: Optional[str]
    documents: List[str]
    router_time: float
    generator_time: float
    total_time: float
    source: str  # "router_social", "claude", "fallback"
    errors: List[str] = field(default_factory=list)
    # State Machine –º–µ—Ç—Ä–∏–∫–∏
    user_signal: str = "exploring_only"
    personalized_offer: str = ""
    tone_adaptation: str = ""
    # Edge case –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    fuzzy_matched: bool = False
    has_profanity: bool = False
    memory_position: int = 0

# ====== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–õ–û–ì–ê ======
@dataclass
class DialogueResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–æ–Ω–∞ –≤—Å–µ–≥–æ –º–∏–Ω–∏–¥–∏–∞–ª–æ–≥–∞"""
    scenario_name: str
    description: str
    expected_signal: Optional[str]
    steps: List[StepResult]
    total_time: float
    avg_response_time: float
    errors_count: int
    success: bool
    
    @property
    def accuracy(self) -> float:
        """–¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è user_signal"""
        if not self.expected_signal or not self.steps:
            return 0
        correct = sum(1 for s in self.steps if s.user_signal == self.expected_signal)
        return (correct / len(self.steps)) * 100

# ====== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ======
class UniversalTester:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self, json_file: str):
        """
        Args:
            json_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        """
        self.json_file = Path(json_file)
        if not self.json_file.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        with open(self.json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
            if isinstance(data, dict) and "scenarios" in data:
                self.scenarios = data["scenarios"]
            elif isinstance(data, list):
                self.scenarios = data
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ {json_file}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.config = Config()
        self.router = Router(use_cache=True)
        self.response_generator = ResponseGenerator()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.results: List[DialogueResult] = []
        self.start_time = None
        self.end_time = None
    
    async def process_message(
        self,
        message: str,
        user_id: str,
        history_messages: List[Dict]
    ) -> Tuple[str, Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pipeline"""
        start_time = time.time()
        
        # Router
        router_start = time.time()
        try:
            route_result = await self.router.route(message, history_messages, user_id)
            router_time = time.time() - router_start
        except Exception as e:
            print(f"{Colors.RED}‚ùå Router failed: {e}{Colors.ENDC}")
            route_result = {
                "status": "error",
                "message": f"Router error: {str(e)}"
            }
            router_time = time.time() - router_start
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        status = route_result.get("status", "offtopic")
        social_context = route_result.get("social_context")
        documents = route_result.get("documents", [])
        questions = route_result.get("decomposed_questions", [])
        user_signal = route_result.get("user_signal", "exploring_only")
        fuzzy_matched = route_result.get("fuzzy_matched", False)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        generator_time = 0
        source = "fallback"
        
        if status == "success":
            generator_start = time.time()
            try:
                response = await self.response_generator.generate(
                    route_result,
                    history_messages
                )
                generator_time = time.time() - generator_start
                source = "claude"
            except Exception as e:
                print(f"{Colors.RED}‚ùå Generator failed: {e}{Colors.ENDC}")
                response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                generator_time = time.time() - generator_start
        else:
            response = route_result.get("message", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —à–∫–æ–ª–µ.")
            source = "router_social" if social_context else "fallback"
        
        total_time = time.time() - start_time
        
        return response, {
            "status": status,
            "social_context": social_context,
            "documents": documents,
            "questions": questions,
            "router_time": router_time,
            "generator_time": generator_time,
            "total_time": total_time,
            "source": source,
            "user_signal": user_signal,
            "fuzzy_matched": fuzzy_matched
        }
    
    async def run_dialogue(self, scenario: Dict, scenario_num: int) -> DialogueResult:
        """–ü—Ä–æ–≥–æ–Ω—è–µ—Ç –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        scenario_name = scenario.get("scenario_name", f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_num}")
        description = scenario.get("description", "")
        expected_signal = scenario.get("expected_signal")
        steps_data = scenario.get("steps", [])
        
        print(f"\n{Colors.CYAN}‚ïî{'‚ïê'*60}‚ïó")
        print(f"‚ïë {'–°—Ü–µ–Ω–∞—Ä–∏–π #{}: {}'.format(scenario_num, scenario_name[:40]):^58} ‚ïë")
        print(f"‚ïö{'‚ïê'*60}‚ïù{Colors.ENDC}")
        
        if description:
            print(f"{Colors.DIM}üìù {description}{Colors.ENDC}")
        if expected_signal:
            print(f"{Colors.DIM}üéØ –û–∂–∏–¥–∞–µ–º—ã–π signal: {expected_signal}{Colors.ENDC}")
        print(f"{Colors.DIM}üìä –®–∞–≥–æ–≤: {len(steps_data)}{Colors.ENDC}\n")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π user_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        user_id = f"universal_test_{scenario_name.replace(' ', '_').lower()}_{datetime.now().timestamp()}"
        
        # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        history = HistoryManager()
        social_state = SocialStateManager()
        
        step_results = []
        dialogue_start = time.time()
        success = True
        
        for i, step_data in enumerate(steps_data, 1):
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —à–∞–≥–æ–≤
            if isinstance(step_data, str):
                message = step_data
            elif isinstance(step_data, dict):
                message = step_data.get("user_input", step_data.get("message", ""))
            else:
                print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞ {i}{Colors.ENDC}")
                continue
            
            print(f"{Colors.DIM}–®–∞–≥ {i}/{len(steps_data)}:{Colors.ENDC} ", end="")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history_messages = history.get_history(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                response, metadata = await self.process_message(message, user_id, history_messages)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history.add_message(user_id, "user", message)
                history.add_message(user_id, "assistant", response)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
                personalized_offer = self._extract_offer(response)
                tone_adaptation = self._detect_tone(response, metadata["user_signal"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—É–±–æ—Å—Ç—å
                has_profanity = any(marker in message.lower() for marker in ["—Ö**", "–æ**", "–±–ª*", "—Å—É—á", "–¥—É—Ä"])
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞
                step_result = StepResult(
                    step_num=i,
                    user_message=message,
                    bot_response=response,
                    router_status=metadata["status"],
                    social_context=metadata["social_context"],
                    documents=metadata["documents"],
                    router_time=metadata["router_time"],
                    generator_time=metadata["generator_time"],
                    total_time=metadata["total_time"],
                    source=metadata["source"],
                    user_signal=metadata["user_signal"],
                    personalized_offer=personalized_offer,
                    tone_adaptation=tone_adaptation,
                    fuzzy_matched=metadata["fuzzy_matched"],
                    has_profanity=has_profanity,
                    memory_position=i
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
                if metadata["status"] == "error":
                    step_result.errors.append("Router/Generator error")
                    success = False
                
                step_results.append(step_result)
                
                # –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
                status_icon = "‚úÖ" if metadata["status"] == "success" else "‚ö†Ô∏è"
                print(f"{status_icon} [{metadata['status']}] {metadata['total_time']:.2f}s")
                
            except Exception as e:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
                step_results.append(StepResult(
                    step_num=i,
                    user_message=message,
                    bot_response="[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò]",
                    router_status="error",
                    social_context=None,
                    documents=[],
                    router_time=0,
                    generator_time=0,
                    total_time=0,
                    source="error",
                    errors=[str(e)]
                ))
                success = False
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.1)
        
        dialogue_time = time.time() - dialogue_start
        avg_time = dialogue_time / len(steps_data) if steps_data else 0
        errors_count = sum(len(s.errors) for s in step_results)
        
        result = DialogueResult(
            scenario_name=scenario_name,
            description=description,
            expected_signal=expected_signal,
            steps=step_results,
            total_time=dialogue_time,
            avg_response_time=avg_time,
            errors_count=errors_count,
            success=success
        )
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{Colors.GREEN}‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {dialogue_time:.1f}s")
        if expected_signal:
            print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è signal: {result.accuracy:.1f}%")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s{Colors.ENDC}")
        
        return result
    
    async def run_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã"""
        self.start_time = datetime.now()
        
        print(f"\n{Colors.HEADER}{'='*70}")
        print(f"{'UNIVERSAL TESTER - –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø':^70}")
        print(f"{'='*70}{Colors.ENDC}")
        print(f"\nüìÅ –§–∞–π–ª: {self.json_file}")
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(self.scenarios)}")
        print(f"üïê –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        # –ü—Ä–æ–≥–æ–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        for i, scenario in enumerate(self.scenarios, 1):
            result = await self.run_dialogue(scenario, i)
            self.results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏
            if i < len(self.scenarios):
                await asyncio.sleep(1)
        
        self.end_time = datetime.now()
        duration = (self.end_time - self.start_time).total_seconds()
        
        print(f"\n{Colors.GREEN}{'='*70}")
        print(f"{'–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û':^70}")
        print(f"{'='*70}{Colors.ENDC}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.1f}s")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {sum(1 for r in self.results if r.success)}/{len(self.results)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        self.generate_reports()
    
    def _extract_offer(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        offer_patterns = [
            "—Å–∫–∏–¥–∫", "–±–µ—Å–ø–ª–∞—Ç–Ω", "–ø—Ä–æ–±–Ω", "–∑–∞–ø–∏—Å", 
            "–ø–æ–ø—Ä–æ–±–æ–≤", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏", "–∞–∫—Ü–∏"
        ]
        for pattern in offer_patterns:
            if pattern in response.lower():
                sentences = response.split(".")
                for sentence in sentences:
                    if pattern in sentence.lower():
                        return sentence.strip()
        return ""
    
    def _detect_tone(self, response: str, user_signal: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–Ω –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        response_lower = response.lower()
        
        # –ú–∞—Ä–∫–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–æ–≤
        empathy_markers = ["–ø–æ–Ω–∏–º–∞", "–±–µ—Å–ø–æ–∫–æ", "—Ç—Ä–µ–≤–æ–∂", "–ø–æ–¥–¥–µ—Ä–∂", "–ø–æ–º–æ–∂", "–∑–∞–±–æ—Ç"]
        concrete_markers = ["–∑–∞–ø–∏—Å", "–Ω–∞—á–∞—Ç—å", "–¥–æ–∫—É–º–µ–Ω—Ç", "–æ–ø–ª–∞—Ç", "–∞–¥—Ä–µ—Å", "–≥—Ä–∞—Ñ–∏–∫"]
        value_markers = ["—Ü–µ–Ω–Ω–æ—Å—Ç", "–≤—ã–≥–æ–¥", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—ç—Ñ—Ñ–µ–∫—Ç", "–∏–Ω–≤–µ—Å—Ç–∏—Ü", "—Å–∫–∏–¥–∫"]
        
        scores = {
            "—ç–º–ø–∞—Ç–∏—è": sum(1 for m in empathy_markers if m in response_lower),
            "–∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞": sum(1 for m in concrete_markers if m in response_lower),
            "—Ü–µ–Ω–Ω–æ—Å—Ç—å": sum(1 for m in value_markers if m in response_lower)
        }
        
        if max(scores.values()) > 0:
            return max(scores, key=scores.get)
        return "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
    
    def generate_reports(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD –∏ HTML –æ—Ç—á–µ—Ç—ã"""
        timestamp = self.start_time.strftime("%Y%m%d_%H%M%S")
        reports_dir = Path("tests/reports")
        reports_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown –æ—Ç—á–µ—Ç
        md_file = reports_dir / f"universal_test_{timestamp}.md"
        self._generate_markdown_report(md_file)
        print(f"\nüìù Markdown –æ—Ç—á–µ—Ç: {md_file}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
        html_file = reports_dir / f"universal_test_{timestamp}.html"
        self._generate_html_report(html_file)
        print(f"üåê HTML –æ—Ç—á–µ—Ç: {html_file}")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: JSON –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        json_file = reports_dir / f"universal_test_{timestamp}.json"
        self._save_json_results(json_file)
        print(f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json_file}")
    
    def _generate_markdown_report(self, output_file: Path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown –æ—Ç—á–µ—Ç"""
        with open(output_file, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("# Universal Test Report\n\n")
            f.write(f"**–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤**: `{self.json_file.name}`\n")
            f.write(f"**–î–∞—Ç–∞**: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {(self.end_time - self.start_time).total_seconds():.1f}s\n\n")
            
            # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            f.write("## üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n")
            f.write("| # | –°—Ü–µ–Ω–∞—Ä–∏–π | –®–∞–≥–æ–≤ | –í—Ä–µ–º—è | –°—Ç–∞—Ç—É—Å | –¢–æ—á–Ω–æ—Å—Ç—å |\n")
            f.write("|---|----------|-------|-------|--------|----------|\n")
            
            for i, result in enumerate(self.results, 1):
                status = "‚úÖ" if result.success else "‚ùå"
                accuracy = f"{result.accuracy:.1f}%" if result.expected_signal else "‚Äî"
                f.write(f"| {i} | {result.scenario_name} | {len(result.steps)} | ")
                f.write(f"{result.avg_response_time:.1f}s | {status} | {accuracy} |\n")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_steps = sum(len(r.steps) for r in self.results)
            successful = sum(1 for r in self.results if r.success)
            avg_time = sum(r.avg_response_time for r in self.results) / len(self.results) if self.results else 0
            
            f.write(f"\n**–ò—Ç–æ–≥–æ**: {len(self.results)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, {total_steps} —à–∞–≥–æ–≤\n")
            f.write(f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å**: {successful}/{len(self.results)} ({successful/len(self.results)*100:.1f}%)\n")
            f.write(f"**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞**: {avg_time:.2f}s\n\n")
            
            f.write("---\n\n")
            
            # –ü–æ–ª–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            f.write("## üé≠ –ü–æ–ª–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏\n\n")
            
            for i, result in enumerate(self.results, 1):
                f.write(f"### –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {result.scenario_name}\n\n")
                
                if result.description:
                    f.write(f"*{result.description}*\n\n")
                
                if result.expected_signal:
                    f.write(f"**–û–∂–∏–¥–∞–µ–º—ã–π signal**: `{result.expected_signal}`\n")
                    f.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**: {result.accuracy:.1f}%\n\n")
                
                # –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
                for step in result.steps:
                    f.write(f"#### –®–∞–≥ {step.step_num}\n\n")
                    f.write(f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n")
                    f.write(f"> {step.user_message}\n\n")
                    
                    f.write(f"**ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:**\n")
                    # –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
                    for line in step.bot_response.split('\n'):
                        if line.strip():
                            f.write(f"> {line}\n")
                    f.write("\n")
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ —à–∞–≥–∞
                    f.write(f"**üìä –ú–µ—Ç—Ä–∏–∫–∏:**\n")
                    f.write(f"- –°—Ç–∞—Ç—É—Å: `{step.router_status}`\n")
                    f.write(f"- –ò—Å—Ç–æ—á–Ω–∏–∫: {step.source}\n")
                    f.write(f"- Signal: `{step.user_signal}`\n")
                    
                    if step.tone_adaptation:
                        f.write(f"- –¢–æ–Ω: {step.tone_adaptation}\n")
                    if step.personalized_offer:
                        f.write(f"- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {step.personalized_offer[:100]}...\n")
                    if step.social_context:
                        f.write(f"- –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {step.social_context}\n")
                    if step.documents:
                        f.write(f"- –î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(step.documents)}\n")
                    if step.fuzzy_matched:
                        f.write(f"- üîç Fuzzy matching —Å—Ä–∞–±–æ—Ç–∞–ª\n")
                    if step.has_profanity:
                        f.write(f"- ü§¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–±–æ—Å—Ç—å\n")
                    
                    f.write(f"- –í—Ä–µ–º—è: {step.total_time:.2f}s ")
                    f.write(f"(Router: {step.router_time:.2f}s, Generator: {step.generator_time:.2f}s)\n")
                    
                    if step.errors:
                        f.write(f"- ‚ùå –û—à–∏–±–∫–∏: {', '.join(step.errors)}\n")
                    
                    f.write("\n---\n\n")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞
                f.write(f"#### üìà –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞\n\n")
                f.write(self._analyze_dialogue(result))
                f.write("\n\n")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            f.write("## üìà –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
            f.write(self._generate_final_analysis())
    
    def _generate_html_report(self, output_file: Path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç"""
        # HTML —Å—Ç–∏–ª–∏
        html_styles = """
        <style>
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                line-height: 1.6; 
                color: #333; 
                max-width: 1400px; 
                margin: 0 auto; 
                padding: 20px;
                background: #f5f5f5;
            }
            h1 { 
                color: #2c3e50; 
                border-bottom: 3px solid #3498db; 
                padding-bottom: 10px; 
            }
            h2 { 
                color: #34495e; 
                margin-top: 40px;
                background: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            h3 {
                color: #2c3e50;
                margin-top: 30px;
            }
            .stats { 
                display: grid; 
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                gap: 20px; 
                margin: 30px 0; 
            }
            .stat-card { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; 
                padding: 25px; 
                border-radius: 12px; 
                box-shadow: 0 8px 16px rgba(0,0,0,0.1);
                text-align: center;
            }
            .stat-number { 
                font-size: 2.5em; 
                font-weight: bold;
                margin-bottom: 10px;
            }
            .scenario { 
                background: white; 
                padding: 25px; 
                margin: 25px 0; 
                border-radius: 12px; 
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            .scenario.failed { 
                border-left: 5px solid #e74c3c; 
            }
            .scenario.success { 
                border-left: 5px solid #27ae60; 
            }
            .step { 
                background: #f8f9fa; 
                padding: 20px; 
                margin: 15px 0; 
                border-radius: 8px; 
                border: 1px solid #dee2e6; 
            }
            .user-msg { 
                color: #2c3e50; 
                font-weight: 600; 
                margin-bottom: 10px;
                padding: 10px;
                background: #e3f2fd;
                border-radius: 5px;
            }
            .assistant-msg { 
                color: #27ae60; 
                background: #f0f9ff; 
                padding: 15px; 
                border-radius: 8px; 
                margin: 10px 0;
                border-left: 3px solid #27ae60;
            }
            .metrics {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                margin-top: 10px;
            }
            .metric-badge {
                display: inline-block;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 0.85em;
                font-weight: 500;
            }
            .metric-success { background: #d4edda; color: #155724; }
            .metric-warning { background: #fff3cd; color: #856404; }
            .metric-error { background: #f8d7da; color: #721c24; }
            .metric-info { background: #d1ecf1; color: #0c5460; }
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background: white;
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            th {
                background: #3498db;
                color: white;
                padding: 12px;
                text-align: left;
            }
            td {
                padding: 10px 12px;
                border-bottom: 1px solid #ecf0f1;
            }
            tr:hover {
                background: #f5f5f5;
            }
            .error {
                color: #e74c3c;
                font-weight: bold;
            }
            .success-icon { color: #27ae60; }
            .error-icon { color: #e74c3c; }
        </style>
        """
        
        with open(output_file, 'w', encoding='utf-8') as f:
            # HTML –Ω–∞—á–∞–ª–æ
            f.write(f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universal Test Report - {self.start_time.strftime('%Y-%m-%d %H:%M')}</title>
    {html_styles}
</head>
<body>
    <h1>üöÄ Universal Test Report</h1>
    <p><strong>–§–∞–π–ª:</strong> {self.json_file.name}<br>
    <strong>–î–∞—Ç–∞:</strong> {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}<br>
    <strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {(self.end_time - self.start_time).total_seconds():.1f}s</p>
""")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            total_steps = sum(len(r.steps) for r in self.results)
            successful = sum(1 for r in self.results if r.success)
            avg_time = sum(r.avg_response_time for r in self.results) / len(self.results) if self.results else 0
            
            f.write("""
    <div class="stats">
        <div class="stat-card">
            <div class="stat-number">{}/{}</div>
            <div>–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{}</div>
            <div>–í—Å–µ–≥–æ —à–∞–≥–æ–≤</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{:.2f}s</div>
            <div>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{:.1f}%</div>
            <div>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
        </div>
    </div>
""".format(successful, len(self.results), total_steps, avg_time, 
           successful/len(self.results)*100 if self.results else 0))
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            f.write("""
    <h2>üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</h2>
    <table>
        <tr>
            <th>#</th>
            <th>–°—Ü–µ–Ω–∞—Ä–∏–π</th>
            <th>–®–∞–≥–æ–≤</th>
            <th>–í—Ä–µ–º—è</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–¢–æ—á–Ω–æ—Å—Ç—å</th>
        </tr>
""")
            
            for i, result in enumerate(self.results, 1):
                status_icon = "‚úÖ" if result.success else "‚ùå"
                accuracy = f"{result.accuracy:.1f}%" if result.expected_signal else "‚Äî"
                f.write(f"""
        <tr>
            <td>{i}</td>
            <td>{escape(result.scenario_name)}</td>
            <td>{len(result.steps)}</td>
            <td>{result.avg_response_time:.1f}s</td>
            <td>{status_icon}</td>
            <td>{accuracy}</td>
        </tr>
""")
            
            f.write("    </table>\n")
            
            # –ü–æ–ª–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            f.write("    <h2>üé≠ –ü–æ–ª–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏</h2>\n")
            
            for i, result in enumerate(self.results, 1):
                scenario_class = "scenario success" if result.success else "scenario failed"
                f.write(f"""
    <div class="{scenario_class}">
        <h3>–°—Ü–µ–Ω–∞—Ä–∏–π {i}: {escape(result.scenario_name)}</h3>
""")
                
                if result.description:
                    f.write(f"        <p><em>{escape(result.description)}</em></p>\n")
                
                if result.expected_signal:
                    f.write(f"""
        <p>
            <strong>–û–∂–∏–¥–∞–µ–º—ã–π signal:</strong> <code>{result.expected_signal}</code><br>
            <strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> {result.accuracy:.1f}%
        </p>
""")
                
                # –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
                for step in result.steps:
                    f.write(f"""
        <div class="step">
            <h4>–®–∞–≥ {step.step_num}</h4>
            <div class="user-msg">üë§ {escape(step.user_message)}</div>
            <div class="assistant-msg">ü§ñ {escape(step.bot_response)}</div>
            <div class="metrics">
""")
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ –±–µ–π–¥–∂–µ–π
                    status_class = "metric-success" if step.router_status == "success" else "metric-warning"
                    f.write(f'                <span class="metric-badge {status_class}">{step.router_status}</span>\n')
                    f.write(f'                <span class="metric-badge metric-info">{step.source}</span>\n')
                    f.write(f'                <span class="metric-badge metric-info">Signal: {step.user_signal}</span>\n')
                    
                    if step.social_context:
                        f.write(f'                <span class="metric-badge metric-info">üëã {step.social_context}</span>\n')
                    if step.fuzzy_matched:
                        f.write(f'                <span class="metric-badge metric-warning">üîç Fuzzy</span>\n')
                    if step.has_profanity:
                        f.write(f'                <span class="metric-badge metric-error">ü§¨ –ì—Ä—É–±–æ—Å—Ç—å</span>\n')
                    
                    f.write(f'                <span class="metric-badge metric-info">‚è±Ô∏è {step.total_time:.2f}s</span>\n')
                    
                    if step.errors:
                        f.write(f'                <span class="metric-badge metric-error">‚ùå –û—à–∏–±–∫–∞</span>\n')
                    
                    f.write("            </div>\n")
                    f.write("        </div>\n")
                
                f.write("    </div>\n")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            final_analysis = self._generate_final_analysis().replace('\n', '<br>')
            f.write(f"""
    <h2>üìà –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</h2>
    <div class="scenario">
        {final_analysis}
    </div>
</body>
</html>
""")
    
    def _save_json_results(self, output_file: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        data = {
            "timestamp": self.start_time.isoformat(),
            "duration": (self.end_time - self.start_time).total_seconds(),
            "json_file": str(self.json_file),
            "scenarios_count": len(self.scenarios),
            "results": []
        }
        
        for result in self.results:
            scenario_data = {
                "name": result.scenario_name,
                "description": result.description,
                "expected_signal": result.expected_signal,
                "success": result.success,
                "accuracy": result.accuracy,
                "total_time": result.total_time,
                "avg_response_time": result.avg_response_time,
                "errors_count": result.errors_count,
                "steps": []
            }
            
            for step in result.steps:
                scenario_data["steps"].append({
                    "step_num": step.step_num,
                    "user_message": step.user_message,
                    "bot_response": step.bot_response,
                    "router_status": step.router_status,
                    "user_signal": step.user_signal,
                    "source": step.source,
                    "documents": step.documents,
                    "times": {
                        "router": step.router_time,
                        "generator": step.generator_time,
                        "total": step.total_time
                    },
                    "personalized_offer": step.personalized_offer,
                    "tone_adaptation": step.tone_adaptation,
                    "errors": step.errors
                })
            
            data["results"].append(scenario_data)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def _analyze_dialogue(self, result: DialogueResult) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        analysis = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        slow_steps = [s for s in result.steps if s.total_time > 5]
        if slow_steps:
            analysis.append(f"‚ö†Ô∏è {len(slow_steps)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (>5s)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        if result.errors_count > 0:
            analysis.append(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {result.errors_count} –æ—à–∏–±–æ–∫")
        
        # State Machine –∞–Ω–∞–ª–∏–∑
        if result.expected_signal:
            if result.accuracy >= 80:
                analysis.append(f"‚úÖ –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è signal ({result.accuracy:.1f}%)")
            else:
                analysis.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è signal ({result.accuracy:.1f}%)")
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            offers_count = sum(1 for s in result.steps if s.personalized_offer)
            if offers_count > 0:
                analysis.append(f"üí∞ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offers_count}")
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
        social_steps = [s for s in result.steps if s.social_context]
        if social_steps:
            contexts = set(s.social_context for s in social_steps)
            analysis.append(f"üëã –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã: {', '.join(contexts)}")
        
        # Edge cases
        fuzzy_count = sum(1 for s in result.steps if s.fuzzy_matched)
        if fuzzy_count > 0:
            analysis.append(f"üîç Fuzzy matching —Å—Ä–∞–±–æ—Ç–∞–ª {fuzzy_count} —Ä–∞–∑")
        
        profanity_count = sum(1 for s in result.steps if s.has_profanity)
        if profanity_count > 0:
            analysis.append(f"ü§¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {profanity_count}")
        
        return "\n".join(analysis) if analysis else "‚úÖ –î–∏–∞–ª–æ–≥ –ø—Ä–æ—à–µ–ª –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π"
    
    def _generate_final_analysis(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        analysis = []
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_dialogues = len(self.results)
        successful = sum(1 for r in self.results if r.success)
        total_steps = sum(len(r.steps) for r in self.results)
        
        analysis.append(f"### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")
        analysis.append(f"- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_dialogues}")
        analysis.append(f"- –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ({successful/total_dialogues*100:.1f}%)")
        analysis.append(f"- –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {total_steps}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        all_times = [s.total_time for r in self.results for s in r.steps]
        slow_count = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if all_times:
            avg_time = sum(all_times) / len(all_times)
            max_time = max(all_times)
            analysis.append(f"\n### ‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            analysis.append(f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")
            analysis.append(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f}s")
            
            slow_count = sum(1 for t in all_times if t > 5)
            if slow_count > 0:
                analysis.append(f"- ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (>5s): {slow_count} ({slow_count/len(all_times)*100:.1f}%)")
        
        # State Machine –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        state_machine_results = [r for r in self.results if r.expected_signal]
        if state_machine_results:
            analysis.append(f"\n### üéØ State Machine")
            
            # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º
            signal_accuracy = {}
            for result in state_machine_results:
                signal = result.expected_signal
                if signal not in signal_accuracy:
                    signal_accuracy[signal] = []
                signal_accuracy[signal].append(result.accuracy)
            
            for signal, accuracies in signal_accuracy.items():
                avg_acc = sum(accuracies) / len(accuracies)
                analysis.append(f"- {signal}: {avg_acc:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å")
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            total_offers = sum(
                sum(1 for s in r.steps if s.personalized_offer) 
                for r in state_machine_results
            )
            total_sm_steps = sum(len(r.steps) for r in state_machine_results)
            if total_sm_steps > 0:
                analysis.append(f"- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {total_offers}/{total_sm_steps} —à–∞–≥–æ–≤ ({total_offers/total_sm_steps*100:.1f}%)")
        
        # Edge cases
        analysis.append(f"\n### üîç Edge Cases")
        
        fuzzy_total = sum(sum(1 for s in r.steps if s.fuzzy_matched) for r in self.results)
        if fuzzy_total > 0:
            analysis.append(f"- Fuzzy matching: {fuzzy_total} —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π")
        
        profanity_total = sum(sum(1 for s in r.steps if s.has_profanity) for r in self.results)
        if profanity_total > 0:
            analysis.append(f"- –ì—Ä—É–±–æ—Å—Ç—å: {profanity_total} —Å–ª—É—á–∞–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # –û—à–∏–±–∫–∏
        total_errors = sum(r.errors_count for r in self.results)
        if total_errors > 0:
            analysis.append(f"\n### ‚ùå –û—à–∏–±–∫–∏")
            analysis.append(f"- –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
            failed_dialogues = [r.scenario_name for r in self.results if not r.success]
            if failed_dialogues:
                analysis.append(f"- –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏: {', '.join(failed_dialogues)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis.append(f"\n### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        if successful < total_dialogues:
            analysis.append(f"- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ {total_dialogues - successful} –¥–∏–∞–ª–æ–≥–∞—Ö")
        
        if all_times and slow_count > len(all_times) * 0.1:
            analysis.append(f"- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)")
        
        if state_machine_results:
            low_accuracy_signals = [s for s, accs in signal_accuracy.items() if sum(accs)/len(accs) < 70]
            if low_accuracy_signals:
                analysis.append(f"- –£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {', '.join(low_accuracy_signals)}")
        
        if total_errors == 0 and successful == total_dialogues:
            analysis.append(f"- ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        return "\n".join(analysis)

# ====== MAIN ======
async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    if len(sys.argv) < 2:
        print(f"{Colors.RED}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:{Colors.ENDC}")
        print(f"  python universal_tester.py <json_file>")
        print(f"\n{Colors.BOLD}–ü—Ä–∏–º–µ—Ä—ã:{Colors.ENDC}")
        print(f"  python universal_tester.py tests/test_scenarios_diverse.json")
        print(f"  python universal_tester.py tests/test_scenarios_stress.json")
        print(f"  python universal_tester.py tests/test_scenarios_state_machine.json")
        sys.exit(1)
    
    json_file = sys.argv[1]
    
    try:
        tester = UniversalTester(json_file)
        await tester.run_all()
    except FileNotFoundError as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())