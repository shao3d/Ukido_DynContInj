#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
- –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
- –î–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
- –ì—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
"""

import json
import sys
import asyncio
import os
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from src.router import Router
from src.response_generator import ResponseGenerator
from src.history_manager import HistoryManager
from src.social_state import SocialStateManager
from src.standard_responses import get_social_response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
router = Router(use_cache=True)
response_generator = ResponseGenerator()
history_manager = HistoryManager()
social_state = SocialStateManager()

async def process_message(message: str, history: List[Dict], user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π pipeline"""
    # –í—ã–∑—ã–≤–∞–µ–º Router
    router_result = await router.route(message, history, user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Claude –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if router_result.status == "success":
        response = await response_generator.generate(
            questions=router_result.decomposed_questions,
            selected_docs=router_result.selected_documents,
            user_signal=router_result.user_signal,
            original_message=message
        )
        final_response = response
    elif router_result.status == "offtopic":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è offtopic
        final_response = get_social_response(router_result.social_context)
    else:
        # need_simplification
        final_response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑."
    
    return {
        'response': final_response,
        'router_result': router_result
    }

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def load_test_scenarios() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    test_file = Path("tests/test_advanced_dialogues.json")
    
    if not test_file.exists():
        print(f"{Colors.RED}‚ùå –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω{Colors.END}")
        return []
    
    with open(test_file, 'r', encoding='utf-8') as f:
        return json.load(f)

async def run_scenario(scenario: Dict[str, Any], scenario_num: int) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    print(f"\n{Colors.HEADER}{'='*80}")
    print(f"–°–¶–ï–ù–ê–†–ò–ô #{scenario_num}: {scenario['scenario_name'].upper()}")
    print(f"{'='*80}{Colors.END}")
    print(f"{Colors.DIM}{scenario['description']}{Colors.END}")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if 'expected_signal_progression' in scenario:
        print(f"{Colors.DIM}–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: {' ‚Üí '.join(scenario['expected_signal_progression'])}{Colors.END}")
    elif 'expected_signal' in scenario:
        print(f"{Colors.DIM}–û–∂–∏–¥–∞–µ–º—ã–π —Å–∏–≥–Ω–∞–ª: {scenario['expected_signal']}{Colors.END}")
        if 'secondary_signal' in scenario:
            print(f"{Colors.DIM}–í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {scenario['secondary_signal']}{Colors.END}")
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = []
    results = []
    detected_signals = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —à–∞–≥–∞–º
    for i, step in enumerate(scenario['steps'], 1):
        print(f"\n{Colors.BLUE}‚îÅ‚îÅ‚îÅ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(scenario['steps'])} ‚îÅ‚îÅ‚îÅ{Colors.END}")
        print(f"{Colors.BOLD}üë§ User:{Colors.END} {step}")
        
        print(f"{Colors.DIM}‚îÅ‚îÅ‚îÅ Pipeline Start ‚îÅ‚îÅ‚îÅ{Colors.END}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await process_message(
            step, 
            history, 
            user_id=f"test_advanced_{scenario_num}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        if result['router_result'].user_signal:
            detected_signals.append(result['router_result'].user_signal)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "user", "content": step})
        history.append({"role": "assistant", "content": result['response']})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        response_preview = result['response'][:500]
        if len(result['response']) > 500:
            response_preview += "..."
        
        print(f"\n{Colors.GREEN}ü§ñ Bot:{Colors.END} {response_preview}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        router_result = result['router_result']
        print(f"\n{Colors.CYAN}üìä –ê–Ω–∞–ª–∏–∑:{Colors.END}")
        print(f"  ‚Ä¢ Router status: {router_result.status}")
        if router_result.user_signal:
            print(f"  ‚Ä¢ Signal: {router_result.user_signal}")
        if router_result.social_context:
            print(f"  ‚Ä¢ Social: {router_result.social_context}")
        if router_result.decomposed_questions:
            print(f"  ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: {router_result.decomposed_questions[:2]}...")
        
        print(f"{Colors.DIM}{'‚îÄ'*80}{Colors.END}")
        
        results.append({
            'step': i,
            'message': step,
            'signal': router_result.user_signal,
            'status': router_result.status,
            'response_length': len(result['response'])
        })
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\n{Colors.YELLOW}üìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    if 'expected_signal_progression' in scenario:
        expected = scenario['expected_signal_progression']
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        detected_aligned = detected_signals[:len(expected)]
        matches = sum(1 for e, d in zip(expected, detected_aligned) if e == d)
        accuracy = (matches / len(expected)) * 100 if expected else 0
        
        print(f"  ‚Ä¢ –û–∂–∏–¥–∞–ª–æ—Å—å: {' ‚Üí '.join(expected)}")
        print(f"  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ:  {' ‚Üí '.join(detected_signals)}")
        print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏: {accuracy:.0f}%")
        
        if accuracy == 100:
            print(f"  {Colors.GREEN}‚úÖ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ!{Colors.END}")
        elif accuracy >= 80:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ —Ü–µ–ª–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –µ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è{Colors.END}")
        else:
            print(f"  {Colors.RED}‚ùå –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    if len(scenario['steps']) >= 12:
        print(f"  ‚Ä¢ –î–ª–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞: {len(scenario['steps'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
        signal_changes = sum(1 for i in range(1, len(detected_signals)) 
                           if detected_signals[i] != detected_signals[i-1])
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–∞: {signal_changes}")
        
        if signal_changes > 5:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è —Å–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å){Colors.END}")
        else:
            print(f"  {Colors.GREEN}‚úÖ –°–∏–≥–Ω–∞–ª—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã –≤ –¥–ª–∏–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    if 'secondary_signal' in scenario:
        primary = scenario['expected_signal']
        secondary = scenario['secondary_signal']
        has_primary = primary in detected_signals
        has_secondary = secondary in detected_signals
        
        if has_primary and has_secondary:
            print(f"  {Colors.GREEN}‚úÖ –û–±–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {primary} + {secondary}{Colors.END}")
        elif has_primary:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª: {primary}{Colors.END}")
        else:
            print(f"  {Colors.RED}‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Colors.END}")
    
    print(f"\n{Colors.GREEN}‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π #{scenario_num} –∑–∞–≤–µ—Ä—à—ë–Ω{Colors.END}")
    
    return {
        'scenario': scenario['scenario_name'],
        'detected_signals': detected_signals,
        'expected_signals': scenario.get('expected_signal_progression', [scenario.get('expected_signal', 'unknown')]),
        'steps_count': len(scenario['steps']),
        'results': results
    }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print(f"{Colors.BOLD}üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_num = int(sys.argv[1])
        scenarios = load_test_scenarios()
        
        if 1 <= scenario_num <= len(scenarios):
            scenario = scenarios[scenario_num - 1]
            await run_scenario(scenario, scenario_num)
        else:
            print(f"{Colors.RED}‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π #{scenario_num} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(scenarios)}{Colors.END}")
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = load_test_scenarios()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenarios)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n")
        
        all_results = []
        for i, scenario in enumerate(scenarios, 1):
            result = await run_scenario(scenario, i)
            all_results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            if i < len(scenarios):
                print(f"\n{Colors.DIM}–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º...{Colors.END}")
                await asyncio.sleep(2)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{Colors.HEADER}{'='*80}")
        print(f"–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*80}{Colors.END}")
        
        # –ü–æ–¥—Å—á—ë—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        transition_scenarios = [r for r in all_results if len(r['expected_signals']) > 1]
        if transition_scenarios:
            print(f"\n{Colors.CYAN}–ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:{Colors.END}")
            for result in transition_scenarios:
                expected = result['expected_signals']
                detected = result['detected_signals'][:len(expected)]
                matches = sum(1 for e, d in zip(expected, detected) if e == d)
                accuracy = (matches / len(expected)) * 100
                
                status = "‚úÖ" if accuracy >= 80 else "‚ö†Ô∏è" if accuracy >= 60 else "‚ùå"
                print(f"  {status} {result['scenario']}: {accuracy:.0f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–∞–º
        long_dialogues = [r for r in all_results if r['steps_count'] >= 12]
        if long_dialogues:
            print(f"\n{Colors.CYAN}–î–ª–∏–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (12+ —Å–æ–æ–±—â–µ–Ω–∏–π):{Colors.END}")
            for result in long_dialogues:
                print(f"  ‚Ä¢ {result['scenario']}: {result['steps_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print(f"\n{Colors.GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!{Colors.END}")

if __name__ == "__main__":
    asyncio.run(main())