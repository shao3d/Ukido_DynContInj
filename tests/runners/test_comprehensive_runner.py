#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ comprehensive —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import Dict, List
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from social_state import SocialStateManager
from social_intents import detect_social_intent
from config import Config

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'

class ComprehensiveTestRunner:
    def __init__(self):
        self.config = Config()
        self.router = Router()
        self.response_generator = ResponseGenerator()
        self.results = []
        
    async def run_scenario(self, scenario: dict, scenario_num: int) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        history = HistoryManager()
        social_state = SocialStateManager()
        
        print(f"\n{Colors.HEADER}{'='*80}")
        print(f"–°–¶–ï–ù–ê–†–ò–ô #{scenario_num}: {scenario['scenario_name']}")
        print(f"{'='*80}{Colors.ENDC}")
        print(f"{Colors.DIM}–û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}{Colors.ENDC}")
        print(f"{Colors.DIM}–û–∂–∏–¥–∞–µ–º—ã–π —Å–∏–≥–Ω–∞–ª: {scenario['expected_signal']}{Colors.ENDC}")
        print()
        
        scenario_results = {
            "scenario_name": scenario["scenario_name"],
            "description": scenario["description"],
            "expected_signal": scenario["expected_signal"],
            "messages": []
        }
        
        for i, message in enumerate(scenario["steps"], 1):
            print(f"{Colors.BLUE}‚îÄ‚îÄ‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(scenario['steps'])} ‚îÄ‚îÄ‚îÄ{Colors.ENDC}")
            print(f"{Colors.BOLD}üë§ User:{Colors.ENDC} {message}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.add_message("user", message, "test_user")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            social_detection = detect_social_intent(message)
            social_context = social_detection.intent.value if social_detection.intent else None
            
            # –†–æ—É—Ç–µ—Ä
            router_result = await self.router.route(
                user_message=message,
                history=history.get_history("test_user"),
                user_id="test_user"
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            intent = router_result.get("intent") or router_result.get("status")
            
            if intent == "success":
                response = await self.response_generator.generate(
                    questions=router_result.get("questions", []),
                    documents=router_result.get("documents", []),
                    history=history.get_history("test_user"),
                    social_context=social_context,
                    user_signal=router_result.get("user_signal")
                )
            elif intent == "offtopic":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è offtopic
                response = router_result.get("standard_response", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã Ukido. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            else:
                # –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏
                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —à–∫–æ–ª–µ Ukido –∏ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö."
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            print(f"{Colors.GREEN}ü§ñ Bot:{Colors.ENDC} {response}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            print(f"\n{Colors.CYAN}üìä –ê–Ω–∞–ª–∏–∑:{Colors.ENDC}")
            print(f"  ‚Ä¢ Intent: {intent}")
            print(f"  ‚Ä¢ User signal: {router_result.get('user_signal', 'none')}")
            print(f"  ‚Ä¢ Social context: {social_context if social_context else 'none'}")
            if router_result.get("questions"):
                print(f"  ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: {router_result['questions']}")
            if router_result.get("documents"):
                print(f"  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(router_result['documents'])} —à—Ç")
            
            print()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            scenario_results["messages"].append({
                "user": message,
                "response": response,
                "intent": intent,
                "user_signal": router_result.get("user_signal"),
                "social_context": social_context
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.add_message("assistant", response, "test_user")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            await asyncio.sleep(0.1)
        
        return scenario_results
    
    async def run_all(self, test_file: str, start_from: int = 1, count: int = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
        with open(test_file, 'r', encoding='utf-8') as f:
            scenarios = json.load(f)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å
        end_at = start_from + count - 1 if count else len(scenarios)
        end_at = min(end_at, len(scenarios))
        
        print(f"{Colors.HEADER}{'='*80}")
        print(f"–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í: {test_file}")
        print(f"–°—Ü–µ–Ω–∞—Ä–∏–∏: {start_from} - {end_at} –∏–∑ {len(scenarios)}")
        print(f"{'='*80}{Colors.ENDC}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        for i in range(start_from - 1, end_at):
            scenario_result = await self.run_scenario(scenarios[i], i + 1)
            self.results.append(scenario_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"test_results_comprehensive_{timestamp}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\n{Colors.GREEN}‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}{Colors.ENDC}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{Colors.HEADER}{'='*80}")
        print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*80}{Colors.ENDC}")
        
        signal_stats = {}
        intent_stats = {}
        
        for result in self.results:
            for msg in result["messages"]:
                signal = msg.get("user_signal", "none")
                intent = msg.get("intent", "unknown")
                signal_stats[signal] = signal_stats.get(signal, 0) + 1
                intent_stats[intent] = intent_stats.get(intent, 0) + 1
        
        print(f"\n{Colors.CYAN}User Signals:{Colors.ENDC}")
        for signal, count in signal_stats.items():
            print(f"  ‚Ä¢ {signal}: {count}")
        
        print(f"\n{Colors.CYAN}Intents:{Colors.ENDC}")
        for intent, count in intent_stats.items():
            print(f"  ‚Ä¢ {intent}: {count}")

async def main():
    runner = ComprehensiveTestRunner()
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(sys.argv) > 1:
        if sys.argv[1] == "--all":
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            await runner.run_all("tests/test_comprehensive_dialogues.json")
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            try:
                scenario_num = int(sys.argv[1])
                await runner.run_all("tests/test_comprehensive_dialogues.json", 
                                   start_from=scenario_num, count=1)
            except ValueError:
                print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
                print("  python test_comprehensive_runner.py 1  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π 1")
                print("  python test_comprehensive_runner.py --all  # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        await runner.run_all("tests/test_comprehensive_dialogues.json", 
                           start_from=1, count=1)

if __name__ == "__main__":
    asyncio.run(main())