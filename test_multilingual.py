#!/usr/bin/env python3
"""
test_multilingual.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
–í–µ—Ä—Å–∏—è 2.0: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


async def test_multilingual():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    test_cases = [
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        {
            "user_id": "test_uk_1",
            "message": "–ü—Ä–∏–≤—ñ—Ç! –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –≤–∞—à—É —à–∫–æ–ª—É",
            "expected_lang": "uk",
            "description": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ"
        },
        {
            "user_id": "test_uk_2",
            "message": "–Ø–∫—ñ –∫—É—Ä—Å–∏ —É –≤–∞—Å —î –¥–ª—è –¥—ñ—Ç–µ–π 10 —Ä–æ–∫—ñ–≤?",
            "expected_lang": "uk",
            "description": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö"
        },
        {
            "user_id": "test_uk_3",
            "message": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –Ω–∞–≤—á–∞–Ω–Ω—è?",
            "expected_lang": "uk",
            "description": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ"
        },
        {
            "user_id": "test_uk_4",
            "message": "–î—è–∫—É—é –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
            "expected_lang": "uk",
            "description": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
        },
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        {
            "user_id": "test_en_1",
            "message": "Hello! Tell me about your school",
            "expected_lang": "en",
            "description": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ"
        },
        {
            "user_id": "test_en_2",
            "message": "What courses do you have for kids?",
            "expected_lang": "en",
            "description": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö"
        },
        {
            "user_id": "test_en_3",
            "message": "How much does it cost?",
            "expected_lang": "en",
            "description": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ"
        },
        {
            "user_id": "test_en_4",
            "message": "Thanks for the information",
            "expected_lang": "en",
            "description": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
        },
        
        # –†—É—Å—Å–∫–∏–π (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞)
        {
            "user_id": "test_ru_1",
            "message": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ",
            "expected_lang": "ru",
            "description": "–†—É—Å—Å–∫–∏–π: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–æ–ø—Ä–æ—Å –æ —à–∫–æ–ª–µ"
        },
        {
            "user_id": "test_ru_2",
            "message": "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã —É –≤–∞—Å –µ—Å—Ç—å?",
            "expected_lang": "ru",
            "description": "–†—É—Å—Å–∫–∏–π: –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö"
        },
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
        {
            "user_id": "test_mix_1",
            "message": "–ü—Ä–∏–≤–µ—Ç! What about soft skills –∫—É—Ä—Å—ã?",
            "expected_lang": "en",  # –û–∂–∏–¥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–∑-–∑–∞ –ª–∞—Ç–∏–Ω–∏—Ü—ã
            "description": "–°–º–µ—à–∞–Ω–Ω—ã–π: —Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
        },
        {
            "user_id": "test_mix_2",
            "message": "–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –†–æ–∑–∫–∞–∂—ñ—Ç—å about Ukido",
            "expected_lang": "uk",  # –û–∂–∏–¥–∞–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∏–∑-–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤
            "description": "–°–º–µ—à–∞–Ω–Ω—ã–π: —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
        },
        
        # Edge cases
        {
            "user_id": "test_emoji_1",
            "message": "üëç",
            "expected_lang": "ru",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–º–æ–¥–∑–∏
            "description": "Edge case: —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏"
        },
        {
            "user_id": "test_short_1",
            "message": "OK",
            "expected_lang": "en",  # –õ–∞—Ç–∏–Ω–∏—Ü–∞
            "description": "Edge case: –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
        },
        {
            "user_id": "test_short_2",
            "message": "–¢–∞–∫",
            "expected_lang": "uk",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ä—É—Å—Å–∫–∏–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º
            "description": "Edge case: –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"
        },
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞)
        {
            "user_id": "test_seq_uk",
            "message": "–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Ü—ñ–Ω–∏",
            "expected_lang": "uk",
            "description": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1/2: —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"
        },
        {
            "user_id": "test_seq_uk",
            "message": "–ê –∑–Ω–∏–∂–∫–∏ —î?",
            "expected_lang": "uk",  # –î–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            "description": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 2/2: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"
        },
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "total": len(test_cases),
        "passed": 0,
        "failed": 0,
        "errors": 0,
        "by_language": {
            "uk": {"total": 0, "detected": 0},
            "en": {"total": 0, "detected": 0},
            "ru": {"total": 0, "detected": 0}
        }
    }
    
    print(f"\n{Colors.HEADER}{'='*60}")
    print(f"üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–°–¢–ò v2.0")
    print(f"{'='*60}{Colors.ENDC}\n")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}\n")
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        for i, test in enumerate(test_cases, 1):
            print(f"{Colors.BOLD}–¢–µ—Å—Ç {i}/{stats['total']}: {test['description']}{Colors.ENDC}")
            print(f"  User: {test['user_id']}")
            print(f"  Message: {test['message']}")
            print(f"  Expected language: {test['expected_lang']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
            stats["by_language"][test["expected_lang"]]["total"] += 1
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await client.post(
                    "http://localhost:8000/chat",
                    json={
                        "user_id": test["user_id"],
                        "message": test["message"]
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º detected_language –∏–∑ metadata –∏–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    detected_lang = result.get("detected_language", "unknown")
                    if detected_lang == "unknown" and "metadata" in result:
                        detected_lang = result["metadata"].get("detected_language", "unknown")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if detected_lang == test["expected_lang"]:
                        print(f"  {Colors.OKGREEN}‚úÖ PASSED: –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {detected_lang}{Colors.ENDC}")
                        stats["passed"] += 1
                        stats["by_language"][test["expected_lang"]]["detected"] += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
                        if detected_lang != "ru":
                            if "translated_to" in result or (
                                "metadata" in result and "translated_to" in result["metadata"]
                            ):
                                print(f"  {Colors.OKCYAN}   ‚úì –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ {detected_lang}{Colors.ENDC}")
                            else:
                                print(f"  {Colors.WARNING}   ‚ö† –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–Ω–æ —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω){Colors.ENDC}")
                    else:
                        print(f"  {Colors.FAIL}‚ùå FAILED: –û–∂–∏–¥–∞–ª—Å—è {test['expected_lang']}, –ø–æ–ª—É—á–µ–Ω {detected_lang}{Colors.ENDC}")
                        stats["failed"] += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
                    response_text = result.get("response", "")[:100]
                    print(f"  Response preview: {response_text}...")
                    
                else:
                    print(f"  {Colors.FAIL}‚ùå ERROR: HTTP {response.status_code}{Colors.ENDC}")
                    stats["errors"] += 1
                    
            except Exception as e:
                print(f"  {Colors.FAIL}‚ùå EXCEPTION: {e}{Colors.ENDC}")
                stats["errors"] += 1
            
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{Colors.HEADER}{'='*60}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}{Colors.ENDC}\n")
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
    print(f"{Colors.OKGREEN}‚úÖ Passed: {stats['passed']}{Colors.ENDC}")
    print(f"{Colors.FAIL}‚ùå Failed: {stats['failed']}{Colors.ENDC}")
    print(f"{Colors.WARNING}‚ö†Ô∏è  Errors: {stats['errors']}{Colors.ENDC}")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_rate = (stats['passed'] / stats['total'] * 100) if stats['total'] > 0 else 0
    color = Colors.OKGREEN if success_rate >= 80 else Colors.WARNING if success_rate >= 60 else Colors.FAIL
    print(f"\n{color}–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%{Colors.ENDC}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
    print(f"\n{Colors.HEADER}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:{Colors.ENDC}")
    for lang, data in stats["by_language"].items():
        if data["total"] > 0:
            detection_rate = (data["detected"] / data["total"] * 100)
            print(f"  {lang.upper()}: {data['detected']}/{data['total']} ({detection_rate:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n{Colors.HEADER}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Colors.ENDC}")
    if success_rate >= 80:
        print(f"{Colors.OKGREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!{Colors.ENDC}")
    elif success_rate >= 60:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏{Colors.ENDC}")
    else:
        print(f"{Colors.FAIL}‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å—ë–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏{Colors.ENDC}")
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if stats["failed"] > 0 or stats["errors"] > 0:
        print(f"\n{Colors.WARNING}–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:{Colors.ENDC}")
        print("- GPT-4o Mini –º–æ–∂–µ—Ç –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π")
        print("- –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–µ—Ç–æ—á–Ω–æ")
        print("- –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ–≤–µ—Ä–Ω–æ")


if __name__ == "__main__":
    print(f"{Colors.OKCYAN}üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏...{Colors.ENDC}")
    print(f"{Colors.WARNING}‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000{Colors.ENDC}")
    
    try:
        asyncio.run(test_multilingual())
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")