#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π)
MVP –≤–µ—Ä—Å–∏—è –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import json
import httpx
from datetime import datetime
from typing import Dict, List, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000/chat"
TIMEOUT = 30.0

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–∂–∏–¥–∞–µ–º—ã–º —è–∑—ã–∫–æ–º –æ—Ç–≤–µ—Ç–∞
TEST_CASES: List[Tuple[str, str, str]] = [
    # (—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫, –æ–ø–∏—Å–∞–Ω–∏–µ)
    
    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
    ("–ü—Ä–∏–≤—ñ—Ç! –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –≤–∞—à—É —à–∫–æ–ª—É", "uk", "–£–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    ("–Ø–∫—ñ –∫—É—Ä—Å–∏ —É –≤–∞—Å —î –¥–ª—è –¥—ñ—Ç–µ–π 10 —Ä–æ–∫—ñ–≤?", "uk", "–í–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"),
    ("–î—è–∫—É—é –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", "uk", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"),
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    ("Hello! Tell me about your school", "en", "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    ("What courses do you have for 10 year olds?", "en", "–í–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
    ("Thanks for the information", "en", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
    
    # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    ("–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ", "ru", "–†—É—Å—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    ("–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç?", "ru", "–í–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º"),
    ("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "ru", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º"),
    
    # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ (–¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    ("Hi, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–Ω–∞—Ö", "ru", "–°–º–µ—à–∞–Ω–Ω—ã–π en+ru ‚Üí —Ä—É—Å—Å–∫–∏–π"),
    ("Hello, —è–∫—ñ —É –≤–∞—Å –∫—É—Ä—Å–∏?", "uk", "–°–º–µ—à–∞–Ω–Ω—ã–π en+uk ‚Üí —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π"),
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
    ("–ü—Ä–∏–≤–µ—Ç! –ê —Ç–µ–ø–µ—Ä—å Hello!", "en", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ru‚Üíen"),
    ("Hello! –ê —Ç–µ–ø–µ—Ä –ø—Ä–∏–≤—ñ—Ç!", "uk", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ en‚Üíuk"),
]

def detect_response_language(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º –∏ —Å–ª–æ–≤–∞–º"""
    text_lower = text.lower()
    
    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    uk_chars = ['—ñ', '—ó', '—î', '“ë']
    uk_words = ['–ø—Ä–∏–≤—ñ—Ç', '–¥—è–∫—É—é', '–≤–∞—à', '–Ω–∞—à', '–¥–ª—è', '–¥—ñ—Ç–µ–π', '—à–∫–æ–ª–∞']
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ)
    latin_count = sum(1 for c in text if 'a' <= c.lower() <= 'z')
    total_alpha = sum(1 for c in text if c.isalpha())
    
    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
    has_uk_chars = any(char in text for char in uk_chars)
    has_uk_words = any(word in text_lower for word in uk_words)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    if has_uk_chars or has_uk_words:
        return "uk"
    elif total_alpha > 0 and latin_count / total_alpha > 0.8:
        return "en"
    else:
        return "ru"

async def test_message(user_id: str, message: str) -> Dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.post(
                API_URL,
                json={"user_id": user_id, "message": message}
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {"error": str(e)}

def print_result(test_case: Tuple[str, str, str], response: Dict, detected_lang: str):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    message, expected_lang, description = test_case
    success = detected_lang == expected_lang
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    GREEN = "\033[92m"
    RED = "\033[91m"
    YELLOW = "\033[93m"
    RESET = "\033[0m"
    BOLD = "\033[1m"
    
    # –°–∏–º–≤–æ–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    status = f"{GREEN}‚úì{RESET}" if success else f"{RED}‚úó{RESET}"
    
    print(f"\n{status} {BOLD}{description}{RESET}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫: {expected_lang}")
    print(f"   –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫: {detected_lang}")
    
    if "response" in response:
        response_preview = response["response"][:100].replace("\n", " ")
        print(f"   –û—Ç–≤–µ—Ç: {response_preview}...")
    
    if not success:
        print(f"   {RED}–û–®–ò–ë–ö–ê: –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É!{RESET}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if "intent" in response:
        print(f"   Intent: {response.get('intent')}")
    if "user_signal" in response:
        print(f"   User signal: {response.get('user_signal')}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò")
    print("=" * 60)
    print(f"API URL: {API_URL}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {len(TEST_CASES)}")
    print("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total = len(TEST_CASES)
    passed = 0
    failed = 0
    errors = 0
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π user_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    base_user_id = f"test_multilingual_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    for i, test_case in enumerate(TEST_CASES, 1):
        message, expected_lang, description = test_case
        user_id = f"{base_user_id}_{i}"
        
        print(f"\n[{i}/{total}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await test_message(user_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if "error" in response:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê API: {response['error']}")
            errors += 1
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
        if "response" in response:
            detected_lang = detect_response_language(response["response"])
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print_result(test_case, response, detected_lang)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if detected_lang == expected_lang:
                passed += 1
            else:
                failed += 1
        else:
            print(f"   ‚ùå –ù–µ—Ç –ø–æ–ª—è 'response' –≤ –æ—Ç–≤–µ—Ç–µ API")
            errors += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    GREEN = "\033[92m"
    RED = "\033[91m"
    YELLOW = "\033[93m"
    RESET = "\033[0m"
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"{GREEN}–£—Å–ø–µ—à–Ω–æ: {passed}{RESET}")
    print(f"{RED}–ù–µ—É–¥–∞—á–Ω–æ: {failed}{RESET}")
    print(f"{YELLOW}–û—à–∏–±–∫–∏: {errors}{RESET}")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
    if total > 0:
        success_rate = (passed / total) * 100
        color = GREEN if success_rate >= 80 else YELLOW if success_rate >= 60 else RED
        print(f"\n–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {color}{success_rate:.1f}%{RESET}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if success_rate < 80:
        print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LLM –º–æ–¥–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –Ω—É–∂–Ω—ã–µ —è–∑—ã–∫–∏")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    elif success_rate == 100:
        print("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())