"""
standard_responses.py - Единое место для всех заготовленных ответов системы
"""

import random
from config import Config

# Устанавливаем seed для детерминированности
config = Config()
random.seed(config.SEED)

# Единый fallback для всех ошибок и неопределённых ситуаций
DEFAULT_FALLBACK = "Не совсем понял вопрос. Расскажите, что вас интересует о школе Ukido?"

# Ответы для офтопик вопросов (экономим токены, не генерируем через LLM)
OFFTOPIC_RESPONSES = [
    "Интересный вопрос! Но давайте вернёмся к теме школы Ukido. Чем могу помочь?",
    "Это выходит за рамки моей компетенции. Расскажу лучше о наших курсах?",
    "Давайте сосредоточимся на развитии soft skills для детей. Что вас интересует?",
    "Я специализируюсь на вопросах о школе Ukido. Какую информацию подсказать?",
    "Предлагаю вернуться к теме обучения. Рассказать о программах или ценах?",
    "Это не моя область. Могу рассказать о курсах, преподавателях или методиках.",
    "Давайте обсудим что-то связанное со школой. Что именно интересует?",
]

# Ответ для need_simplification (слишком много вопросов)
NEED_SIMPLIFICATION_MESSAGE = "Пожалуйста, задавайте не более трёх вопросов за раз. Например, начните с самого важного для вас."

# Ответы при технических ошибках
ERROR_RESPONSES = {
    "generation_failed": "Извините, не могу ответить сейчас. Попробуйте переформулировать вопрос.",
    "timeout": "Превышено время ожидания. Попробуйте ещё раз.",
    "invalid_response": "Получен некорректный ответ. Переформулируйте вопрос.",
}

def get_offtopic_response() -> str:
    """Возвращает случайный ответ для офтопика"""
    return random.choice(OFFTOPIC_RESPONSES)

def get_error_response(error_type: str = "default") -> str:
    """Возвращает ответ для конкретного типа ошибки"""
    return ERROR_RESPONSES.get(error_type, DEFAULT_FALLBACK)