"""
openrouter_client.py - –ö–ª–∏–µ–Ω—Ç –¥–ª—è OpenRouter API
MVP –≤–µ—Ä—Å–∏—è: –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
"""

import httpx
from typing import List, Dict, Optional, Any

class OpenRouterClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""
    
    def __init__(self, api_key: str, seed: int = None, max_tokens: int = None, temperature: float = 0.3, model: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å API –∫–ª—é—á–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.api_key = api_key
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        self.model = model or "google/gemini-2.5-flash"
        self.seed = seed
        self.max_tokens = max_tokens
        self.temperature = temperature
    
    async def chat(self, messages: List[Dict[str, str]], *, model: Optional[str] = None, temperature: Optional[float] = None, max_tokens: Optional[int] = None, seed: Optional[int] = None, response_format: Optional[Dict[str, Any]] = None, top_p: Optional[float] = None, frequency_penalty: Optional[float] = None, presence_penalty: Optional[float] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            messages: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ [{"role": "user", "content": "..."}]
        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data: Dict[str, Any] = {
            "model": model or self.model,
            "messages": messages,
            "temperature": self.temperature if temperature is None else temperature,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
        if seed is not None:
            data["seed"] = seed
        elif self.seed is not None:
            data["seed"] = self.seed
        if max_tokens is not None:
            data["max_tokens"] = max_tokens
        elif self.max_tokens is not None:
            data["max_tokens"] = self.max_tokens
        if response_format is not None:
            data["response_format"] = response_format
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if top_p is not None:
            data["top_p"] = top_p
        if frequency_penalty is not None:
            data["frequency_penalty"] = frequency_penalty
        if presence_penalty is not None:
            data["presence_penalty"] = presence_penalty
        
        try:
            async with httpx.AsyncClient() as client:
                print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter: {data.get('model')}")
                print(f"üîç –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")
                
                response = await client.post(
                    self.api_url,
                    headers=headers,
                    json=data,
                    timeout=30.0
                )
                
                print(f"üîç HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
                if response.status_code != 200:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞ {response.status_code}: {response.text[:500]}")
                    return ""
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                result = response.json()
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                if "choices" in result and len(result["choices"]) > 0:
                    choice = result["choices"][0]
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content = None
                    
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç OpenAI
                    if "message" in choice and "content" in choice["message"]:
                        content = choice["message"]["content"]
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏)
                    elif "text" in choice:
                        content = choice["text"]
                    # –ü—Ä—è–º–æ–π content –≤ choice
                    elif "content" in choice:
                        content = choice["content"]
                    
                    if not content or content.strip() == "":
                        print("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π content")
                        print(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ choices[0]: {choice}")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è streaming –æ—Ç–≤–µ—Ç–æ–≤
                        if "delta" in choice and "content" in choice["delta"]:
                            content = choice["delta"]["content"]
                    else:
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content or ""
                else:
                    print("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª choices")
                    print(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(result.keys())}")
                    return ""
                    
        except httpx.TimeoutException:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"