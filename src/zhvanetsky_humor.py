"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–º–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ú–∏—Ö–∞–∏–ª–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –¥–ª—è offtopic –∑–∞–ø—Ä–æ—Å–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Claude Haiku –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∑–æ–ª–æ—Ç–æ–≥–æ –∑–∞–ø–∞—Å–∞ –ø—Ä–∏–º–µ—Ä–æ–≤.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime

try:
    from zhvanetsky_golden import get_mixed_examples, format_examples_for_prompt
    from zhvanetsky_safety import SafetyChecker, TopicClassifier
    from zhvanetsky_online_examples import get_online_examples
except ImportError:
    # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞
    from .zhvanetsky_golden import get_mixed_examples, format_examples_for_prompt
    from .zhvanetsky_safety import SafetyChecker, TopicClassifier
    try:
        from .zhvanetsky_online_examples import get_online_examples
    except ImportError:
        def get_online_examples(count=3):
            return []

logger = logging.getLogger(__name__)


class ZhvanetskyGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —é–º–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ."""
    
    HUMOR_PROMPT_TEMPLATE = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–µ—Ç—Å–∫–æ–π –û–ù–õ–ê–ô–ù —à–∫–æ–ª—ã soft skills Ukido.
–í–ê–ñ–ù–û: –®–∫–æ–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–û–õ–ù–û–°–¢–¨–Æ –û–ù–õ–ê–ô–ù —á–µ—Ä–µ–∑ Zoom, –æ—Ñ–∏—Å –≤ –ö–∏–µ–≤–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{dialogue_context}

–†–æ–¥–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª –Ω–µ –ø–æ —Ç–µ–º–µ —à–∫–æ–ª—ã: "{message}"

üö® –ö–†–ò–¢–ò–ß–ù–û: –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –†–û–í–ù–û 2 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø! –ù–ï 3, –ù–ï 4 - –†–û–í–ù–û 2!

–°–£–¢–¨ –°–¢–ò–õ–Ø –ñ–í–ê–ù–ï–¶–ö–û–ì–û:
–ñ–≤–∞–Ω–µ—Ü–∫–∏–π –ù–ï —à—É—Ç–∏—Ç –∫–∞–ª–∞–º–±—É—Ä–∞–º–∏. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø–∞—Ä–∞–¥–æ–∫—Å –≤ –æ–±—ã–¥–µ–Ω–Ω–æ–º.
–ï–≥–æ —é–º–æ—Ä - —ç—Ç–æ –≥–æ—Ä—å–∫–∞—è –ø—Ä–∞–≤–¥–∞ –∂–∏–∑–Ω–∏, —Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å –ª—é–±–æ–≤—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–ö–ê–ö –°–û–ó–î–ê–¢–¨ –û–¢–í–ï–¢ –í –°–¢–ò–õ–ï –ñ–í–ê–ù–ï–¶–ö–û–ì–û:

1. –ù–∞–π–¥–∏ –ü–ê–†–ê–î–û–ö–° –≤ –≤–æ–ø—Ä–æ—Å–µ "{message}":
   - –ß—Ç–æ –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∞–≤–¥–∞ –∏ –∞–±—Å—É—Ä–¥?
   - –ö–∞–∫–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ —ç—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç?
   - –ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –≤–µ—á–Ω–æ–π –±–æ—Ä—å–±–æ–π —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞ –±—É–¥—É—â–µ–µ –¥–µ—Ç–µ–π?

2. –í—ã—Ä–∞–∑–∏ —á–µ—Ä–µ–∑ –ö–û–ù–ö–†–ï–¢–ù–´–ô –û–ë–†–ê–ó –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è:
   - –ù–ï –æ–±—ä—è—Å–Ω—è–π —à—É—Ç–∫—É, –∞ –Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω—É
   - –ò—Å–ø–æ–ª—å–∑—É–π –°–í–ï–ñ–ò–ï –¥–µ—Ç–∞–ª–∏: –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ mute –∫–∞–∫ –Ω–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, —Ñ–æ–Ω –∫–∞–∫ —Å—Ç–∞—Ç—É—Å
   - –ü–æ–∫–∞–∂–∏ –∞–±—Å—É—Ä–¥ —á–µ—Ä–µ–∑ –ù–û–í–£–Æ –æ–±—ã–¥–µ–Ω–Ω–æ—Å—Ç—å, –Ω–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤

–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:
‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ "X? –£ –Ω–∞—Å Y - —Ç–æ–∂–µ X, —Ç–æ–ª—å–∫–æ..."
‚ùå –§—Ä–∞–∑—ã "–ú—ã —É—á–∏–º/—Ä–∞–∑–≤–∏–≤–∞–µ–º/–≥–æ—Ç–æ–≤–∏–º"
‚ùå –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "soft skills", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ", "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"
‚ùå –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –æ–±–æ–±—â–µ–Ω–∏—è –∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤, –ø–µ—Ä–µ–º–µ–Ω, –∫–ª–∞—Å—Å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ —à–∫–æ–ª–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ò–ó–ë–ï–ì–ê–ô –≠–¢–ò–• –ó–ê–ï–ó–ñ–ï–ù–ù–´–• –ö–õ–ò–®–ï:
‚õî –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∫–æ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Ä–æ–∫–∞
‚õî –ù–ï –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ —Ä–µ–±—ë–Ω–∫–∞ –≤ –ø–∏–∂–∞–º–µ –Ω–∞ —É—Ä–æ–∫–µ
‚õî –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—É "—Å–º–æ—Ç—Ä–∏—Ç –≤ —ç–∫—Ä–∞–Ω"
‚õî –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π —à—É—Ç–∫–∏ –ø—Ä–æ "–≤—Å–µ –¥–µ–ª–∞—é—Ç –≤–∏–¥ —á—Ç–æ..."
‚õî –ù–∞–π–¥–∏ –ù–û–í–´–ô –ø–∞—Ä–∞–¥–æ–∫—Å, –∫–æ—Ç–æ—Ä–æ–≥–æ –ù–ï–¢ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö!

–¢–†–ï–ë–£–ï–¢–°–Ø:
‚úÖ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø–∞—Ä–∞–¥–æ–∫—Å —á–µ—Ä–µ–∑ –±—ã—Ç–æ–≤—É—é –¥–µ—Ç–∞–ª—å
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—Ä–∞–∑, –∞ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è 
‚úÖ –ì–æ—Ä—å–∫–∞—è –ø—Ä–∞–≤–¥–∞ —Å –ª—é–±–æ–≤—å—é –∫ –∂–∏–∑–Ω–∏
‚úÖ –ú–ê–ö–°–ò–ú–£–ú 2 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø! –ù–ï –ë–û–õ–¨–®–ï! –†–û–í–ù–û 2!
‚úÖ –í–°–ï–ì–î–ê –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "–≤—ã" –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
‚úÖ –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –º—ã—Å–ª—å —Å —Ç–æ—á–∫–æ–π

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ô –ö–†–ê–¢–ö–û–°–¢–ò –ò –ù–û–í–ò–ó–ù–´:
"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ–Ω–ª–∞–π–Ω, —á—Ç–æ–±—ã —É—á–∏—Ç—å—Å—è –æ—Ñ–ª–∞–π–Ω –æ—Ç —ç–∫—Ä–∞–Ω–∞. –õ–æ–≥–∏–∫–∞ –∂–µ–ª–µ–∑–Ω–∞—è."
"–£—á–∏–º –¥–µ—Ç–µ–π –±—É–¥—É—â–µ–º—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–∞–º–∏ –±–æ–∏–º—Å—è. –ù–æ —É–≤–µ—Ä–µ–Ω–Ω–æ —É—á–∏–º."
"–†–µ–±—ë–Ω–æ–∫ –∑–Ω–∞–µ—Ç 5 —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –∑–∞–≤—è–∑–∞—Ç—å —à–Ω—É—Ä–∫–∏. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã."

–¢–≤–æ–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –≤–æ–ø—Ä–æ—Å):
{examples}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
‚ö†Ô∏è –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —à—É—Ç–∫–∏ - –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ!
‚ö†Ô∏è –ù–ï –ø–∏—à–∏ "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç:", –ù–ï –¥–æ–±–∞–≤–ª—è–π –≥–∞–ª–æ—á–∫–∏ ‚úÖ, –ù–ï –æ–±—ä—è—Å–Ω—è–π —Å–≤–æ—é –ª–æ–≥–∏–∫—É
‚ö†Ô∏è –ù–ï –∑–∞–∫–ª—é—á–∞–π –æ—Ç–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∏
‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —à—É—Ç–∫—É –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –∏ –í–°–Å!

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–¢–û–õ–¨–ö–û —à—É—Ç–∫–∞, –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö):"""

    def __init__(self, client=None, config=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è Claude Haiku
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.client = client
        self.config = config
        self.safety_checker = SafetyChecker()
        self.topic_classifier = TopicClassifier()
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.total_generated = 0
        self.successful_generated = 0
        self.total_generation_time = 0.0
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        from collections import defaultdict
        self.used_examples_per_user = defaultdict(set)  # user_id -> set of used example indices
        self.last_humor_per_user = defaultdict(list)     # user_id -> list of last 3 generated humors
    
    def _extract_dialogue_context(self, history: List[Dict], limit: int = 5) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            limit: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        if not history:
            return "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, —Ä–æ–¥–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –∑–∞—à—ë–ª."
        
        recent = history[-limit:] if len(history) >= limit else history
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–∞—Ç–∏–∫—É
        topics_discussed = []
        questions_count = 0
        
        for msg in recent:
            if msg.get('role') == 'user':
                content = msg.get('content', '')
                if '?' in content:
                    questions_count += 1
                
                # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
                if any(word in content.lower() for word in ['–∫—É—Ä—Å', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∑–∞–Ω—è—Ç–∏']):
                    topics_discussed.append('–∫—É—Ä—Å—ã')
                elif any(word in content.lower() for word in ['—Ü–µ–Ω', '—Å—Ç–æ–∏', '—Å–∫–∏–¥–∫']):
                    topics_discussed.append('—Ü–µ–Ω—ã')
                elif any(word in content.lower() for word in ['—É—á–∏—Ç–µ–ª', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç', '–ø–µ–¥–∞–≥–æ–≥']):
                    topics_discussed.append('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context_parts = []
        
        if questions_count == 0:
            context_parts.append("–†–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —à–∫–æ–ª–µ")
        elif questions_count == 1:
            context_parts.append("–†–æ–¥–∏—Ç–µ–ª—å –∑–∞–¥–∞–ª –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
        else:
            context_parts.append(f"–†–æ–¥–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, –∑–∞–¥–∞–ª {questions_count} –≤–æ–ø—Ä–æ—Å–∞")
        
        if topics_discussed:
            context_parts.append(f"–æ–±—Å—É–∂–¥–∞–ª–∏: {', '.join(set(topics_discussed))}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        mood = self.safety_checker.analyze_dialogue_mood(history)
        if mood == 'positive':
            context_parts.append("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ")
        elif mood == 'neutral':
            context_parts.append("—Å–ø–æ–∫–æ–π–Ω—ã–π —Ç–æ–Ω")
        
        return ". ".join(context_parts) + "."
    
    def _extract_key_words(self, message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –≥–ª–∞–≥–æ–ª–æ–≤
        import re
        words = re.findall(r'\b[–∞-—è–ê-–Ø—ë–Åa-zA-Z]{3,}\b', message)
        return ', '.join(words[:3]) if words else message[:20]
    
    def _get_time_context(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        from datetime import datetime
        hour = datetime.now().hour
        if 6 <= hour < 12:
            return "—É—Ç—Ä–æ"
        elif 12 <= hour < 18:
            return "–¥–µ–Ω—å"
        elif 18 <= hour < 23:
            return "–≤–µ—á–µ—Ä"
        else:
            return "–Ω–æ—á—å"
    
    def _convert_to_formal(self, text: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ "—Ç—ã" –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ "–≤—ã".
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            
        Returns:
            –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
        """
        import re
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–∞–¥–µ–∂–µ–π –∏ —Ñ–æ—Ä–º
        replacements = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
            r'\b—Ç—ã\b': '–≤—ã',
            r'\b–¢—ã\b': '–í—ã',
            r'\b—Ç–µ–±—è\b': '–≤–∞—Å',
            r'\b–¢–µ–±—è\b': '–í–∞—Å',
            r'\b—Ç–µ–±–µ\b': '–≤–∞–º',
            r'\b–¢–µ–±–µ\b': '–í–∞–º',
            r'\b—Ç–æ–±–æ–π\b': '–≤–∞–º–∏',
            r'\b–¢–æ–±–æ–π\b': '–í–∞–º–∏',
            r'\b—Ç–æ–±–æ—é\b': '–≤–∞–º–∏',
            r'\b–¢–æ–±–æ—é\b': '–í–∞–º–∏',
            
            # –ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
            r'\b—Ç–≤–æ–π\b': '–≤–∞—à',
            r'\b–¢–≤–æ–π\b': '–í–∞—à',
            r'\b—Ç–≤–æ—è\b': '–≤–∞—à–∞',
            r'\b–¢–≤–æ—è\b': '–í–∞—à–∞',
            r'\b—Ç–≤–æ—ë\b': '–≤–∞—à–µ',
            r'\b–¢–≤–æ—ë\b': '–í–∞—à–µ',
            r'\b—Ç–≤–æ–µ\b': '–≤–∞—à–µ',
            r'\b–¢–≤–æ–µ\b': '–í–∞—à–µ',
            r'\b—Ç–≤–æ–∏\b': '–≤–∞—à–∏',
            r'\b–¢–≤–æ–∏\b': '–í–∞—à–∏',
            
            # –°–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã—Ö
            r'\b—Ç–≤–æ–µ–≥–æ\b': '–≤–∞—à–µ–≥–æ',
            r'\b–¢–≤–æ–µ–≥–æ\b': '–í–∞—à–µ–≥–æ',
            r'\b—Ç–≤–æ–µ–π\b': '–≤–∞—à–µ–π',
            r'\b–¢–≤–æ–µ–π\b': '–í–∞—à–µ–π',
            r'\b—Ç–≤–æ–∏—Ö\b': '–≤–∞—à–∏—Ö',
            r'\b–¢–≤–æ–∏—Ö\b': '–í–∞—à–∏—Ö',
            r'\b—Ç–≤–æ–µ–º—É\b': '–≤–∞—à–µ–º—É',
            r'\b–¢–≤–æ–µ–º—É\b': '–í–∞—à–µ–º—É',
            r'\b—Ç–≤–æ–∏–º\b': '–≤–∞—à–∏–º',
            r'\b–¢–≤–æ–∏–º\b': '–í–∞—à–∏–º',
            r'\b—Ç–≤–æ–∏–º–∏\b': '–≤–∞—à–∏–º–∏',
            r'\b–¢–≤–æ–∏–º–∏\b': '–í–∞—à–∏–º–∏',
            
            # –ì–ª–∞–≥–æ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã (—Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ)
            r'\b—Å–ª—É—à–∞–π\b': '—Å–ª—É—à–∞–π—Ç–µ',
            r'\b–°–ª—É—à–∞–π\b': '–°–ª—É—à–∞–π—Ç–µ',
            r'\b—Å–º–æ—Ç—Ä–∏\b': '—Å–º–æ—Ç—Ä–∏—Ç–µ',
            r'\b–°–º–æ—Ç—Ä–∏\b': '–°–º–æ—Ç—Ä–∏—Ç–µ',
            r'\b–∑–Ω–∞–µ—à—å\b': '–∑–Ω–∞–µ—Ç–µ',
            r'\b–ó–Ω–∞–µ—à—å\b': '–ó–Ω–∞–µ—Ç–µ',
            r'\b–ø–æ–Ω–∏–º–∞–µ—à—å\b': '–ø–æ–Ω–∏–º–∞–µ—Ç–µ',
            r'\b–ü–æ–Ω–∏–º–∞–µ—à—å\b': '–ü–æ–Ω–∏–º–∞–µ—Ç–µ',
            r'\b–¥—É–º–∞–µ—à—å\b': '–¥—É–º–∞–µ—Ç–µ',
            r'\b–î—É–º–∞–µ—à—å\b': '–î—É–º–∞–µ—Ç–µ',
            r'\b—Ö–æ—á–µ—à—å\b': '—Ö–æ—Ç–∏—Ç–µ',
            r'\b–•–æ—á–µ—à—å\b': '–•–æ—Ç–∏—Ç–µ',
            r'\b–º–æ–∂–µ—à—å\b': '–º–æ–∂–µ—Ç–µ',
            r'\b–ú–æ–∂–µ—à—å\b': '–ú–æ–∂–µ—Ç–µ',
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        result = text
        for pattern, replacement in replacements.items():
            result = re.sub(pattern, replacement, result)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if result != text:
            logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞ '–≤—ã': –±—ã–ª–æ '{text[:50]}...' ‚Üí —Å—Ç–∞–ª–æ '{result[:50]}...'")
        
        return result
    
    async def generate_humor(self, 
                           message: str,
                           history: List[Dict],
                           user_signal: str,
                           user_id: str,
                           timeout: float = 3.0) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
        
        Args:
            message: Offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            timeout: –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à—É—Ç–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        start_time = datetime.now()
        
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ–º—É
            topic_category = self.topic_classifier.classify(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
            old_examples = get_mixed_examples(topic_category)
            online_examples = get_online_examples(5)  # –ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_available_examples = []
            for i, ex in enumerate(online_examples + old_examples):
                example_id = f"example_{i}"
                if example_id not in self.used_examples_per_user[user_id]:
                    all_available_examples.append((example_id, ex))
            
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(all_available_examples) < 3:
                self.used_examples_per_user[user_id].clear()
                all_available_examples = [(f"example_{i}", ex) for i, ex in enumerate(online_examples + old_examples)]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 3-4 –ø—Ä–∏–º–µ—Ä–∞
            import random
            selected = random.sample(all_available_examples, min(4, len(all_available_examples)))
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            for example_id, _ in selected:
                self.used_examples_per_user[user_id].add(example_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
            formatted_examples = "\n".join([ex["example"] if isinstance(ex, dict) else ex for _, ex in selected])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            dialogue_context = self._extract_dialogue_context(history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            key_words = self._extract_key_words(message)
            time_context = self._get_time_context()
            message_number = len(history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ user_signal –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            signal_context = {
                'exploring_only': ", —Ä–æ–¥–∏—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                'ready_to_buy': ", —Ä–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                'neutral': ""
            }
            dialogue_context += signal_context.get(user_signal, "")
            dialogue_context += f", –≤—Ä–µ–º—è: {time_context}"
            dialogue_context += f", —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_number + 1}"
            dialogue_context += f", –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {key_words}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—É—Ç–∫–∞—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
            last_humor_context = ""
            if user_id in self.last_humor_per_user and self.last_humor_per_user[user_id]:
                last_3_humors = self.last_humor_per_user[user_id][-3:]
                last_humor_context = "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—É—Ç–∫–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ù–ï –ü–û–í–¢–û–†–Ø–ô –ò–• –¢–ï–ú–´ –ò –û–ë–†–ê–ó–´):\n"
                for humor in last_3_humors:
                    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–π —à—É—Ç–∫–∏ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    last_humor_context += f"- {humor[:50]}...\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            prompt = self.HUMOR_PROMPT_TEMPLATE.format(
                dialogue_context=dialogue_context + last_humor_context,
                message=message,
                examples=formatted_examples
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Claude Haiku
            if self.client:
                response = await asyncio.wait_for(
                    self._call_claude_haiku(prompt),
                    timeout=timeout
                )
            else:
                # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
                response = self._get_mock_response(topic_category)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if response:
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ò–ù–ì: —É–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ Claude –∏—Ö –¥–æ–±–∞–≤–∏–ª
                # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç:" –∏–ª–∏ –≥–∞–ª–æ—á–µ–∫
                if "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç:" in response:
                    response = response.split("–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç:")[0].strip()
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ '–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç:', —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                
                # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≥–∞–ª–æ—á–∫–∞–º–∏
                if "‚úÖ" in response:
                    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –≥–∞–ª–æ—á–∫—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –Ω–∞—á–∏–Ω–∞—è —Å –Ω–µ—ë
                    response = response.split("‚úÖ")[0].strip()
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≥–∞–ª–æ—á–∫–∏ ‚úÖ, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
                
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if response.startswith('"') and response.endswith('"'):
                    response = response[1:-1].strip()
                    logger.info("üìù –£–±—Ä–∞–Ω—ã –∫–∞–≤—ã—á–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                elif response.startswith('"'):
                    response = response[1:].strip()
                elif response.endswith('"'):
                    response = response[:-1].strip()
                
                # –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º "—Ç—ã" –≤ "–≤—ã"
                response = self._convert_to_formal(response)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                sentences = response.count('.') + response.count('!') + response.count('?')
                logger.info(f"üé≠ Generated humor: {len(response)} chars, {sentences} sentences")
                
                is_valid, error_reason = self.safety_checker.validate_humor_response(response)
                
                if is_valid:
                    # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (mark_humor_used –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ main.py)
                    self.successful_generated += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à—É—Ç–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
                    if user_id not in self.last_humor_per_user:
                        self.last_humor_per_user[user_id] = []
                    self.last_humor_per_user[user_id].append(response)
                    # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —à—É—Ç–æ–∫
                    if len(self.last_humor_per_user[user_id]) > 5:
                        self.last_humor_per_user[user_id] = self.last_humor_per_user[user_id][-5:]
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                    generation_time = (datetime.now() - start_time).total_seconds()
                    self.total_generation_time += generation_time
                    logger.info(f"üé≠ Humor generated: topic={topic_category}, time={generation_time:.2f}s")
                    
                    return response
                else:
                    logger.warning(f"Humor validation failed: {error_reason}")
                    return None
            
        except asyncio.TimeoutError:
            logger.error(f"Humor generation timeout after {timeout}s")
            return None
        except Exception as e:
            logger.error(f"Humor generation error: {e}")
            return None
        finally:
            self.total_generated += 1
        
        return None
    
    async def _call_claude_haiku(self, prompt: str) -> Optional[str]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç Claude Haiku –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.client:
            return None
        
        try:
            # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
            temperature = getattr(self.config, 'ZHVANETSKY_TEMPERATURE', 1.2)  # –ë—ã–ª–æ 1.0
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenRouter API —á–µ—Ä–µ–∑ –Ω–∞—à client
            messages = [{"role": "user", "content": prompt}]
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
            response = await self.client.chat(
                messages=messages,
                max_tokens=100,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                temperature=1.0,  # –°–Ω–∏–∑–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                top_p=0.95,  # –ù–µ–º–Ω–æ–≥–æ —Å—É–∑–∏–ª–∏ –≤—ã–±–æ—Ä —Å–ª–æ–≤
                frequency_penalty=1.2,  # –£–í–ï–õ–ò–ß–ò–õ–ò —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!
                presence_penalty=0.8,   # –ë–æ–ª—å—à–µ –ø–æ–æ—â—Ä–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                model="anthropic/claude-3-haiku"  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            )
            
            # response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if response:
                return response.strip()
            
            return None
        except Exception as e:
            logger.error(f"Claude Haiku call failed: {e}")
            return None
    
    def _get_mock_response(self, topic_category: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            topic_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–º—ã
            
        Returns:
            Mock —à—É—Ç–∫–∞
        """
        mock_responses = {
            'sport': "–°–ø–æ—Ä—Ç? –°–∏–¥–∏–º –¥–æ–º–∞, —É—á–∏–º –ª–∏–¥–µ—Ä—Å—Ç–≤–æ. –ü–∞—Ä–∞–¥–æ–∫—Å? –ù–µ—Ç, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å.",
            'weather': "–ü–æ–≥–æ–¥–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫. –ù–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞–º—ã –Ω–∞ —Ñ–æ–Ω–µ. –ê —ç—Ç–æ –≤–∞–∂–Ω–µ–µ.",
            'tech': "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã —É–ø—Ä–æ—â–∞—Ç—å –∂–∏–∑–Ω—å. –î–æ–ª–∂–Ω—ã. –ù–æ —É –Ω–∞—Å —Ä–æ–¥–∏—Ç–µ–ª–∏ —á–∞—Å –∏—â—É—Ç –∫–Ω–æ–ø–∫—É '–ø–æ–¥–Ω—è—Ç—å —Ä—É–∫—É'.",
            'food': "–†–µ–±—ë–Ω–æ–∫ –µ—Å—Ç –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞. –í —à–∫–æ–ª–µ - –Ω–µ–ª—å–∑—è. –î–æ–º–∞ - –º–æ–∂–Ω–æ. –î–æ–º–∞ –Ω–∞ —É—Ä–æ–∫–µ - —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π —Ç—É–ø–∏–∫.",
            'transport': "–î–æ—Ä–æ–≥–∞ –≤ —à–∫–æ–ª—É - –Ω–æ–ª—å –º–µ—Ç—Ä–æ–≤. –û—Ç –∫—Ä–æ–≤–∞—Ç–∏ –¥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –ò –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–ø–∞–∑–¥—ã–≤–∞—é—Ç.",
            'general': "–ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–µ—Ç–µ–π –∫ –±—É–¥—É—â–µ–º—É. –ö –∫–∞–∫–æ–º—É - –Ω–µ –∑–Ω–∞–µ–º. –ù–æ –≥–æ—Ç–æ–≤–∏–º —É–≤–µ—Ä–µ–Ω–Ω–æ."
        }
        
        return mock_responses.get(topic_category, mock_responses['general'])
    
    def get_metrics(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        success_rate = 0.0
        avg_time = 0.0
        
        if self.total_generated > 0:
            success_rate = self.successful_generated / self.total_generated
            avg_time = self.total_generation_time / self.total_generated
        
        return {
            'total_generated': self.total_generated,
            'successful_generated': self.successful_generated,
            'success_rate': success_rate,
            'average_generation_time': avg_time
        }


# –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ should_use_zhvanetsky –∏ generate_zhvanetsky_response
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã –≤ main.py