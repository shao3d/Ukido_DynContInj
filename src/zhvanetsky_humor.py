"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–º–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ú–∏—Ö–∞–∏–ª–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –¥–ª—è offtopic –∑–∞–ø—Ä–æ—Å–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Claude Haiku –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∑–æ–ª–æ—Ç–æ–≥–æ –∑–∞–ø–∞—Å–∞ –ø—Ä–∏–º–µ—Ä–æ–≤.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime

try:
    from zhvanetsky_golden import get_mixed_examples, format_examples_for_prompt
    from zhvanetsky_safety import SafetyChecker, TopicClassifier
except ImportError:
    # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞
    from .zhvanetsky_golden import get_mixed_examples, format_examples_for_prompt
    from .zhvanetsky_safety import SafetyChecker, TopicClassifier

logger = logging.getLogger(__name__)


class ZhvanetskyGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —é–º–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ."""
    
    HUMOR_PROMPT_TEMPLATE = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–µ—Ç—Å–∫–æ–π —à–∫–æ–ª—ã soft skills Ukido.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{dialogue_context}

–†–æ–¥–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª –Ω–µ –ø–æ —Ç–µ–º–µ —à–∫–æ–ª—ã: "{message}"

–ò—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∏–ª—å –ú–∏—Ö–∞–∏–ª–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∏–∂–µ, —Å–æ–∑–¥–∞–π –û–î–ù–£ –∫–æ—Ä–æ—Ç–∫—É—é —à—É—Ç–∫—É-–æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–∞—è:
1. –ú—è–≥–∫–æ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å —é–º–æ—Ä–æ–º
2. –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –º—ã—Å–ª–∏ –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Ç–µ–º—É —Å –ø–æ–ª—å–∑–æ–π –æ–±—É—á–µ–Ω–∏—è soft skills –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ
4. –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–∞, —Å–∞—Ä–∫–∞–∑–º–∞ –∏–ª–∏ –æ–±–∏–¥–Ω—ã—Ö —Å–ª–æ–≤

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è:
{examples}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û —à—É—Ç–∫–æ–π, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ:"""

    def __init__(self, client=None, config=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è Claude Haiku
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.client = client
        self.config = config
        self.safety_checker = SafetyChecker()
        self.topic_classifier = TopicClassifier()
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.total_generated = 0
        self.successful_generated = 0
        self.total_generation_time = 0.0
    
    def _extract_dialogue_context(self, history: List[Dict], limit: int = 5) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            limit: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        if not history:
            return "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, —Ä–æ–¥–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –∑–∞—à—ë–ª."
        
        recent = history[-limit:] if len(history) >= limit else history
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–∞—Ç–∏–∫—É
        topics_discussed = []
        questions_count = 0
        
        for msg in recent:
            if msg.get('role') == 'user':
                content = msg.get('content', '')
                if '?' in content:
                    questions_count += 1
                
                # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
                if any(word in content.lower() for word in ['–∫—É—Ä—Å', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∑–∞–Ω—è—Ç–∏']):
                    topics_discussed.append('–∫—É—Ä—Å—ã')
                elif any(word in content.lower() for word in ['—Ü–µ–Ω', '—Å—Ç–æ–∏', '—Å–∫–∏–¥–∫']):
                    topics_discussed.append('—Ü–µ–Ω—ã')
                elif any(word in content.lower() for word in ['—É—á–∏—Ç–µ–ª', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç', '–ø–µ–¥–∞–≥–æ–≥']):
                    topics_discussed.append('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context_parts = []
        
        if questions_count == 0:
            context_parts.append("–†–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —à–∫–æ–ª–µ")
        elif questions_count == 1:
            context_parts.append("–†–æ–¥–∏—Ç–µ–ª—å –∑–∞–¥–∞–ª –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
        else:
            context_parts.append(f"–†–æ–¥–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, –∑–∞–¥–∞–ª {questions_count} –≤–æ–ø—Ä–æ—Å–∞")
        
        if topics_discussed:
            context_parts.append(f"–æ–±—Å—É–∂–¥–∞–ª–∏: {', '.join(set(topics_discussed))}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        mood = self.safety_checker.analyze_dialogue_mood(history)
        if mood == 'positive':
            context_parts.append("–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ")
        elif mood == 'neutral':
            context_parts.append("—Å–ø–æ–∫–æ–π–Ω—ã–π —Ç–æ–Ω")
        
        return ". ".join(context_parts) + "."
    
    async def generate_humor(self, 
                           message: str,
                           history: List[Dict],
                           user_signal: str,
                           user_id: str,
                           timeout: float = 3.0) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
        
        Args:
            message: Offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            timeout: –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à—É—Ç–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        start_time = datetime.now()
        
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ–º—É
            topic_category = self.topic_classifier.classify(message)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            examples = get_mixed_examples(topic_category)
            formatted_examples = format_examples_for_prompt(examples)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            dialogue_context = self._extract_dialogue_context(history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ user_signal –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            signal_context = {
                'exploring_only': ", —Ä–æ–¥–∏—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                'ready_to_buy': ", —Ä–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                'neutral': ""
            }
            dialogue_context += signal_context.get(user_signal, "")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.HUMOR_PROMPT_TEMPLATE.format(
                dialogue_context=dialogue_context,
                message=message,
                examples=formatted_examples
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Claude Haiku
            if self.client:
                response = await asyncio.wait_for(
                    self._call_claude_haiku(prompt),
                    timeout=timeout
                )
            else:
                # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
                response = self._get_mock_response(topic_category)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if response:
                is_valid, error_reason = self.safety_checker.validate_humor_response(response)
                
                if is_valid:
                    # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (mark_humor_used –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ main.py)
                    self.successful_generated += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                    generation_time = (datetime.now() - start_time).total_seconds()
                    self.total_generation_time += generation_time
                    logger.info(f"üé≠ Humor generated: topic={topic_category}, time={generation_time:.2f}s")
                    
                    return response
                else:
                    logger.warning(f"Humor validation failed: {error_reason}")
                    return None
            
        except asyncio.TimeoutError:
            logger.error(f"Humor generation timeout after {timeout}s")
            return None
        except Exception as e:
            logger.error(f"Humor generation error: {e}")
            return None
        finally:
            self.total_generated += 1
        
        return None
    
    async def _call_claude_haiku(self, prompt: str) -> Optional[str]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç Claude Haiku –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.client:
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            temperature = getattr(self.config, 'ZHVANETSKY_TEMPERATURE', 0.75)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenRouter API —á–µ—Ä–µ–∑ –Ω–∞—à client
            messages = [{"role": "user", "content": prompt}]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –º–µ—Ç–æ–¥ chat (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É)
            response = await self.client.chat(
                messages=messages,
                max_tokens=150,
                temperature=temperature,
                model="anthropic/claude-3.5-haiku"
            )
            
            # response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if response:
                return response.strip()
            
            return None
        except Exception as e:
            logger.error(f"Claude Haiku call failed: {e}")
            return None
    
    def _get_mock_response(self, topic_category: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            topic_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–º—ã
            
        Returns:
            Mock —à—É—Ç–∫–∞
        """
        mock_responses = {
            'sport': "–°–ø–æ—Ä—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–µ–ª–æ, –º—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å. –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ –∂–∏–∑–Ω–∏?",
            'weather': "–ü–æ–≥–æ–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–µ–±—ë–Ω–∫–∞ —Ç–æ–∂–µ. –ù–æ –º—ã —É—á–∏–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ç–æ—Ä—ã–º.",
            'tech': "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É–ø—Ä–æ—â–∞—é—Ç –∂–∏–∑–Ω—å, soft skills –µ—ë —É—Å–ª–æ–∂–Ω—è—é—Ç. –ù–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∂–µ —Å–æ –≤—Ç–æ—Ä—ã–º!",
            'food': "–ï–¥–∞ –ø–∏—Ç–∞–µ—Ç —Ç–µ–ª–æ, –∑–Ω–∞–Ω–∏—è - –¥—É—à—É. –£ –Ω–∞—Å –º–µ–Ω—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ.",
            'transport': "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–µ–∑—ë—Ç —Ç–µ–ª–æ, –º—ã –≤–µ–∑—ë–º –≤ –±—É–¥—É—â–µ–µ. –ë–∏–ª–µ—Ç –Ω–µ–¥–æ—Ä–æ–≥–æ–π.",
            'general': "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ù–æ —É–º–µ–Ω–∏–µ –µ—ë –æ–±—Å—É–¥–∏—Ç—å - —ç—Ç–æ —É–∂–µ –Ω–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."
        }
        
        return mock_responses.get(topic_category, mock_responses['general'])
    
    def get_metrics(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        success_rate = 0.0
        avg_time = 0.0
        
        if self.total_generated > 0:
            success_rate = self.successful_generated / self.total_generated
            avg_time = self.total_generation_time / self.total_generated
        
        return {
            'total_generated': self.total_generated,
            'successful_generated': self.successful_generated,
            'success_rate': success_rate,
            'average_generation_time': avg_time
        }


# –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ should_use_zhvanetsky –∏ generate_zhvanetsky_response
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã –≤ main.py