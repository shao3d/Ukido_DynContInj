from pathlib import Path
from typing import List, Dict, Optional
from config import Config
from openrouter_client import OpenRouterClient
from standard_responses import DEFAULT_FALLBACK
from offers_catalog import get_offer, get_tone_adaptation, get_dynamic_example
import re
import asyncio

class ResponseGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞:
    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞ (status=success, documents, decomposed_questions)
    - –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç MD –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ data/documents_compressed (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
    - –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç (—Å–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å + –¥–æ–∫—É–º–µ–Ω—Ç—ã + –∏—Å—Ç–æ—Ä–∏—è[–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10] + –≤–æ–ø—Ä–æ—Å—ã)
    - –í—ã–∑—ã–≤–∞–µ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """

    def __init__(self, docs_dir: Optional[Path] = None):
        self.cfg = Config()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude 3.5 Haiku –¥–ª—è –æ–¥–Ω–æ—ç—Ç–∞–ø–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        self.client = OpenRouterClient(
            self.cfg.OPENROUTER_API_KEY,
            seed=self.cfg.SEED,
            max_tokens=self.cfg.MAX_TOKENS_ANSWER,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (1200 —Ç–æ–∫–µ–Ω–æ–≤)
            temperature=0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            model="anthropic/claude-3.5-haiku",  # Claude Haiku –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        )
        self.docs_dir = docs_dir or (Path(__file__).parent.parent / "data" / "documents_compressed")
        self.history_limit = self.cfg.HISTORY_LIMIT  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

    async def generate(
        self,
        router_result: Dict,
        history: Optional[List[Dict[str, str]]] = None,
        current_message: Optional[str] = None,
    ) -> tuple[str, dict]:
        if router_result.get("status") != "success":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple —Å –ø—É—Å—Ç–æ–π metadata –¥–ª—è —Ñ–æ–ª–ª–±—ç–∫–∞
            return DEFAULT_FALLBACK, {"intent": "error", "user_signal": "exploring_only", "cta_added": False, "cta_type": None, "humor_generated": False}

        docs = router_result.get("documents") or []
        questions = router_result.get("decomposed_questions") or []
        if not docs or not questions:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple —Å –ø—É—Å—Ç–æ–π metadata –¥–ª—è —Ñ–æ–ª–ª–±—ç–∫–∞
            return DEFAULT_FALLBACK, {"intent": "error", "user_signal": "exploring_only", "cta_added": False, "cta_type": None, "humor_generated": False}

        # –ü–æ–ª—É—á–∞–µ–º user_signal –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        user_signal = router_result.get("user_signal", "exploring_only")
        
        doc_texts = self._load_docs(docs)
        
        # –ó–ê–©–ò–¢–ê –û–¢ –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô: –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å
        if not doc_texts:
            print("‚ö†Ô∏è –ó–ê–©–ò–¢–ê: –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ —à–∫–æ–ª–µ Ukido?", {"intent": "success", "user_signal": user_signal, "cta_added": False, "cta_type": None, "humor_generated": False}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å CTA –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        cta_text = None
        cta_offer = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è fallback
        
        # === –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò CTA ===
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ router_result
        cta_blocked = router_result.get("cta_blocked", False)
        cta_frequency_modifier = router_result.get("cta_frequency_modifier", 1.0)
        block_reason = router_result.get("block_reason", "")
        
        if cta_blocked:
            print(f"üîí CTA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {block_reason}")
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É CTA –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        else:
            offer = get_offer(user_signal, history)
            if offer and offer["priority"] in ["high", "medium"]:
                print(f"üéØ DEBUG: –ï—Å—Ç—å offer –¥–ª—è {user_signal}, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å...")
                should_add = self._should_add_offer(user_signal, history, offer, current_message)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
                if should_add and cta_frequency_modifier < 1.0:
                    import random
                    # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è CTA
                    if random.random() > cta_frequency_modifier:
                        should_add = False
                        print(f"üìâ CTA –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã ({cta_frequency_modifier:.1%})")
                
                print(f"üéØ DEBUG: _should_add_offer –≤–µ—Ä–Ω—É–ª: {should_add}")
                if should_add:
                    print(f"üéØ DEBUG: –ë—É–¥–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å CTA –¥–ª—è {user_signal} –æ—Ä–≥–∞–Ω–∏—á–Ω–æ")
                    cta_offer = offer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è fallback
                    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç CTA —Ç–µ–∫—Å—Ç–∞
                    if "text_variants" in offer and offer["text_variants"]:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ CTA —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
                        cta_count = self._count_cta_occurrences(user_signal, history)
                        variant_index = cta_count % len(offer["text_variants"])
                        cta_text = offer["text_variants"][variant_index]
                        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç #{variant_index+1} –∏–∑ {len(offer['text_variants'])}")
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                        cta_text = offer.get("text", "")
                else:
                    print(f"üéØ DEBUG: CTA –ù–ï –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {user_signal}")
        
        # –û–¥–Ω–æ—ç—Ç–∞–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Claude Haiku + dynamic few-shot + CTA (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        messages = self._build_messages(doc_texts, questions, history or [], router_result, cta_text)

        try:
            reply = await self.client.chat(messages)
            cleaned = (reply or "").strip()
            if not cleaned:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", {"intent": "error", "user_signal": user_signal, "cta_added": False, "cta_type": None, "humor_generated": False}
            
            # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            sanitized = self._strip_source_citations(cleaned)
            polished = self._remove_question_headings(sanitized)
            humanized = self._humanize_missing_info(polished)
            no_labels = self._strip_service_labels(humanized)
            no_cta = self._strip_generic_cta(no_labels)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è (—É–±–∏—Ä–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
            final_text = self._final_sanitize(no_cta)
            
            # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ukido.com.ua
            final_text = final_text.replace("ukido.ua/", "ukido.com.ua/")
            final_text = final_text.replace("ukido.ua ", "ukido.com.ua ")
            final_text = final_text.replace("ukido.ua.", "ukido.com.ua.")
            final_text = final_text.replace("ukido.ua,", "ukido.com.ua,")
            
            # –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
            if final_text.startswith("–ü—Ä–∏–≤–µ—Ç."):
                final_text = "–ü—Ä–∏–≤–µ—Ç!" + final_text[7:]
                print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –ü—Ä–∏–≤–µ—Ç. ‚Üí –ü—Ä–∏–≤–µ—Ç!")
            
            # 2. –ï—Å–ª–∏ –±—ã–ª social_context == "greeting" –Ω–æ –æ—Ç–≤–µ—Ç –ù–ï –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º
            social_ctx = router_result.get("social_context")
            print(f"üîç DEBUG postprocessing: social_context = {social_ctx}, text starts with: {final_text[:30]}...")
            if social_ctx == "greeting":
                greeting_starters = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]
                if not any(final_text.lower().startswith(g) for g in greeting_starters):
                    final_text = "–ü—Ä–∏–≤–µ—Ç! " + final_text
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞")
                
                # –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
                if len(final_text) < 50 and router_result.get("decomposed_questions"):
                    print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: '{final_text}'")
                    # Fallback –æ—Ç–≤–µ—Ç –¥–ª—è mixed –∏–Ω—Ç–µ–Ω—Ç–æ–≤
                    if any(word in current_message.lower() for word in ["–ø—É—Å—Ç—ã—à–∫", "–æ–±–º–∞–Ω—É–ª–∏", "–ø–æ—Ç–µ—Ä—è", "–ø–ª–æ—Ö", "–Ω–µ–≥–∞—Ç–∏–≤"]):
                        final_text = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—ã—Ç–∞. –í Ukido –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –∏–Ω–∞—á–µ - –º–∏–Ω–∏-–≥—Ä—É–ø–ø—ã –¥–æ 6 —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏-–ø—Å–∏—Ö–æ–ª–æ–≥–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–±–µ–Ω–∫—É. –î–∞–≤–∞–π—Ç–µ —è –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–∞—à–∏—Ö –æ—Ç–ª–∏—á–∏—è—Ö."
                    else:
                        final_text = "–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ —è –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–∞—à–µ–π —à–∫–æ–ª–µ –∏ —á–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É."
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –æ—Ç–≤–µ—Ç –¥–ª—è mixed greeting")
            
            # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–±–Ω–æ–º—É –∑–∞–Ω—è—Ç–∏—é
            trial_words = ["–ø–æ–ø—Ä–æ–±", "–ø—Ä–æ–±–Ω", "–¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º", "—Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–∑–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ"]
            if current_message and any(word in current_message.lower() for word in trial_words):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ (–ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ ukido —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º)
                if not any(contact in final_text.lower() for contact in ["ukido", "+380", "–∑–∞–ø–∏—à–∏—Ç–µ—Å—å", "–∑–∞–ø–∏—Å—å"]):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞
                    contact_info = "\n\nüìû –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: ukido.com.ua/trial –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ +380 93 567 89 01"
                    final_text = final_text.rstrip() + contact_info
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ "–∑–∞–±–∏—Ä–∞—Ç—å")
            transport_words = ["–∑–∞–±–∏—Ä–∞", "–ø—Ä–∏–≤–æ–∑–∏", "–¥–æ–≤–æ–∑–∏", "–≤–µ–∑—Ç–∏", "–æ—Ç–≤–æ–∑–∏", "–≤–æ–∂—É", "–≤–µ–∑—É", "–∑–∞–±–µ—Ä—É", "–ø—Ä–∏–≤–µ–∑—É"]
            if current_message and any(word in current_message.lower() for word in transport_words):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–Ω–ª–∞–π–Ω –≤ –æ—Ç–≤–µ—Ç–µ
                if "–æ–Ω–ª–∞–π–Ω" not in final_text.lower() and "zoom" not in final_text.lower() and "–∏–∑ –¥–æ–º–∞" not in final_text.lower():
                    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ...")
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                    time_patterns = [
                        ("–∑–∞–Ω—è—Ç–∏—è –¥–ª—è—Ç—Å—è", ", –∏ –ø–æ—Å–∫–æ–ª—å–∫—É –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom, —Ä–µ–±—ë–Ω–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑ –¥–æ–º–∞"),
                        ("90 –º–∏–Ω—É—Ç", " (–∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom, –∑–∞–±–∏—Ä–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)"),
                        ("—Å 17:00", ", –∏ —É–¥–æ–±–Ω–æ, —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫—É–¥–∞ –µ—Ö–∞—Ç—å - —Ä–µ–±—ë–Ω–æ–∫ —É—á–∏—Ç—Å—è –∏–∑ –¥–æ–º–∞"),
                        ("—Å 19:00", ", —á—Ç–æ —É–¥–æ–±–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π - —Ä–µ–±—ë–Ω–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ–º–∞ —á–µ—Ä–µ–∑ Zoom"),
                        ("–¥–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", ". –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω, –ø–æ—ç—Ç–æ–º—É –∑–∞–±–∏—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"),
                        ("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", ". –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom –∏–∑ –¥–æ–º–∞"),
                        ("–≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π", ", –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–±–∏—Ä–∞—Ç—å –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è - –æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–Ω–ª–∞–π–Ω"),
                        ("—Å–ª–æ—Ç", ", –∏ –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–Ω—è—Ç–∏—è –æ–Ω–ª–∞–π–Ω, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É")
                    ]
                    
                    inserted = False
                    for pattern, insertion in time_patterns:
                        if pattern in final_text.lower() and not inserted:
                            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                            index = final_text.lower().index(pattern)
                            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                            rest = final_text[index:]
                            sentence_end = rest.find(".")
                            if sentence_end == -1:
                                sentence_end = len(rest)
                            
                            # –í—Å—Ç–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π
                            insert_pos = index + sentence_end
                            final_text = final_text[:insert_pos] + insertion + final_text[insert_pos:]
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ '{pattern}'")
                            inserted = True
                            break
                    
                    # Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ, –Ω–æ –º—è–≥–∫–æ
                    if not inserted:
                        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        if "–ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã" in current_message.lower():
                            prefix = "–£–¥–æ–±–Ω–æ, —á—Ç–æ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–∏–∫—É–¥–∞ –µ—Ö–∞—Ç—å - –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom, —Ä–µ–±—ë–Ω–æ–∫ —É—á–∏—Ç—Å—è –∏–∑ –¥–æ–º–∞. "
                        elif "–¥–∞–ª–µ–∫–æ" in current_message.lower():
                            prefix = "–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å - –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫—É–¥–∞ –µ—Ö–∞—Ç—å! –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom. "
                        else:
                            prefix = "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom, –ø–æ—ç—Ç–æ–º—É –∑–∞–±–∏—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ - –æ–Ω —É—á–∏—Ç—Å—è –∏–∑ –¥–æ–º–∞. "
                        
                        final_text = prefix + final_text
                        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—Ä–æ–∏–ª –ª–∏ Claude CTA (–µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏)
            cta_was_added = False
            if cta_text and cta_offer:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
                is_aggressive = any(word in current_message.lower() for word in ["—Ä–∞–∑–≤–æ–¥", "–æ–±–º–∞–Ω", "–≤—ã–∫–∞—á–∏–≤–∞–Ω–∏–µ", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–≤—Ä–∞–Ω—å—ë"]) if current_message else False
                context_type = "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π" if is_aggressive else "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π"
                
                if not self._verify_cta_included(final_text, cta_text):
                    # Fallback: Claude –Ω–µ –≤—Å—Ç—Ä–æ–∏–ª CTA, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏
                    print(f"‚ö†Ô∏è –ü–†–û–í–ê–õ: Claude –ù–ï –≤—Å—Ç—Ä–æ–∏–ª CTA –¥–ª—è {user_signal}")
                    print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_type}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.cfg –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ config
                    temperature = getattr(self.cfg, 'TEMPERATURE_BY_SIGNAL', {}).get(user_signal, 0.1)
                    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}")
                    print(f"   CTA —Ç–µ–∫—Å—Ç: '{cta_text[:50]}...'")
                    final_text = self._inject_offer(final_text, cta_offer, user_signal)
                    cta_was_added = True
                else:
                    print(f"‚úÖ –£–°–ü–ï–•: CTA –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {user_signal}")
                    print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_type}")
                    cta_was_added = True
                    # –ú–∞—Ä–∫–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç–∞
                    # —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∏–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            # –°–æ–∑–¥–∞—ë–º metadata –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            metadata = {
                "intent": "success",
                "user_signal": user_signal,
                "cta_added": cta_was_added,
                "cta_type": user_signal if cta_was_added else None,
                "humor_generated": False
            }
            
            return final_text, metadata
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple —Å metadata –¥–ª—è —Å–ª—É—á–∞—è –æ—à–∏–±–∫–∏
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", {
                "intent": "error",
                "user_signal": user_signal,
                "cta_added": False,
                "cta_type": None,
                "humor_generated": False
            }

    def _load_doc(self, doc_name: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –û–¢–ö–ê–¢ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            path = self.docs_dir / doc_name
            if not path.exists():
                print(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_name}")
                return ""
            
            with open(path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {doc_name}: {e}")
            return ""
    
    def _load_docs(self, docs: List[str]) -> Dict[str, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è"""
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è - —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
        unique_docs = list(dict.fromkeys(docs))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        
        texts = {}
        for doc_name in unique_docs:
            content = self._load_doc(doc_name)
            if content:
                texts[doc_name] = content
        
        return texts
    
    def _load_docs(self, docs: List[str]) -> Dict[str, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è"""
        unique_docs = list(dict.fromkeys(docs))
        texts = {}
        for doc_name in unique_docs:
            content = self._load_doc(doc_name)
            if content:
                texts[doc_name] = content
        return texts

    def _build_messages(
        self,
        doc_texts: Dict[str, str],
        questions: List[str],
        history: List[Dict[str, str]],
        router_result: Dict,
        cta_text: str = None,  # –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–† –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CTA
    ) -> List[Dict[str, str]]:
        # –ü–æ–ª—É—á–∞–µ–º user_signal –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–æ–Ω–∞
        user_signal = router_result.get("user_signal", "exploring_only")
        tone_adaptation = get_tone_adaptation(user_signal)
        dynamic_example = get_dynamic_example(user_signal)
        
        # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Haiku - —Ñ–∞–∫—Ç—ã + —Å—Ç–∏–ª—å + –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        system_role = (
            "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–µ—Ç—Å–∫–æ–π —à–∫–æ–ª—ã soft skills Ukido. "
            "–û—Ç–≤–µ—á–∞–π –∂–∏–≤—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —è–∑—ã–∫–æ–º –æ—Ç –ª–∏—Ü–∞ —à–∫–æ–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–π '–º—ã', –Ω–µ '—è'). "
            "–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –±—É–¥—Ç–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤ —à–∫–æ–ª—ã —Å–æ–≤–µ—Ç—É–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—é.\n\n"
            "–ñ–ï–õ–ï–ó–ù–´–ï –ü–†–ê–í–ò–õ–ê - –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò:\n"
            "‚Ä¢ –í–°–ï —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ç–∞–ª–∏ - –¢–û–õ–¨–ö–û –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? –°–∫–∞–∂–∏: '–£ –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É'\n"
            "‚Ä¢ –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π: API, —Å—Ä–æ–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å –ø—Ä–æ API? –¢–æ–ª—å–∫–æ: '–ï—Å—Ç—å LMS-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –æ—Ç—á—ë—Ç–∞–º–∏. –î–µ—Ç–∞–ª–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'\n"
            "‚Ä¢ –°–º—è–≥—á–∞–π —Ç–æ—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: 85% ‚Üí '–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ', 2.3 —Ä–∞–∑–∞ ‚Üí '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ'\n"
            "‚Ä¢ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –≠–ú–û–î–ó–ò\n\n"
            "–í–ê–ñ–ù–û - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤:\n"
            "‚Ä¢ –ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫—É—Ä—Å–∞\n"
            "  –ü—Ä–∏–º–µ—Ä: '–î–ª—è 9-–ª–µ—Ç–Ω–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–¥–æ–π–¥—ë—Ç –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å, –≥–¥–µ...'\n"
            "‚Ä¢ –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Ü–µ–Ω/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π –∫—É—Ä—Å –≤ —Ç–æ–º –∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏\n"
            "  –ü—Ä–∏–º–µ—Ä: '–í –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ö–æ–º–ø–∞—Å–µ –≥—Ä—É–ø–ø—ã –¥–æ 6 –¥–µ—Ç–µ–π'\n"
            "‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ course_comparison.md - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"
        )
        
        # üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–º—É –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—é CTA –ü–ï–†–ï–î –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —Ç–æ–Ω–∞
        if cta_text:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_message = router_result.get("original_message", "").lower()
            aggressive_keywords = ["—Ä–∞–∑–≤–æ–¥", "–æ–±–º–∞–Ω", "–≤—ã–∫–∞—á–∏–≤–∞–Ω–∏–µ", "–º–æ—à–µ–Ω–Ω–∏–∫–∏", "–≤—Ä–∞–Ω—å—ë"]
            is_aggressive = any(word in current_message for word in aggressive_keywords)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ price_sensitive
            if user_signal == "price_sensitive" and is_aggressive:
                system_role += (
                    "\n‚ö†Ô∏è –û–°–û–ë–´–ô –°–õ–£–ß–ê–ô: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≥—Ä–µ—Å—Å–∏–≤–µ–Ω –∏ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç —Ü–µ–Ω—ã.\n"
                    "–°–¢–†–ê–¢–ï–ì–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –ö–†–ê–¢–ö–û –∑–∞—â–∏—Ç–∏—Å—å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
                    "–∑–∞—Ç–µ–º –°–†–ê–ó–£ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–∫–∏–¥–∫–∞–º –∫–∞–∫ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã.\n"
                    "–ü–†–ò–ú–ï–†: '–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–µ –≤–æ–∑–º—É—â–µ–Ω–∏–µ. –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É —É –Ω–∞—Å –µ—Å—Ç—å "
                    "—Å–∫–∏–¥–∫–∞ 10% –∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–µ–µ...'\n"
                )
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ CTA (—É–ø–æ–º–∏–Ω–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ)
            system_role += (
                "\n\nüî¥ –í–ê–ñ–ù–û: –í —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.\n"
                "–î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            )
            
            cta_examples = {
                "price_sensitive": (
                    "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–æ–¥–∏—Ç–µ–ª—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ü–µ–Ω–µ!\n"
                    "–ò–ú–ü–ï–†–ê–¢–ò–í: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ê–ß–ù–ò –û–¢–í–ï–¢ –° –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–ò–î–ö–ï/–†–ê–°–°–†–û–ß–ö–ï!\n"
                    "–≠—Ç–æ –ù–ï –æ–ø—Ü–∏—è, –∞ –¢–†–ï–ë–û–í–ê–ù–ò–ï. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ = –ø—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á–∏.\n\n"
                    "–ò–°–ü–û–õ–¨–ó–£–ô –û–î–ò–ù –ò–ó –≠–¢–ò–• –í–ê–†–ò–ê–ù–¢–û–í (–≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–Ω—ã–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑):\n"
                    "1. '–£ –Ω–∞—Å –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ...'\n"
                    "2. '–î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞, —ç—Ç–æ –≤—Å–µ–≥–æ ... –≤ –º–µ—Å—è—Ü'\n"
                    "3. '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–µ–º–µ–π –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞...'\n"
                    "4. '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–µ–µ, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã...'\n"
                    "5. '–ö—Å—Ç–∞—Ç–∏, —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è - —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å...'\n\n"
                    "–ü–û–°–õ–ï —Å–∫–∏–¥–∫–∏ –æ–±—ä—è—Å–Ω–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å. –ù–ï –ó–ê–ë–£–î–¨ –ü–†–û –°–ö–ò–î–ö–£ –í –ù–ê–ß–ê–õ–ï!"
                ),
                "anxiety_about_child": (
                    "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ä–≥–∞–Ω–∏—á–Ω–æ —É–ø–æ–º—è–Ω–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–Ω—è—Ç–∏—è —Ç—Ä–µ–≤–æ–≥.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n"
                    "‚Ä¢ '...–∏ —á—Ç–æ–±—ã –≤—ã —Å–∞–º–∏ —É–±–µ–¥–∏–ª–∏—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.'\n"
                    "‚Ä¢ '...–ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.'\n"
                    "‚Ä¢ '...–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à –ø–æ–¥—Ö–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏.'\n"
                    "–ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü! –í—Å—Ç—Ä–æ–π –≤ –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞."
                ),
                "ready_to_buy": (
                    "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n"
                    "‚Ä¢ '...–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞ ukido.ua/trial, —ç—Ç–æ –∑–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã.'\n"
                    "‚Ä¢ '...–¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ ukido.ua/trial –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.'\n"
                    "‚Ä¢ '...—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ ukido.ua/trial.'\n"
                    "–î–µ–ª–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞."
                ),
                "exploring_only": (
                    "–ú—è–≥–∫–æ —É–ø–æ–º—è–Ω–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n"
                    "‚Ä¢ '...–∏ –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É –Ω–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ.'\n"
                    "‚Ä¢ '...–∫—Å—Ç–∞—Ç–∏, –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ.'\n"
                    "–ù–æ –ù–ï –Ω–∞–≤—è–∑—ã–≤–∞–π, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π."
                )
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ü–∞
            cta_detail_instruction = cta_examples.get(user_signal, cta_examples['exploring_only'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ç–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if tone_adaptation.get("style"):
            system_role += f"\n\n–ê–î–ê–ü–¢–ê–¶–ò–Ø –¢–û–ù–ê:\n{tone_adaptation['style']}"
            # –í–ê–ñ–ù–û: –£—Å–∏–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞ –¥–ª—è user_signal
            tone_map = {
                "price_sensitive": "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–æ–¥–∏—Ç–µ–ª—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ü–µ–Ω–µ!\n"
                "–ò–ú–ü–ï–†–ê–¢–ò–í: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ê–ß–ù–ò –û–¢–í–ï–¢ –° –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–ò–î–ö–ï/–†–ê–°–°–†–û–ß–ö–ï!\n"
                "–≠—Ç–æ –ù–ï –æ–ø—Ü–∏—è, –∞ –¢–†–ï–ë–û–í–ê–ù–ò–ï. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ = –ø—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á–∏.\n\n"
                "–ò–°–ü–û–õ–¨–ó–£–ô –û–î–ò–ù –ò–ó –≠–¢–ò–• –í–ê–†–ò–ê–ù–¢–û–í (–≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–Ω—ã–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑):\n"
                "1. '–£ –Ω–∞—Å –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ...'\n"
                "2. '–î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞, —ç—Ç–æ –≤—Å–µ–≥–æ ... –≤ –º–µ—Å—è—Ü'\n"
                "3. '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–µ–º–µ–π –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞...'\n"
                "4. '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–µ–µ, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã...'\n"
                "5. '–ö—Å—Ç–∞—Ç–∏, —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è - —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å...'\n\n"
                "–ü–û–°–õ–ï —Å–∫–∏–¥–∫–∏ –æ–±—ä—è—Å–Ω–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å. –ù–ï –ó–ê–ë–£–î–¨ –ü–†–û –°–ö–ò–î–ö–£ –í –ù–ê–ß–ê–õ–ï!",
                
                "anxiety_about_child": "–ö–†–ò–¢–ò–ß–ù–û: –†–æ–¥–∏—Ç–µ–ª—å —Ç—Ä–µ–≤–æ–∂–∏—Ç—Å—è –∑–∞ —Ä–µ–±–µ–Ω–∫–∞!\n"
                "‚Ä¢ –ü–ï–†–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï - —ç–º–ø–∞—Ç–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n"
                "‚Ä¢ –í–∞—Ä—å–∏—Ä—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–ø–∞—Ç–∏–∏ (–ø–æ–Ω–∏–º–∞–µ–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞, –Ω–µ–ø—Ä–æ—Å—Ç–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)\n"
                "‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–ø–æ–Ω–∏–º–∞–µ–º' –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞ –∑–∞ –¥–∏–∞–ª–æ–≥\n"
                "‚Ä¢ –ü–æ—Å–ª–µ —ç–º–ø–∞—Ç–∏–∏ - –∫–∞–∫ —à–∫–æ–ª–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–æ–π\n"
                "‚Ä¢ –ú—è–≥–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω",
                
                "ready_to_buy": "–†–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é!\n"
                "‚Ä¢ –ù–ê–ß–ù–ò —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞: '–î–ª—è –∑–∞–ø–∏—Å–∏...' –∏–ª–∏ '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥...'\n"
                "‚Ä¢ –ë–ï–ó –ª–∏—à–Ω–µ–π –≤–æ–¥—ã –∏ –ø—Ä–µ–∞–º–±—É–ª\n"
                "‚Ä¢ –ß–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                
                "exploring_only": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ë–ï–ó –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏\n"
                "‚Ä¢ –ù–µ –¥–∞–≤–∏—Ç—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n"
                "‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ"
            }
            if user_signal in tone_map:
                system_role += f"\n\n{tone_map[user_signal]}"

        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        allowed_docs = list(doc_texts.keys())

        # –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Ç—Ä–∏–º–º–∏–Ω–≥–∞)
        docs_block_lines = []
        for name, text in doc_texts.items():
            docs_block_lines.append(f"=== –î–æ–∫—É–º–µ–Ω—Ç: {name} ===\n{text}\n")
        docs_block = "\n".join(docs_block_lines) if docs_block_lines else "=== –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ==="

        system_content = (
            f"{system_role}\n\n"
            f"–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(allowed_docs) if allowed_docs else '‚Äî'}\n\n"
            f"=== –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ===\n{docs_block}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if dynamic_example:
            system_content += f"=== –ü–†–ò–ú–ï–† –ê–î–ê–ü–¢–ê–¶–ò–ò –°–¢–ò–õ–Ø ===\n{dynamic_example}\n\n"
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è CTA
        if cta_text:
            word_limit = "120-150"  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å CTA
        else:
            word_limit = "100-130"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç –±–µ–∑ CTA
        
        system_content += (
            "–°–¢–†–£–ö–¢–£–†–ê –ò –°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:\n"
            f"‚Ä¢ –û–±—ä—ë–º: –°–¢–†–û–ì–û {word_limit} —Å–ª–æ–≤ (–±–æ–ª—å—à–µ = –Ω–∞—Ä—É—à–µ–Ω–∏–µ)\n"
            "‚Ä¢ –Ø–∑—ã–∫: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –æ—Ç –ª–∏—Ü–∞ —à–∫–æ–ª—ã ('–º—ã', '—É –Ω–∞—Å', '–Ω–∞—à–∏')\n"
            "‚Ä¢ –ü–ï–†–í–´–ï 2 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø = –≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "‚Ä¢ –í–∞—Ä—å–∏—Ä—É–π –Ω–∞—á–∞–ª–∞ —Ñ—Ä–∞–∑, –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤\n"
            "‚Ä¢ –ë–ï–ó —ç–º–æ–¥–∑–∏\n\n"
            "–ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º:\n"
            "‚Ä¢ price_sensitive ‚Üí –Ω–∞—á–Ω–∏ —Å–æ —Å–∫–∏–¥–∫–∏/—Ä–∞—Å—Å—Ä–æ—á–∫–∏\n"
            "‚Ä¢ anxiety_about_child ‚Üí –Ω–∞—á–Ω–∏ —Å —ç–º–ø–∞—Ç–∏–∏\n"
            "‚Ä¢ ready_to_buy ‚Üí –Ω–∞—á–Ω–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ exploring_only ‚Üí –Ω–∞—á–Ω–∏ —Å —Ñ–∞–∫—Ç–æ–≤\n\n"
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤:\n"
            "‚Ä¢ –¢—ã –≤–∏–¥–∏—à—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª, –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å/—É—Ç–æ—á–Ω–∏—Ç—å:\n"
            "  - –í–µ–∂–ª–∏–≤–æ –Ω–∞–ø–æ–º–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è: '–ö–∞–∫ —è —É–ø–æ–º–∏–Ω–∞–ª...', '–ù–∞–ø–æ–º–Ω—é, —á—Ç–æ...', '–î–∞, –µ—â–µ —Ä–∞–∑ - ...'\n"
            "  - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≥—Ä—É–±—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ '–≤—ã —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏' –∏–ª–∏ '—è —É–∂–µ –æ—Ç–≤–µ—á–∞–ª'\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫ –ø—Ä–∏—á–∏–Ω–µ –ø–æ–≤—Ç–æ—Ä–∞ (–∑–∞–±—ã–ª/–Ω–µ –ø–æ–Ω—è–ª/—É—Ç–æ—á–Ω—è–µ—Ç)\n\n"
            "–í–ê–ñ–ù–û - –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞:\n"
            "‚Ä¢ –ò–ì–ù–û–†–ò–†–£–ô —Å—Ç–∞—Ä—ã–µ offtopic –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–∞—Ä–∫–æ–≤–∫–∞, —Ñ—É—Ç–±–æ–ª, –ø–æ–≥–æ–¥–∞)\n"
            "‚Ä¢ –ù–ï –£–ü–û–ú–ò–ù–ê–ô –≤ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∫–∞–∫ offtopic\n"
            "‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∫–æ–≤–∫–µ. –î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã...'\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û: '–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...'\n\n"
            "–ò–∑–±–µ–≥–∞–π:\n"
            "‚Ä¢ –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
            "‚Ä¢ –ö–ª–∏—à–µ: '–ó–Ω–∞–µ—Ç–µ', '–ú–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–º–µ—á–∞—é—Ç', '—Ç–∞–∫ —á—Ç–æ', '–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ'\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫: '–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è'\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ –ù–∞–≤—è–∑—á–∏–≤—ã—Ö CTA –≤ –∫–æ–Ω—Ü–µ ('–ü–∏—à–∏—Ç–µ', '–ó–≤–æ–Ω–∏—Ç–µ', '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?')\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ü—Ä–∏–≤–µ—Ç') –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è - —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏\n"
            "‚Ä¢ –≠–ú–û–î–ó–ò - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ù–ò–ö–ê–ö–ò–ï –≠–ú–û–î–ó–ò\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–º–µ–Ω:\n"
            "‚Ä¢ '–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è' ‚Üí '–¥–µ–ª–∞–µ–º'\n"
            "‚Ä¢ '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' ‚Üí '–º–æ–∂–Ω–æ'\n"
            "‚Ä¢ '–Ω–∞—à–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏' ‚Üí '–Ω–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'\n"
        )

        messages: List[Dict[str, str]] = [{"role": "system", "content": system_content}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º few-shot –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CTA
        if cta_text:
            few_shot_examples = self._get_few_shot_examples(user_signal, has_cta=True)
            if few_shot_examples:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ system prompt –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
                messages.extend(few_shot_examples)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                messages.append({
                    "role": "user", 
                    "content": "–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ö–æ–∂–∏–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏:"
                })

        # –ò—Å—Ç–æ—Ä–∏—è: —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        trimmed_history = history[-self.history_limit :] if len(history) > self.history_limit else history
        if trimmed_history:
            messages.extend(trimmed_history)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        social_context = router_result.get("social_context")
        social_instruction = ""
        if social_context:
            # Router —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π social_context (greeting –∏–ª–∏ repeated_greeting)
            # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            social_map = {
                "greeting": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è. –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
                "repeated_greeting": "–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å–Ω–æ–≤–∞! –ú–æ–∂–µ—à—å –º—è–≥–∫–æ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ ('–ú—ã —É–∂–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å :)' –∏–ª–∏ '–ï—â–µ —Ä–∞–∑ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'), –∑–∞—Ç–µ–º —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞.",
                "thanks": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª. –ù–∞—á–Ω–∏ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–º–æ—á—å.",
                "apology": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–≤–∏–Ω–∏–ª—Å—è. –ù–∞—á–Ω–∏ —Å —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–µ–π —Ñ—Ä–∞–∑—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–π —á—Ç–æ –≤—Å—ë —Ö–æ—Ä–æ—à–æ –∏ –Ω–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.",
                "farewell": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—â–∞–µ—Ç—Å—è. –î–æ–±–∞–≤—å –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞."
            }
            social_instruction = social_map.get(social_context, "") + "\n"
        
        # Fallback –¥–ª—è –ø—É—Å—Ç—ã—Ö questions –Ω–∞ –æ—Å–Ω–æ–≤–µ user_signal
        if not questions:
            user_signal = router_result.get("user_signal", "exploring_only")
            if user_signal == "ready_to_buy":
                questions = ["–ù–∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã? –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π?"]
            elif user_signal == "price_sensitive":
                questions = ["–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–∫–∏–¥–∫–∞—Ö –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"]
            elif user_signal == "anxiety_about_child":
                questions = ["–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Ä–µ–±—ë–Ω–∫–µ - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"]
            else:
                questions = ["–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ —à–∫–æ–ª–µ Ukido?"]
        
        questions_block = "\n".join(f"- {q}" for q in questions)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–µ–Ω–µ
        price_instruction = ""
        if router_result.get("user_signal") == "price_sensitive":
            original_msg = router_result.get("original_message", "").lower().strip()
            if len(original_msg.split()) <= 2:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ —Ç–∏–ø–∞ "–î–æ—Ä–æ–≥–æ!"
                price_instruction = (
                    "‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ü–µ–Ω—É!\n"
                    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ –≤—ã–≥–æ–¥–∞–º–∏.\n\n"
                )
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è CTA –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–æ–Ω—Ü–µ user message
        cta_final_instruction = ""
        if cta_text:
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"\nüìù DEBUG CTA: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è {user_signal}")
            print(f"   CTA —Ç–µ–∫—Å—Ç: {cta_text[:80]}...")
            
            # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è CTA –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
            if user_signal == "ready_to_buy":
                print(f"   –ü–æ–∑–∏—Ü–∏—è: –≤ –ù–ê–ß–ê–õ–ï –æ—Ç–≤–µ—Ç–∞ (ready_to_buy)")
                cta_final_instruction = (
                    f"\n\nüî¥üî¥üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ì–û–¢–û–í –ó–ê–ü–ò–°–ê–¢–¨–°–Ø! üî¥üî¥üî¥\n"
                    f"–û–ù –Ø–í–ù–û –ü–†–û–°–ò–¢ –ó–ê–ü–ò–°–ê–¢–¨ –ï–ì–û –ù–ê –ü–†–û–ë–ù–û–ï –ó–ê–ù–Ø–¢–ò–ï!\n"
                    f"–ù–ê–ß–ù–ò —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏:\n"
                    f"'{cta_text}'\n\n"
                    f"‚ö†Ô∏è –í–ê–ñ–ù–û: –£–ø–æ–º—è–Ω–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –í –ù–ê–ß–ê–õ–ï!\n"
                    f"–ù–ï –î–£–ë–õ–ò–†–£–ô –µ—ë –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞!\n"
                    f"–û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ - —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!\n"
                    f"–ü–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö."
                )
            elif user_signal == "price_sensitive":
                print(f"   –ü–æ–∑–∏—Ü–∏—è: –≤ –ù–ê–ß–ê–õ–ï –æ—Ç–≤–µ—Ç–∞ (price_sensitive)")
                cta_final_instruction = (
                    f"\n\nüî¥üî¥üî¥ –§–ò–ù–ê–õ–¨–ù–û–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï üî¥üî¥üî¥\n"
                    f"{cta_detail_instruction}\n"
                    f"–¢–µ–∫—Å—Ç –¥–ª—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: '{cta_text}'\n"
                    f"–ù–ê–ß–ù–ò —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–¥–∫–µ/—Ä–∞—Å—Å—Ä–æ—á–∫–µ!\n"
                    f"‚ö†Ô∏è –ù–ï –î–£–ë–õ–ò–†–£–ô —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - —É–ø–æ–º—è–Ω–∏ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ!\n"
                    f"–ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–∏—à—å - –æ—Ç–≤–µ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ü–†–û–í–ê–õ–¨–ù–´–ú!"
                )
            else:
                print(f"   –ü–æ–∑–∏—Ü–∏—è: –≤ –ö–û–ù–¶–ï –æ—Ç–≤–µ—Ç–∞ (exploring/anxiety)")
                cta_final_instruction = (
                    f"\n\nüî¥üî¥üî¥ –§–ò–ù–ê–õ–¨–ù–û–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï üî¥üî¥üî¥\n"
                    f"{cta_detail_instruction}\n"
                    f"–¢–µ–∫—Å—Ç –¥–ª—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: '{cta_text}'\n"
                    f"–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n"
                    f"‚ö†Ô∏è –£–ø–æ–º—è–Ω–∏ –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ü–µ, –ù–ï –¥—É–±–ª–∏—Ä—É–π –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–µ!\n"
                    f"–ê–¥–∞–ø—Ç–∏—Ä—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ —Å—É—Ç—å.\n"
                    f"–ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–∏—à—å - –æ—Ç–≤–µ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ü–†–û–í–ê–õ–¨–ù–´–ú!"
                )
        
        messages.append(
            {
                "role": "user",
                "content": (
                    social_instruction +
                    price_instruction +
                    "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º. "
                    "–í–ê–ñ–ù–û: –û–±—ä—ë–º –°–¢–†–û–ì–û 100-150 —Å–ª–æ–≤ (–Ω–µ –±–æ–ª—å—à–µ!). –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ.\n"
                    "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –≠–ú–û–î–ó–ò.\n"
                    "–ê—Å–ø–µ–∫—Ç—ã –¥–ª—è —É—á—ë—Ç–∞:\n" + questions_block +
                    cta_final_instruction  # CTA –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!
                ),
            }
        )
        return messages

    def _strip_source_citations(self, text: str) -> str:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –º–µ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤–∏–¥–∞ [doc: filename.md] –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞."""
        pattern = re.compile(r"\[doc:\s*[^\]]+\]")
        return pattern.sub("", text)

    # --- –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–ª–∞–¥–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
    def _remove_question_headings(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã,
        –≤–∏–¥–∞ '1. **...?...**' –∏–ª–∏ '- **...?...**' –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–æ–≤. –ù–µ —Ç—Ä–æ–≥–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
        """
        lines = text.splitlines()
        cleaned_lines: List[str] = []
        heading_re = re.compile(r"^\s*(?:\d+\.|-)\s*\*\*[^*\n]*\?\*\*\s*$")
        for ln in lines:
            if heading_re.match(ln):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                continue
            cleaned_lines.append(ln)
        # –°–∂–∞—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        out: List[str] = []
        empty = 0
        for ln in cleaned_lines:
            if ln.strip() == "":
                empty += 1
                if empty <= 2:
                    out.append(ln)
            else:
                empty = 0
                out.append(ln)
        return "\n".join(out).strip()

    def _humanize_missing_info(self, text: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç —Å—É—Ö–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ.
        –ü—Ä–∏–º–µ—Ä—ã: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", "–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ" ‚Üí —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞.
        """
        replacements = [
            r"–Ω–µ—Ç\s+–¥–∞–Ω–Ω—ã—Ö\s+–≤\s+–¥–æ–∫—É–º–µ–Ω—Ç(–∞—Ö|–∞—Ö–∞—Ö|–∞—Ö–∞—Ö)?",
            r"–≤\s+–¥–æ–∫—É–º–µ–Ω—Ç(–∞—Ö|–∞—Ö–∞—Ö|–∞—Ö–∞—Ö)?\s+–Ω–µ\s+—É–∫–∞–∑–∞–Ω–æ",
            r"–∏–Ω—Ñ–æ—Ä–º–∞—Ü(–∏–∏|–∏—è)\s+–≤\s+–¥–æ–∫—É–º–µ–Ω—Ç(–∞—Ö|–∞—Ö–∞—Ö|–∞—Ö–∞—Ö)?\s+–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        ]
        friendly = "–í –Ω–∞—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —ç—Ç–æ–≥–æ –Ω–µ—Ç."
        out = text
        for pat in replacements:
            out = re.sub(pat, friendly, out, flags=re.IGNORECASE)
        return out

    def _strip_service_labels(self, text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ '–ö–æ—Ä–æ—Ç–∫–æ:', '–í–∞–∂–Ω–æ:', '–ò—Ç–æ–≥–æ:', '–ú–æ–≥—É –ø–æ–º–æ—á—å:'
        –ü—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
        out_lines: List[str] = []
        label_re = re.compile(r"^\s*(–ö–æ—Ä–æ—Ç–∫–æ|–í–∞–∂–Ω–æ|–ò—Ç–æ–≥–æ|–ú–æ–≥—É –ø–æ–º–æ—á—å)\s*:\s*(.*)$", re.IGNORECASE)
        for ln in text.splitlines():
            m = label_re.match(ln)
            if m:
                content_after = m.group(2).strip()
                if content_after:
                    out_lines.append(content_after)
                # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ª–µ–π–±–ª –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
            else:
                out_lines.append(ln)
        return "\n".join(out_lines)

    def _strip_generic_cta(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç –Ω–∞–≤—è–∑—á–∏–≤—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ CTA –≤—Ä–æ–¥–µ '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...' –∏ –ø–æ—Ö–æ–∂–∏–µ."""
        patterns = [
            r"^\s*–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å .*–≤–æ–ø—Ä–æ—Å",
            r"^\s*–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã",
            r"^\s*–ì–æ—Ç–æ–≤(–∞|—ã)? –ø–æ–º–æ—á—å",
            r"^\s*–ú–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            r"^\s*–Ø –º–æ–≥—É .* (—É—Ç–æ—á–Ω–∏—Ç—å|–ø–æ–º–æ—á—å)",
        ]
        lines = [ln for ln in text.splitlines() if not any(re.search(p, ln, flags=re.IGNORECASE) for p in patterns)]
        # —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        while lines and lines[-1].strip() == "":
            lines.pop()
        return "\n".join(lines)

    # –£–¥–∞–ª—è–µ–º –º–µ—Ç–æ–¥ _stylize_response, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
    
    def _final_sanitize(self, text: str) -> str:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è –∏ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
        out = text
        
        # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
        english_to_russian = {
            "empathy": "—ç–º–ø–∞—Ç–∏—á–Ω—ã–º–∏",
            "soft skills": "–≥–∏–±–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
            "feedback": "–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
            "team building": "–∫–æ–º–∞–Ω–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "deadline": "—Å—Ä–æ–∫",
            "workshop": "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",
            "mentor": "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
        }
        
        for eng, rus in english_to_russian.items():
            # –ó–∞–º–µ–Ω—è–µ–º —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            out = out.replace(eng, rus)
            out = out.replace(eng.capitalize(), rus.capitalize())
        
        # –ó–∞–º–µ–Ω—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
        # (Claude –∏–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π —à–∫–æ–ª—ã)
        ukrainian_to_russian = {
            "–ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç",
            "–ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏": "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å",
            "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "–¥—ñ—Ç–µ–π": "–¥–µ—Ç–µ–π",
            "–¥—ñ—Ç–∏": "–¥–µ—Ç–∏",
            "–¥–∏—Ç–∏–Ω–∞": "—Ä–µ–±—ë–Ω–æ–∫",
            "–Ω–∞–≤—á–∞–Ω–Ω—è": "–æ–±—É—á–µ–Ω–∏–µ",
            "–Ω–∞–≤—á–∞—é—Ç—å": "–æ–±—É—á–∞—é—Ç",
            "–Ω–∞–≤—á–∞—Ç–∏—Å—è": "—É—á–∏—Ç—å—Å—è",
            "–≤—á–∏—Ç–µ–ª—å": "—É—á–∏—Ç–µ–ª—å",
            "–≤—á–∏—Ç–µ–ª—ñ": "—É—á–∏—Ç–µ–ª—è",
            "–±–∞—Ç—å–∫–∏": "—Ä–æ–¥–∏—Ç–µ–ª–∏",
            "–±–∞—Ç—å–∫—ñ–≤": "—Ä–æ–¥–∏—Ç–µ–ª–µ–π",
            "—Ä–æ–∑–≤–∏—Ç–æ–∫": "—Ä–∞–∑–≤–∏—Ç–∏–µ",
            "–æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ": "–¥—Ä—É–≥ –¥—Ä—É–≥–∞",
            "–¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å": "–ø–æ–º–æ–≥–∞—é—Ç",
            "–¥–æ–ø–æ–º–æ–≥—Ç–∏": "–ø–æ–º–æ—á—å",
            "–ø—Ä–∞—Ü—é—é—Ç—å": "—Ä–∞–±–æ—Ç–∞—é—Ç",
            "–ø—Ä–∞—Ü—é–≤–∞—Ç–∏": "—Ä–∞–±–æ—Ç–∞—Ç—å"
        }
        
        for ukr, rus in ukrainian_to_russian.items():
            # –ó–∞–º–µ–Ω—è–µ–º —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            out = out.replace(ukr, rus)
            out = out.replace(ukr.capitalize(), rus.capitalize())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è - —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if out and not out.rstrip().endswith(('.', '!', '?', '"', '¬ª')):
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            sentences = re.split(r'(?<=[.!?])\s+', out)
            if len(sentences) > 1:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                out = ' '.join(sentences[:-1])
                # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º—ã—Å–ª–∏
                if not out.rstrip().endswith(('.', '!', '?')):
                    out = out.rstrip() + '.'
            else:
                # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç - –æ–¥–Ω–æ –Ω–µ–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
                out = out.rstrip() + '...'
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã "00" –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–ª–µ–π –∏–∑ —á–∏—Å–µ–ª
        # 1. –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–∏–ø–∞ "30-—Å–µ–∫—É–Ω–¥–Ω–æ–µ00", "5-–º–∏–Ω—É—Ç–Ω–æ–µ00"
        out = re.sub(r'(\d+)-([\u0430-\u044f\u0451]+)00\b', r'\1-\2', out, flags=re.IGNORECASE)
        
        # 2. –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º "00" —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ë–£–ö–í, –Ω–µ –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä!
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ –Ω—É–ª–µ–π –∏–∑ "7000", "2800" –∏ —Ç.–¥.
        out = re.sub(r'([–∞-—è–ê-–Ø—ë–Åa-zA-Z]+)00\s+', r'\1 ', out)  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –±—É–∫–≤!
        
        # 3. –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ "00" (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–µ–ª –∏ –Ω–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º negative lookbehind –∏ lookahead —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å —á–∏—Å–ª–∞
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:00
        out = re.sub(r'(?<!\d)(?<!:)00(?!\d)', '', out)  # "00" –Ω–µ –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –Ω–µ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
        
        # 4. –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        out = re.sub(r'\s{2,}', ' ', out)
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è
        out = out.replace("!", ".")
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        safe = out
        safe = re.sub(r"\b—Ç\.–¥\.", "—Ç_–¥", safe)
        safe = re.sub(r"\b—Ç\.–ø\.", "—Ç_–ø", safe)
        
        chunks = re.split(r"(?<=[\.\?\!])\s+|\n", safe)
        sentences: List[str] = []
        for ch in chunks:
            s = ch.strip()
            if s:
                sentences.append(s)
        
        seen = set()
        deduped: List[str] = []
        for s in sentences:
            key = re.sub(r"\s+", " ", s.lower()).strip()
            if key and key not in seen:
                seen.add(key)
                deduped.append(s)
        
        # –°–∫–ª–µ–π–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        text_out = " ".join(deduped)
        text_out = text_out.replace("—Ç_–¥", "—Ç.–¥.").replace("—Ç_–ø", "—Ç.–ø.")
        text_out = "\n".join(line.rstrip() for line in text_out.splitlines())
        text_out = re.sub(r"\n{3,}", "\n\n", text_out)
        return text_out.strip()
    
    def _sanitize_style(self, text: str) -> str:
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        return self._final_sanitize(text)
    
    def _should_add_offer(self, user_signal: str, history: list, offer: dict, current_message: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å offer (rate limiting + –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        
        Args:
            user_signal: –¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            offer: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            current_message: –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏)
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å offer, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        """
        if not history and not current_message:
            return True  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å
        
        # ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ==========
        # –ú–∞–∫—Å–∏–º—É–º 2 CTA –ø—Ä–æ —Å–∫–∏–¥–∫–∏ –∑–∞ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥
        discount_count = self._count_cta_occurrences("price_sensitive", history)
        if user_signal == "price_sensitive" and discount_count >= 2:
            print(f"üîí –ì–õ–û–ë–ê–õ–¨–ù–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –£–∂–µ –±—ã–ª–æ {discount_count} CTA –ø—Ä–æ —Å–∫–∏–¥–∫–∏ (–º–∞–∫—Å–∏–º—É–º 2)")
            return False
        
        # –ú–∏–Ω–∏–º—É–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ª—é–±—ã–º–∏ CTA
        last_cta_position = -1
        for i, msg in enumerate(history):
            if msg.get("role") == "assistant":
                content = msg.get("content", "").lower()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –õ–Æ–ë–û–ì–û CTA
                all_cta_phrases = [
                    "–¥–µ–π—Å—Ç–≤—É—é—Ç —Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫–∞", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "10% –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ",
                    "–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ", "–ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
                    "ukido.ua/trial", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è"
                ]
                if any(phrase in content for phrase in all_cta_phrases):
                    last_cta_position = i
        
        if last_cta_position >= 0 and len(history) - last_cta_position < 3:
            messages_since = len(history) - last_cta_position
            print(f"‚è∞ –ì–õ–û–ë–ê–õ–¨–ù–û–ï: –ü–æ—Å–ª–µ–¥–Ω–∏–π CTA –±—ã–ª {messages_since} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∑–∞–¥ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)")
            return False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è exploring_only –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Ü–µ–Ω—ã
        if user_signal == "exploring_only":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ü–µ–Ω—ã
            price_keywords = ["–¥–æ—Ä–æ–≥–æ", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–≥—Ä–Ω", "–≥—Ä–∏–≤–µ–Ω"]
            for msg in history[-4:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø–∞—Ä—ã
                if msg.get("role") == "user":
                    user_text = msg.get("content", "").lower()
                    if any(keyword in user_text for keyword in price_keywords):
                        print(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ CTA –¥–ª—è exploring_only: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ü–µ–Ω—ã")
                        return False
        
        # ========== –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ü–û –°–ò–ì–ù–ê–õ–ê–ú ==========
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_message –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        if current_message:
            last_user_msg = current_message.lower()
        else:
            last_user_msg = ""
            for msg in reversed(history):
                if msg.get("role") == "user":
                    last_user_msg = msg.get("content", "").lower()
                    break
        
        # –î–ª—è price_sensitive - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if user_signal == "price_sensitive":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∫–∏–¥–∫–∞—Ö/—Ä–∞—Å—Å—Ä–æ—á–∫–µ
            skip_phrases = ["—Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫–∞", "—Ä–∞—Å—Å—Ä–æ—á–∫", "–µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫", "–∫–∞–∫–∏–µ —Å–∫–∏–¥–∫"]
            print(f"üîç DEBUG _should_add_offer –¥–ª—è price_sensitive:")
            print(f"   last_user_msg: '{last_user_msg}'")
            
            for phrase in skip_phrases:
                if phrase in last_user_msg:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ '{phrase}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    print("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä—è–º–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Å–∫–∏–¥–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CTA")
                    return False
            print(f"   ‚≠ï –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º rate limiting...")
        
        # –î–ª—è price_sensitive - rate limiting (–∫–∞–∂–¥–æ–µ 2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if user_signal == "price_sensitive":
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã–ª price_sensitive –ø–æ–¥—Ä—è–¥
            price_sensitive_streak = 0
            for msg in reversed(history):
                if msg.get("role") == "assistant":
                    metadata = msg.get("metadata", {})
                    if metadata.get("user_signal") == "price_sensitive":
                        price_sensitive_streak += 1
                    elif metadata.get("user_signal"):
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –±—ã–ª –¥—Ä—É–≥–æ–π —Å–∏–≥–Ω–∞–ª
            
            # –î–æ–±–∞–≤–ª—è–µ–º CTA —Ç–æ–ª—å–∫–æ –Ω–∞ —á—ë—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö (0, 2, 4...)
            if price_sensitive_streak % 2 == 1:
                print(f"üîÑ Rate limiting: price_sensitive streak={price_sensitive_streak}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CTA")
                return False
        
        # –î–ª—è anxiety_about_child - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ rate limiting
        if user_signal == "anxiety_about_child":
            # –ù–û–í–û–ï: –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º CTA —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ anxiety
            # –ñ–¥—ë–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è —Å anxiety, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–≤–µ—Ä–∏–µ
            anxiety_count = 0
            for i in range(len(history)-1, -1, -1):
                msg = history[i]
                # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å anxiety (–¥–æ —Å–º–µ–Ω—ã —Å–∏–≥–Ω–∞–ª–∞)
                if msg.get("role") == "assistant":
                    metadata = msg.get("metadata", {})
                    if metadata.get("user_signal") == "anxiety_about_child":
                        anxiety_count += 1
                    # –ï—Å–ª–∏ –±—ã–ª –¥—Ä—É–≥–æ–π —Å–∏–≥–Ω–∞–ª, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–¥—Å—á—ë—Ç
                    elif metadata.get("user_signal") and metadata.get("user_signal") != "anxiety_about_child":
                        break
            
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º CTA —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ anxiety
            if anxiety_count < 2:
                print(f"üïë –ó–∞–¥–µ—Ä–∂–∫–∞ CTA –¥–ª—è anxiety: —Ç–æ–ª—å–∫–æ {anxiety_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º —Å–∏–≥–Ω–∞–ª–æ–º, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2")
                return False
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏
            trial_phrases = ["–ø—Ä–æ–±–Ω–æ–µ", "–ø—Ä–æ–±–Ω—ã–π", "–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–±–µ—Å–ø–ª–∞—Ç–Ω"]
            if any(phrase in last_user_msg for phrase in trial_phrases):
                print("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CTA")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            recent_assistant_messages = []
            for msg in history[-8:]:  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –ø–∞—Ä—ã
                if msg.get("role") == "assistant":
                    recent_assistant_messages.append(msg.get("content", ""))
            
            # –ï—Å–ª–∏ CTA –ø—Ä–æ —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–µ–π —É–∂–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ
            for msg_content in recent_assistant_messages[-2:]:  # –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –æ—Ç–≤–µ—Ç–∞—Ö
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã CTA –¥–ª—è anxiety
                anxiety_cta_phrases = [
                    "–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ", "–ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
                    "–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–æ—Ü–µ–Ω–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏",
                    "–ø–æ–ø—Ä–æ–±—É–µ—Ç", "–æ—Ü–µ–Ω–∏—Ç–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
                ]
                if any(phrase in msg_content.lower() for phrase in anxiety_cta_phrases):
                    print("üîÑ Rate limiting: CTA –¥–ª—è anxiety –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return False
        
        # –î–ª—è ready_to_buy - rate limiting –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if user_signal == "ready_to_buy":
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–≤–æ—Ä–∏—Ç –æ –∑–∞–ø–∏—Å–∏
            recording_phrases = ["–∑–∞–ø–∏—Å–∞–ª–∞—Å—å", "–∑–∞–ø–∏—Å–∞–ª—Å—è", "–æ—Ç–ø—Ä–∞–≤–∏–ª", "–∑–∞–ø–æ–ª–Ω–∏–ª", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª"]
            if any(phrase in last_user_msg for phrase in recording_phrases):
                print("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CTA")
                return False
            
            # Rate limiting - –Ω–µ —á–∞—â–µ —á–µ–º –∫–∞–∂–¥–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            recent_count = 0
            ready_cta_phrases = ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "ukido.ua", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è"]
            
            for msg in history[-4:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if msg.get("role") == "assistant":
                    content = msg.get("content", "").lower()
                    if any(phrase in content for phrase in ready_cta_phrases):
                        recent_count += 1
            
            if recent_count >= 1:
                print("üîÑ Rate limiting: CTA –¥–ª—è ready_to_buy –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return False
        
        return True
    
    def _inject_offer(self, response: str, offer: dict, user_signal: str) -> str:
        """–û—Ä–≥–∞–Ω–∏—á–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞
        
        Args:
            response: –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            offer: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑ offers_catalog
            user_signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –û—Ç–≤–µ—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏ –º–∞—Ä–∫–µ—Ä–æ–º
        """
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        response_trimmed = response.rstrip()
        if response_trimmed.endswith('.'):
            response_trimmed = response_trimmed[:-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç placement
        if offer.get("placement") == "end_with_urgency":
            transition = "!\n\n"  # –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è urgency
        else:
            transition = ".\n\n"  # –û–±—ã—á–Ω–∞—è —Ç–æ—á–∫–∞
        
        # –ú–∞—Ä–∫–µ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–∏–¥–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # markers = {
        #     "anxiety_about_child": "[CTA_ANXIETY] ",
        #     "price_sensitive": "[CTA_PRICE] ",
        #     "ready_to_buy": "[CTA_READY] ",
        #     "exploring_only": ""
        # }
        # marker = markers.get(user_signal, "")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó –º–∞—Ä–∫–µ—Ä–∞
        return f"{response_trimmed}{transition}{offer['text']}"
    
    def _get_message_metadata(self, msg: dict) -> dict:
        """Helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è metadata —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        
        Args:
            msg: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            
        Returns:
            Metadata —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        """
        if "metadata" in msg:
            return msg["metadata"]
        
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ metadata
        return {
            "cta_added": False,
            "cta_type": None,
            "user_signal": "exploring_only",
            "intent": "success",
            "humor_generated": False
        }
    
    def _count_cta_occurrences(self, user_signal: str, history: list) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ CTA –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è metadata –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏.
        
        Args:
            user_signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ CTA
        """
        if not history:
            return 0
            
        count = 0
        for msg in history:
            if msg.get("role") == "assistant":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è metadata —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
                metadata = self._get_message_metadata(msg)
                if metadata.get("cta_type") == user_signal and metadata.get("cta_added"):
                    count += 1
                    
        return count
    
    def _verify_cta_included(self, response: str, cta_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–∏–ª –ª–∏ Claude CTA –≤ –æ—Ç–≤–µ—Ç
        
        –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã, –∞ –Ω–µ —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        """
        response_lower = response.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É CTA
        if "—Å–∫–∏–¥–∫" in cta_text.lower() or "–ø—Ä–æ—Ü–µ–Ω—Ç" in cta_text.lower():
            # –î–ª—è —Å–∫–∏–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ª—é–±–æ–π –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
            discount_concepts = ["—Å–∫–∏–¥–∫", "–ø—Ä–æ—Ü–µ–Ω—Ç", "%", "—ç–∫–æ–Ω–æ–º–∏", "–¥–µ—à–µ–≤–ª–µ", 
                                "—Å–Ω–∏–∂–µ–Ω", "—Ä–∞—Å—Å—Ä–æ—á–∫", "–æ–ø–ª–∞—Ç", "—Å—Ç–æ–∏–º–æ—Å—Ç", "–¥–æ—Å—Ç—É–ø–Ω"]
            found = any(concept in response_lower for concept in discount_concepts)
            if found:
                print(f"‚úÖ CTA –æ–±–Ω–∞—Ä—É–∂–µ–Ω: –Ω–∞—à–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã —Å–∫–∏–¥–æ–∫/—Ä–∞—Å—Å—Ä–æ—á–∫–∏")
            return found
        
        if "–ø—Ä–æ–±–Ω–æ–µ" in cta_text.lower() or "–±–µ—Å–ø–ª–∞—Ç–Ω" in cta_text.lower():
            # –î–ª—è –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            trial_concepts = ["–ø—Ä–æ–±–Ω", "–±–µ—Å–ø–ª–∞—Ç–Ω", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
                             "–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–æ—Ü–µ–Ω–∏—Ç—å", "–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"]
            found = any(concept in response_lower for concept in trial_concepts)
            if found:
                print(f"‚úÖ CTA –æ–±–Ω–∞—Ä—É–∂–µ–Ω: –Ω–∞—à–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return found
        
        if "ukido.ua" in cta_text.lower():
            # –î–ª—è –∑–∞–ø–∏—Å–∏
            signup_concepts = ["ukido.ua", "–∑–∞–ø–∏—Å", "–∑–∞–ø–æ–ª–Ω", "—Ñ–æ—Ä–º", "—Å–∞–π—Ç", 
                              "—Ä–µ–≥–∏—Å—Ç—Ä", "–æ—Ñ–æ—Ä–º", "–ø–µ—Ä–µ–π—Ç–∏", "—Å—Å—ã–ª–∫"]
            found = any(concept in response_lower for concept in signup_concepts)
            if found:
                print(f"‚úÖ CTA –æ–±–Ω–∞—Ä—É–∂–µ–Ω: –Ω–∞—à–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã –∑–∞–ø–∏—Å–∏")
            return found
        
        # Fallback - –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 30% —Å–ª–æ–≤ –∏–∑ CTA –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
        cta_words = set(cta_text.lower().split())
        response_words = set(response_lower.split())
        common_words = cta_words & response_words
        found = len(common_words) >= len(cta_words) * 0.3
        if found:
            print(f"‚úÖ CTA –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ fallback: {len(common_words)}/{len(cta_words)} —Å–ª–æ–≤")
        return found
    
    def _get_few_shot_examples(self, user_signal: str, has_cta: bool) -> List[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç few-shot –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CTA
        
        Args:
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ready_to_buy, anxiety_about_child, etc.)
            has_cta: –ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å CTA
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user/assistant", "content": "..."}]
        """
        examples = []
        
        if has_cta:
            if user_signal == "ready_to_buy":
                # –í–ê–ñ–ù–û: –¥–ª—è ready_to_buy CTA —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ, –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π!
                examples = [
                    {"role": "user", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞ –∫—É—Ä—Å. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"},
                    {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞ ukido.ua/trial - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –ø–∞—Å–ø–æ—Ä—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏. –ì—Ä—É–ø–ø—ã —Å—Ç–∞—Ä—Ç—É—é—Ç –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω –¥–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç. –û–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞."},
                    {"role": "user", "content": "–ó–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å –Ω–∞ –∫—É—Ä—Å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞"},  
                    {"role": "assistant", "content": "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å \"–ö–∞–ø–∏—Ç–∞–Ω –ü—Ä–æ–µ–∫—Ç–æ–≤\" –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ ukido.ua/trial - —Ç–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–π –≥—Ä—É–ø–ø–µ. –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ. –≠—Ç–æ—Ç –∫—É—Ä—Å –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ 11-14 –ª–µ—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ª–∏–¥–µ—Ä—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ó–∞–Ω—è—Ç–∏—è –æ–Ω–ª–∞–π–Ω –¥–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 90 –º–∏–Ω—É—Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü, –Ω–æ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É."}
                ]
            elif user_signal == "anxiety_about_child":
                examples = [
                    {"role": "user", "content": "–ú–æ–π —Ä–µ–±—ë–Ω–æ–∫ –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –±–æ—é—Å—å –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è"},
                    {"role": "assistant", "content": "–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à—É —Ç—Ä–µ–≤–æ–≥—É - –º–Ω–æ–≥–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ —Å —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –£ –Ω–∞—Å –º–∞–ª–µ–Ω—å–∫–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ 6 –¥–µ—Ç–µ–π, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ü–µ–¥–∞–≥–æ–≥–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω—ã —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç—å–º–∏ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–∞—Ä–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ–≤–ª–µ–∫–∞—è –≤ –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–∞–±–æ—Ç—É. 80% –Ω–∞—à–∏—Ö –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ —É–∂–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∑–∞–Ω—è—Ç–∏—è—Ö, –∏ —á—Ç–æ–±—ã –≤—ã —Å–∞–º–∏ —É–≤–∏–¥–µ–ª–∏ –Ω–∞—à—É –º–µ—Ç–æ–¥–∏–∫—É –≤ –¥–µ–π—Å—Ç–≤–∏–∏, –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ."}
                ]
            elif user_signal == "price_sensitive":
                # –î–ª—è price_sensitive CTA –≤ –Ω–∞—á–∞–ª–µ, –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!
                examples = [
                    {"role": "user", "content": "7000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü?! –≠—Ç–æ –≥—Ä–∞–±—ë–∂!"},
                    {"role": "assistant", "content": "–£ –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞ - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è –¥–æ 6300 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞. –ó–∞ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ —Ä–µ–±—ë–Ω–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 8 –∑–∞–Ω—è—Ç–∏–π —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –≤ –º–∏–Ω–∏-–≥—Ä—É–ø–ø–µ –¥–æ 6 —á–µ–ª–æ–≤–µ–∫. –≠—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º –¥–≤–∞ –∑–∞–Ω—è—Ç–∏—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ä–∞–∑–¥–æ –º–∞—Å—à—Ç–∞–±–Ω–µ–µ - —Ä–∞–∑–≤–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å, –∞ –Ω–µ –Ω–∞—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã."},
                    {"role": "user", "content": "–î–æ—Ä–æ–≥–æ! –£ –¥—Ä—É–≥–∏—Ö –¥–µ—à–µ–≤–ª–µ!"},
                    {"role": "assistant", "content": "–î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - –≤—Å–µ–≥–æ 2300 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü. –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ —Å–∫–∏–¥–∫–∞ 15%. –î–∞, –º–∞—Å—Å–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ 15-20 —á–µ–ª–æ–≤–µ–∫ –¥–µ—à–µ–≤–ª–µ, –Ω–æ —É –Ω–∞—Å –≥—Ä—É–ø–ø—ã –¥–æ 6 –¥–µ—Ç–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–º—É. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏ —Å –æ–ø—ã—Ç–æ–º 8-15 –ª–µ—Ç, –∞ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç—ã. –í—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–Ω —É–∂–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏–π."},
                    {"role": "user", "content": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç? –î–æ—Ä–æ–≥–æ –Ω–∞–≤–µ—Ä–Ω–æ–µ?"},
                    {"role": "assistant", "content": "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 6000 –¥–æ 8000 –≥—Ä–Ω –≤ –º–µ—Å—è—Ü, –Ω–æ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ - –ø–æ–ª—É—á–∞–µ—Ç—Å—è 5400 –≥—Ä–Ω –≤–º–µ—Å—Ç–æ 6000. –î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫ –∏–ª–∏ –Ω–∞—à–∞ –Ω–∞ 5 –º–µ—Å—è—Ü–µ–≤. –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ —Å–∫–∏–¥–∫–∞ 15%. –≠—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤—Å—é –∂–∏–∑–Ω—å - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è."}
                ]
            else:  # exploring_only
                examples = [
                    {"role": "user", "content": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –º–µ—Ç–æ–¥–∏–∫–µ"},
                    {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –ù–∞—à–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ - 80% –≤—Ä–µ–º–µ–Ω–∏ –¥–µ—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∏–≥—Ä—É –∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: –¥–µ—Ç–∏ —É—á–∞—Ç—Å—è –≤—ã—Å—Ç—É–ø–∞—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ, —É–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏—è–º–∏. –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–º–∏–Ω–∫—É, –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—Ä–æ–¥–µ Miro –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–π. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, –ø–µ—Ä–≤–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É –Ω–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ –∏–∑–Ω—É—Ç—Ä–∏."}
                ]
        
        return examples
    
    def _extract_key_info(self, cta_text: str) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ CTA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Args:
            cta_text: –¢–µ–∫—Å—Ç CTA
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        """
        keywords = []
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö CTA
        if "–ø—Ä–æ–±–Ω–æ–µ" in cta_text.lower() or "–±–µ—Å–ø–ª–∞—Ç–Ω" in cta_text.lower():
            keywords.extend(["–ø—Ä–æ–±–Ω–æ–µ", "–±–µ—Å–ø–ª–∞—Ç–Ω"])
        if "—Å–∫–∏–¥–∫" in cta_text.lower():
            keywords.append("—Å–∫–∏–¥–∫")
        if "–ø—Ä–æ—Ü–µ–Ω—Ç" in cta_text.lower():
            keywords.append("–ø—Ä–æ—Ü–µ–Ω—Ç")
        if "ukido.ua" in cta_text.lower():
            keywords.append("ukido.ua")
        if "—Ä–∞—Å—Å—Ä–æ—á–∫" in cta_text.lower():
            keywords.append("—Ä–∞—Å—Å—Ä–æ—á–∫")
        if "–∑–∞–ø–∏—Å—å" in cta_text.lower() or "–∑–∞–ø–∏—à" in cta_text.lower():
            keywords.append("–∑–∞–ø–∏—Å")
            
        return keywords
    
    def _get_cta_marker(self, user_signal: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è CTA
        
        Args:
            user_signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–º–∞—Ä–∫–µ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç)
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # markers = {
        #     "anxiety_about_child": "[CTA_ANXIETY]",
        #     "price_sensitive": "[CTA_PRICE]",
        #     "ready_to_buy": "[CTA_READY]",
        #     "exploring_only": "[CTA_EXPLORE]"
        # }
        # marker = markers.get(user_signal, "[CTA]")
        # return f"<!-- {marker} -->"
        return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
