"""
persistence_manager.py - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è MVP
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
"""

import json
import os
import re
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging

logger = logging.getLogger(__name__)


class PersistenceManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, base_path: str = "data/persistent_states", 
                 max_age_days: int = 7,
                 max_files: int = 10000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        
        Args:
            base_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
            max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ –¥–Ω—è—Ö
            max_files: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        self.base_path = Path(base_path)
        self.max_age_days = max_age_days
        self.max_files = max_files
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.base_path.mkdir(parents=True, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._cleanup_old_files()
        
        print(f"üíæ PersistenceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.base_path}")
        print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤: {max_age_days} –¥–Ω–µ–π")
        print(f"   - –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤: {max_files}")
    
    def _sanitize_user_id(self, user_id: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç user_id –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            user_id: –ò—Å—Ö–æ–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        """
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
        safe_id = re.sub(r'[^a-zA-Z0-9_-]', '_', user_id)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return safe_id[:100]
    
    def _get_file_path(self, user_id: str) -> Path:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        """
        safe_id = self._sanitize_user_id(user_id)
        return self.base_path / f"{safe_id}.json"
    
    def save_state(self, user_id: str, state_data: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            file_path = self._get_file_path(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            state_data['user_id'] = user_id
            state_data['last_updated'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(state_data, f, ensure_ascii=False, indent=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª—å—à–µ 100KB)
            if file_path.stat().st_size > 100 * 1024:
                logger.warning(f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100KB")
                # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
                if 'history' in state_data and len(state_data['history']) > 10:
                    state_data['history'] = state_data['history'][-10:]
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(state_data, f, ensure_ascii=False, indent=2)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")
            return False
    
    def load_state(self, user_id: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            file_path = self._get_file_path(user_id)
            
            if not file_path.exists():
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                state_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if 'last_updated' in state_data:
                last_updated = datetime.fromisoformat(state_data['last_updated'])
                if datetime.now() - last_updated > timedelta(days=self.max_age_days):
                    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id} —É—Å—Ç–∞—Ä–µ–ª–æ, —É–¥–∞–ª—è–µ–º")
                    file_path.unlink()
                    return None
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
            return state_data
            
        except json.JSONDecodeError as e:
            logger.error(f"–ü–æ–≤—Ä–µ–∂–¥—ë–Ω JSON –¥–ª—è {user_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                self._get_file_path(user_id).unlink()
            except:
                pass
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")
            return None
    
    def delete_state(self, user_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            file_path = self._get_file_path(user_id)
            if file_path.exists():
                file_path.unlink()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")
            return False
    
    def _cleanup_old_files(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        try:
            now = datetime.now()
            cutoff_time = now - timedelta(days=self.max_age_days)
            
            deleted_count = 0
            for file_path in self.base_path.glob("*.json"):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                    mtime = datetime.fromtimestamp(file_path.stat().st_mtime)
                    if mtime < cutoff_time:
                        file_path.unlink()
                        deleted_count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
            
            if deleted_count > 0:
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            files = list(self.base_path.glob("*.json"))
            if len(files) > self.max_files:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–µ–π—à–∏–µ
                files.sort(key=lambda f: f.stat().st_mtime)
                to_delete = len(files) - self.max_files
                for file_path in files[:to_delete]:
                    try:
                        file_path.unlink()
                        deleted_count += 1
                    except:
                        pass
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {to_delete} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def save_all_states(self, states: Dict[str, Dict[str, Any]]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è graceful shutdown)
        
        Args:
            states: –°–ª–æ–≤–∞—Ä—å {user_id: state_data}
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        """
        saved_count = 0
        for user_id, state_data in states.items():
            if self.save_state(user_id, state_data):
                saved_count += 1
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{len(states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ shutdown")
        return saved_count
    
    def load_all_states(self) -> Dict[str, Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {user_id: state_data}
        """
        states = {}
        loaded_count = 0
        
        try:
            for file_path in self.base_path.glob("*.json"):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    user_id = file_path.stem
                    
                    with open(file_path, 'r', encoding='utf-8') as f:
                        state_data = json.load(f)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
                    if 'last_updated' in state_data:
                        last_updated = datetime.fromisoformat(state_data['last_updated'])
                        if datetime.now() - last_updated > timedelta(days=self.max_age_days):
                            file_path.unlink()
                            continue
                    
                    states[user_id] = state_data
                    loaded_count += 1
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_path}: {e}")
            
            print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        
        return states
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            files = list(self.base_path.glob("*.json"))
            total_size = sum(f.stat().st_size for f in files)
            
            return {
                "total_files": len(files),
                "total_size_mb": round(total_size / (1024 * 1024), 2),
                "oldest_file": min(files, key=lambda f: f.stat().st_mtime).name if files else None,
                "newest_file": max(files, key=lambda f: f.stat().st_mtime).name if files else None,
                "base_path": str(self.base_path)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

def create_state_snapshot(history_manager, user_signals_history: Dict, 
                          social_state_manager, user_id: str) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        history_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        user_signals_history: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        social_state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    state = {
        "history": history_manager.get_history(user_id) if history_manager else [],
        "user_signal": user_signals_history.get(user_id, "exploring_only"),
        "greeting_exchanged": False,
        "message_count": len(history_manager.get_history(user_id)) if history_manager else 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if social_state_manager:
        try:
            social_state = social_state_manager.get(user_id)
            state["greeting_exchanged"] = social_state.greeting_exchanged
        except:
            pass
    
    return state


def restore_state_snapshot(state_data: Dict[str, Any], history_manager, 
                           user_signals_history: Dict, social_state_manager, 
                           user_id: str):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–Ω–∏–º–∫–∞
    
    Args:
        state_data: –î–∞–Ω–Ω—ã–µ —Å–Ω–∏–º–∫–∞
        history_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        user_signals_history: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        social_state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if history_manager and 'history' in state_data:
        for msg in state_data['history']:
            history_manager.add_message(user_id, msg['role'], msg['content'])
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_signal
    if 'user_signal' in state_data:
        user_signals_history[user_id] = state_data['user_signal']
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if social_state_manager and state_data.get('greeting_exchanged'):
        social_state_manager.mark_greeted(user_id)
    
    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {user_id}: "
                f"{len(state_data.get('history', []))} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                f"signal={state_data.get('user_signal')}")