"""
translator.py - –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∑–∞—â–∏—Ç–æ–π —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–í–µ—Ä—Å–∏—è 2.0: –ü–æ—Å—Ç-–ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import logging
from typing import Optional, Dict
import re

logger = logging.getLogger(__name__)


class SmartTranslator:
    """–£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∑–∞—â–∏—Ç–æ–π —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –¢–µ—Ä–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–µ—Ä–µ–≤–æ–¥–∏–º
    PROTECTED_TERMS = {
        'Ukido', 'ukido', 'UKIDO',
        'soft skills', 'Soft Skills', 'SOFT SKILLS',
        'Zoom', 'zoom', 'ZOOM',
        'online', 'Online', 'ONLINE'
    }
    
    # –ö–µ—à –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ (–∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã)
    translation_cache: Dict[str, str] = {}
    
    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    translation_count = 0
    cache_hits = 0
    
    def __init__(self, openrouter_client):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        
        Args:
            openrouter_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenRouter API
        """
        self.client = openrouter_client
        self.model = "openai/gpt-4o-mini"  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
        
    async def translate(
        self, 
        text: str, 
        target_language: str,
        source_language: str = 'ru',
        user_context: Optional[str] = None
    ) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏–ª—ã
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('uk' –∏–ª–∏ 'en')
            source_language: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        # –ï—Å–ª–∏ —è–∑—ã–∫ —Ç–æ—Ç –∂–µ - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        if target_language == source_language or target_language == 'ru':
            return text
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{target_language}:{text[:100]}"  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∫–ª—é—á
        if cache_key in self.translation_cache:
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {target_language}")
            self.cache_hits += 1
            return self.translation_cache[cache_key]
        
        # –ù–ï –∑–∞—â–∏—â–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –≤ translate_stream
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        lang_map = {
            'uk': 'Ukrainian',
            'en': 'English'
        }
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        protected_terms_list = ', '.join(self.PROTECTED_TERMS)
        
        system_prompt = f"""You are a professional translator for an educational platform.
Translate the following text from Russian to {lang_map.get(target_language, 'English')}.

CRITICAL RULES:
1. Preserve the marketing persuasiveness and emotional tone
2. Maintain the conversational, friendly style
3. For Ukrainian: use modern Ukrainian, not surzhyk or russisms
4. For English: use American English, casual but professional
5. Preserve all formatting (line breaks, bullet points, etc.)

NEVER translate these terms (keep them exactly as they are):
{protected_terms_list}

Also NEVER translate:
- URLs and email addresses
- Numbers and prices
- Any English technical terms

Context: This is a response from an AI assistant for a children's soft skills school."""

        user_prompt = f"Translate to {lang_map.get(target_language)}:\n\n{text}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        
        if user_context:
            user_prompt += f"\n\nUser's original question: {user_context}"
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language}...")
            logger.debug(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}...")
            
            # –í—ã–∑—ã–≤–∞–µ–º GPT-4o Mini –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            response = await self.client.chat(
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                model=self.model,
                temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                max_tokens=3000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            )
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response[:100]}...")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            translated = response.replace('\n\n', '\n')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)
            if len(text) < 200:
                self.translation_cache[cache_key] = translated
                
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language}")
            logger.debug(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {translated[:100]}...")
            self.translation_count += 1
            return translated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            return text
    
    def _protect_terms(self, text: str) -> str:
        """
        –ó–∞—â–∏—â–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –¢–µ–∫—Å—Ç —Å –∑–∞—â–∏—â—ë–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        """
        protected = text
        for term in self.PROTECTED_TERMS:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            pattern = r'\b' + re.escape(term) + r'\b'
            protected = re.sub(pattern, f'[PROTECTED]{term}[/PROTECTED]', protected, flags=re.IGNORECASE)
        return protected
    
    def _restore_terms(self, text: str) -> str:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å –∑–∞—â–∏—â—ë–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
            
        Returns:
            –¢–µ–∫—Å—Ç —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        """
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ PROTECTED (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—ë–≤)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
        max_iterations = 10  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        iterations = 0
        
        while ('[PROTECTED]' in text or '[/PROTECTED]' in text) and iterations < max_iterations:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
            text = text.replace('[PROTECTED]', '')
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
            text = text.replace('[/PROTECTED]', '')
            iterations += 1
            
        return text
    
    def detect_language(self, text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ö–æ–¥ —è–∑—ã–∫–∞: 'ru', 'uk' –∏–ª–∏ 'en'
        """
        # –ü–æ–¥—Å—á—ë—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        cyrillic_ru = len(re.findall(r'[–∞-—è–ê-–Ø—ë–Å]', text))
        cyrillic_uk = len(re.findall(r'[—ñ—ó—î“ë–Ü–á–Ñ“ê]', text))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ
        latin = len(re.findall(r'[a-zA-Z]', text))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã - —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        if cyrillic_uk > 0:
            return 'uk'
        # –ï—Å–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        elif latin > cyrillic_ru:
            return 'en'
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä—É—Å—Å–∫–∏–π
        else:
            return 'ru'
    
    async def translate_stream(
        self, 
        text: str, 
        target_language: str,
        user_context: str = None
    ):
        """
        –°—Ç—Ä–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('uk', 'en')
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Yields:
            –ß–∞—Å—Ç–∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if target_language == 'ru':
            yield text
            return
            
        # –ú–∞–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        lang_map = {
            'uk': 'Ukrainian',
            'en': 'English'
        }
        
        # –ù–ï –∑–∞—â–∏—â–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ! –ü—É—Å—Ç—å GPT-4o Mini —Å–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        protected_terms_list = ', '.join(self.PROTECTED_TERMS)
        
        system_prompt = f"""You are a professional translator for an educational platform.
Translate the following text from Russian to {lang_map.get(target_language, 'English')}.

CRITICAL RULES:
1. Preserve the marketing persuasiveness and emotional tone
2. Maintain the conversational, friendly style
3. For Ukrainian: use modern Ukrainian, not surzhyk or russisms
4. For English: use American English, casual but professional
5. Preserve all formatting (line breaks, bullet points, etc.)

NEVER translate these terms (keep them exactly as they are):
{protected_terms_list}

Also NEVER translate:
- URLs and email addresses
- Numbers and prices
- Any English technical terms

Context: This is a response from an AI assistant for a children's soft skills school."""

        user_prompt = f"Translate to {lang_map.get(target_language)}:\n\n{text}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        
        if user_context:
            user_prompt += f"\n\nUser's original question: {user_context}"
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            from openrouter_client_stream import chat_stream
            
            # –°—Ç—Ä–∏–º–∏–º –ø–µ—Ä–µ–≤–æ–¥ - —Ç–µ–ø–µ—Ä—å –±–µ–∑ —Ç–µ–≥–æ–≤!
            async for chunk in chat_stream(
                self.client,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                model=self.model,
                temperature=0.3,
                max_tokens=3000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            ):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if chunk:
                    # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
                    normalized_chunk = chunk.replace('\n\n', '\n')
                    yield normalized_chunk
                
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {target_language}")
            self.translation_count += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            yield text