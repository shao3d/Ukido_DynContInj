"""
history_manager.py - –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
MVP –≤–µ—Ä—Å–∏—è: —Å LRU Cache –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leak
"""

from typing import List, Dict
from collections import OrderedDict
from config import Config

class HistoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å LRU –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        # OrderedDict –ø–æ–º–Ω–∏—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è LRU
        self.storage = OrderedDict()  # {user_id: [messages]}
        config = Config()
        self.max_messages = config.HISTORY_LIMIT  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
        self.max_users = 1000  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è MVP, ~10MB –ø–∞–º—è—Ç–∏
    
    def add_message(self, user_id: str, role: str, content: str, metadata: dict = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å LRU –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (–æ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π)
        if user_id in self.storage:
            self.storage.move_to_end(user_id)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.storage) >= self.max_users:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                oldest_user = next(iter(self.storage))
                del self.storage[oldest_user]
                print(f"‚ö†Ô∏è LRU: –£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {oldest_user[:8]}... (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)")
            
            # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.storage[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        message = {
            "role": role,
            "content": content
        }
        if metadata:
            message["metadata"] = metadata
        
        self.storage[user_id].append(message)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (HISTORY_LIMIT –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        if len(self.storage[user_id]) > self.max_messages:
            self.storage[user_id] = self.storage[user_id][-self.max_messages:]
    
    def get_history(self, user_id: str) -> List[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.storage.get(user_id, [])
    
    def get_message_metadata(self, msg: dict) -> dict:
        """Helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è metadata –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        if "metadata" in msg:
            return msg["metadata"]
        
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ metadata
        return {
            "cta_added": False,
            "cta_type": None,
            "user_signal": "exploring_only"
        }
    
    def clear_user_history(self, user_id: str):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.storage:
            del self.storage[user_id]
            print(f"üßπ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")