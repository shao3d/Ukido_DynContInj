"""
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å —é–º–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–µ–º—ã.
"""

import re
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from collections import defaultdict

class SafetyChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏ —é–º–æ—Ä–∞."""
    
    # –ë–ª–µ–∫–ª–∏—Å—Ç —Ç–µ–º, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ–ª—å–∑—è —à—É—Ç–∏—Ç—å
    BLACKLIST_PATTERNS = [
        # –ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–æ–ª–µ–∑–Ω–∏
        r'\b(–±–æ–ª–µ–∑–Ω|–±–æ–ª–µ–µ—Ç|–±–æ–ª–µ—é|–±–æ–ª–∏—Ç|–±–æ–ª–µ–ª|–∑–∞–±–æ–ª–µ–ª|–±–æ–ª—å–Ω–∏—Ü|–≤—Ä–∞—á|–ª–µ—á–µ–Ω|–æ–ø–µ—Ä–∞—Ü–∏|–¥–∏–∞–≥–Ω–æ–∑|–ª–µ–∫–∞—Ä—Å—Ç–≤|—Ç–∞–±–ª–µ—Ç–∫|—É–∫–æ–ª|—Å–∫–æ—Ä–∞—è|—Å–∏–º–ø—Ç–æ–º|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≥—Ä–∏–ø–ø|–∫–æ–≤–∏–¥|covid|–≤–∏—Ä—É—Å)\b',
        
        # –¢—Ä–∞–≥–µ–¥–∏–∏ –∏ –Ω–µ—Å—á–∞—Å—Ç—å—è
        r'\b(—É–º–µ—Ä|–ø–æ–≥–∏–±|—Å–º–µ—Ä—Ç|–ø–æ—Ö–æ—Ä–æ–Ω|–∫–ª–∞–¥–±–∏—â|–º–æ–≥–∏–ª|—Ç—Ä–∞–≥–µ|–∞–≤–∞—Ä–∏|–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ|–Ω–µ—Å—á–∞—Å—Ç–Ω|–ø–æ–∫–æ–π–Ω|—É—Å–æ–ø|—Å–∫–æ–Ω—á–∞–ª)\b',
        
        # –í–æ–π–Ω–∞ –∏ –Ω–∞—Å–∏–ª–∏–µ
        r'\b(–≤–æ–π–Ω–∞|–≤–æ–π–Ω|–±–æ–º–±|–æ—Ä—É–∂–∏|—É–±–∏–≤|—É–±–∏–π|—Å—Ç—Ä–µ–ª|–≤–∑—Ä—ã–≤|—Ç–µ—Ä—Ä–æ—Ä|–Ω–∞–ø–∞–¥|–∞—Ç–∞–∫|—Ä–∞–∫–µ—Ç|—Å–Ω–∞—Ä—è–¥|–æ–∫–æ–ø|—Ñ—Ä–æ–Ω—Ç)\b',
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        r'\b(–±–∞–Ω–∫—Ä–æ—Ç|–¥–æ–ª–≥|–∫—Ä–µ–¥–∏—Ç|–Ω–µ—Ç –¥–µ–Ω–µ–≥|–±–µ–∑—Ä–∞–±–æ—Ç|—É–≤–æ–ª–µ–Ω|–Ω–∏—â|–±–µ–¥–Ω|–≥–æ–ª–æ–¥|–∫–æ–ª–ª–µ–∫—Ç–æ—Ä|–ø—Ä–æ—Å—Ä–æ—á–∫)\b',
        
        # –°–µ–º–µ–π–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        r'\b(—Ä–∞–∑–≤–æ–¥|—Ä–∞—Å—Å—Ç–∞|–∏–∑–º–µ–Ω—è|–ø—Ä–µ–¥–∞—Ç–µ–ª|—Å—Å–æ—Ä|—Å–∫–∞–Ω–¥–∞|–∞–ª–∏–º–µ–Ω—Ç|—Ä–∞–∑–¥–µ–ª|–±—Ä–æ—Å–∏–ª|—É—à–µ–ª –æ—Ç|—É—à–ª–∞ –æ—Ç)\b',
        
        # –ö—Ä–∏–º–∏–Ω–∞–ª
        r'\b(—É–∫—Ä–∞–ª|–≤–æ—Ä–æ–≤|–º–æ—à–µ–Ω–Ω|–æ–±–º–∞–Ω|–ø–æ–ª–∏—Ü–∏|—Ç—é—Ä—å–º|–∞—Ä–µ—Å—Ç|—Å—É–¥|–ø—Ä–µ—Å—Ç—É–ø|–Ω–∞—Ä–∫–æ—Ç)\b',
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        r'\b(–¥–µ–ø—Ä–µ—Å—Å|—Å—É–∏—Ü–∏–¥|—Å–∞–º–æ—É–±–∏–π|–ø—Å–∏—Ö–∏–∞—Ç—Ä|–ø—Å–∏—Ö—É—à–∫|—Å–æ—à–µ–ª —Å —É–º–∞|–Ω–µ—Ä–≤–Ω|–ø–∞–Ω–∏–∫|–∏—Å—Ç–µ—Ä–∏–∫)\b'
    ]
    
    # –¢–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–±–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
    SENSITIVE_TOPICS = [
        r'\b(—Ä–µ–ª–∏–≥–∏|—Ü–µ—Ä–∫–æ–≤|—Å–≤—è—â–µ–Ω|–º–æ–ª–∏—Ç–≤|–±–æ–≥|–∞–ª–ª–∞—Ö|–±—É–¥–¥|—Ö—Ä–∏—Å—Ç|–º—É—Å—É–ª—å–º|–∏—É–¥–µ|—Å–≤—è—Ç)\b',
        r'\b(–ø–æ–ª–∏—Ç–∏–∫|–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç|–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤|–º–∏–Ω–∏—Å—Ç—Ä|–≤—ã–±–æ—Ä|–ø–∞—Ä—Ç–∏–∏|–æ–ø–ø–æ–∑–∏—Ü)\b',
        r'\b(–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç|—Ä–∞—Å–∞|—ç—Ç–Ω–æ—Å|–º–∏–≥—Ä–∞–Ω—Ç|–±–µ–∂–µ–Ω—Ü)\b'
    ]
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
    NEGATIVE_MOOD_MARKERS = [
        '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ',
        '–≤–æ–∑–º—É—Ç–∏—Ç–µ–ª—å–Ω–æ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–æ–±–º–∞–Ω', '—Ä–∞–∑–≤–æ–¥ –¥–ª—è –ª–æ—Ö–æ–≤',
        '–∫–æ—à–º–∞—Ä', '–±–µ–∑–æ–±—Ä–∞–∑–∏–µ', '–ø–æ–∑–æ—Ä', '—Å—Ç—ã–¥',
        '–Ω–∞–¥–æ–µ–ª–æ', '–¥–æ—Å—Ç–∞–ª–æ', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç'
    ]
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    POSITIVE_MOOD_MARKERS = [
        '—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '—Å—É–ø–µ—Ä', 
        '–∫–ª–∞—Å—Å–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–∫—Ä—É—Ç–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ',
        '–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '—Ä–∞–¥', '–¥–æ–≤–æ–ª–µ–Ω', '—Ö–æ—Ä–æ—à–æ'
    ]
    
    def __init__(self):
        self.user_humor_count = defaultdict(list)  # user_id -> —Å–ø–∏—Å–æ–∫ timestamp
        
    def is_safe_topic(self, message: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–∞ –ª–∏ —Ç–µ–º–∞ –¥–ª—è —é–º–æ—Ä–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞
        """
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–µ–∫–ª–∏—Å—Ç
        for pattern in self.BLACKLIST_PATTERNS:
            if re.search(pattern, message_lower, re.IGNORECASE):
                return False
        
        return True
    
    def check_user_signal(self, user_signal: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ user_signal –¥–ª—è —é–º–æ—Ä–∞.
        
        Args:
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —à—É—Ç–∏—Ç—å
        """
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —à—É—Ç–∏–º –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ü–µ–Ω–µ
        forbidden_signals = ["anxiety_about_child", "price_sensitive"]
        result = user_signal not in forbidden_signals
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"üîç DEBUG check_user_signal: signal='{user_signal}', forbidden={forbidden_signals}, can_use_humor={result}")
        
        return result
    
    def analyze_dialogue_mood(self, history: List[Dict]) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            'positive', 'negative' –∏–ª–∏ 'neutral'
        """
        if not history:
            return 'neutral'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = history[-5:] if len(history) >= 5 else history
        
        positive_count = 0
        negative_count = 0
        
        for msg in recent_messages:
            if msg.get('role') == 'user':
                text = msg.get('content', '').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                for marker in self.NEGATIVE_MOOD_MARKERS:
                    if marker in text:
                        negative_count += 1
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                for marker in self.POSITIVE_MOOD_MARKERS:
                    if marker in text:
                        positive_count += 1
                        break
        
        if negative_count > 0:
            return 'negative'
        elif positive_count >= 2:
            return 'positive'
        else:
            return 'neutral'
    
    def check_rate_limit(self, user_id: str, max_per_hour: int = 3) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_per_hour: –ú–∞–∫—Å–∏–º—É–º —à—É—Ç–æ–∫ –≤ —á–∞—Å
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É
        """
        now = datetime.now()
        hour_ago = now - timedelta(hours=1)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if user_id in self.user_humor_count:
            self.user_humor_count[user_id] = [
                ts for ts in self.user_humor_count[user_id] 
                if ts > hour_ago
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if len(self.user_humor_count.get(user_id, [])) >= max_per_hour:
            return False
        
        return True
    
    def mark_humor_used(self, user_id: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —é–º–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.user_humor_count[user_id].append(datetime.now())
    
    def calculate_probability(self, 
                            user_signal: str, 
                            mood: str,
                            is_first_message: bool = False,
                            base_probability: float = 0.33) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —é–º–æ—Ä–∞.
        
        Args:
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mood: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            is_first_message: –ü–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            base_probability: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            
        Returns:
            –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0.0 - 1.0)
        """
        probability = base_probability
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ user_signal
        if user_signal == "exploring_only":
            probability *= 1.25  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π (–±—ã–ª–æ 1.2)
        elif user_signal == "ready_to_buy":
            probability *= 0.9  # –ß—É—Ç—å —É–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∫—É–ø–∏—Ç—å (–±—ã–ª–æ 0.8)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if mood == 'positive':
            probability *= 1.2  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1.1 –¥–ª—è –¥–µ–º–æ
        elif mood == 'negative':
            probability = 0.0  # –ù–∏–∫–æ–≥–¥–∞ –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–µ
        
        # –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞ (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º)
        if is_first_message:
            probability *= 0.95  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 0.9 ‚Üí 0.95 –¥–ª—è MVP –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ 90% –¥–ª—è MVP –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
        return min(probability, 0.90)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 90% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 50% —é–º–æ—Ä–∞ –≤ offtopic
    
    def validate_humor_response(self, response: str) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç.
        
        Args:
            response: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        Returns:
            (is_valid, error_reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)
        if len(response) > 600:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 400 –¥–ª—è –ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
            return False, "too_long"
        
        sentences = response.count('.') + response.count('!') + response.count('?')
        if sentences > 5:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 3 –¥–ª—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã—Ö –ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤
            return False, "too_many_sentences"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤—è–∑—å —Å–æ —à–∫–æ–ª–æ–π (–û–°–õ–ê–ë–õ–ï–ù–ê –¥–ª—è MVP)
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —à—É—Ç–∫–∏
        # school_keywords = ['–Ω–∞–≤—ã–∫', '—É—á–∏–º', '—É—á–∞—Ç', '—Ä–∞–∑–≤–∏–≤', '—Ä–µ–±–µ–Ω', '—Ä–µ–±—ë–Ω–æ–∫',
        #                   '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '—à–∫–æ–ª', 'ukido', '–∫—É—Ä—Å', '–∑–∞–Ω—è—Ç–∏',
        #                   'soft skills', '—Å–æ—Ñ—Ç —Å–∫–∏–ª–ª']
        # 
        response_lower = response.lower()
        # has_school_reference = any(keyword in response_lower for keyword in school_keywords)
        # 
        # if not has_school_reference:
        #     return False, "no_school_reference"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–∫–æ—à–º–∞—Ä', '–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫', '—Ç—É–ø–æ–π']
        has_negative = any(word in response_lower for word in negative_words)
        
        if has_negative:
            return False, "negative_content"
        
        return True, None
    
    def should_use_humor(self,
                         message: str,
                         user_signal: str,
                         history: List[Dict],
                         user_id: str,
                         is_pure_social: bool = False,
                         base_probability: float = 0.33) -> Tuple[bool, Dict]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_signal: –°–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_pure_social: –ß–∏—Å—Ç—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
            
        Returns:
            (can_use_humor, context_dict)
        """
        context = {
            'safe_topic': True,
            'appropriate_signal': True,
            'good_mood': True,
            'within_rate_limit': True,
            'probability': 0.0,
            'reason': None
        }
        
        # –ù–∏–∫–æ–≥–¥–∞ –¥–ª—è —á–∏—Å—Ç—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        if is_pure_social:
            context['reason'] = 'pure_social_intent'
            return False, context
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —é–º–æ—Ä –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (acknowledgments)
        clean_msg = message.strip()
        if len(clean_msg) < 10 and "?" not in clean_msg:
            context['reason'] = 'short_acknowledgment_message'
            return False, context
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã
        if not self.is_safe_topic(message):
            context['safe_topic'] = False
            context['reason'] = 'unsafe_topic'
            return False, context
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_signal
        if not self.check_user_signal(user_signal):
            context['appropriate_signal'] = False
            context['reason'] = f'inappropriate_signal:{user_signal}'
            return False, context
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood = self.analyze_dialogue_mood(history)
        if mood == 'negative':
            context['good_mood'] = False
            context['reason'] = 'negative_mood'
            return False, context
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not self.check_rate_limit(user_id):
            context['within_rate_limit'] = False
            context['reason'] = 'rate_limit_exceeded'
            return False, context
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        is_first = len(history) <= 2
        probability = self.calculate_probability(user_signal, mood, is_first, base_probability)
        context['probability'] = probability
        context['mood'] = mood
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        import random
        if random.random() > probability:
            context['reason'] = 'probability_check_failed'
            return False, context
        
        return True, context


class TopicClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º –¥–ª—è offtopic —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    TOPIC_PATTERNS = {
        'sport': [
            r'\b(—Ñ—É—Ç–±–æ–ª|–±–∞—Å–∫–µ—Ç–±–æ–ª|–≤–æ–ª–µ–π–±–æ–ª|—Ç–µ–Ω–Ω–∏—Å|–±–æ–∫—Å|–ø–ª–∞–≤–∞–Ω|–±–µ–≥|—Ñ–∏—Ç–Ω–µ—Å|–π–æ–≥|—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫|–º–∞—Ç—á|–∏–≥—Ä|–∫–æ–º–∞–Ω–¥)\b',
        ],
        'weather': [
            r'\b(–ø–æ–≥–æ–¥|–¥–æ–∂–¥—å|—Å–Ω–µ–≥|—Å–æ–ª–Ω—Ü|–≤–µ—Ç–µ—Ä|—Ö–æ–ª–æ–¥|–∂–∞—Ä–∫|—Ç–µ–ø–ª|–º–æ—Ä–æ–∑|—Ç—É–º–∞–Ω|–≥—Ä–æ–∑|–ª–∏–≤–µ–Ω—å|–º–µ—Ç–µ–ª—å)\b',
        ],
        'tech': [
            r'\b(–∫–æ–º–ø—å—é—Ç–µ—Ä|—Ç–µ–ª–µ—Ñ–æ–Ω|–∏–Ω—Ç–µ—Ä–Ω–µ—Ç|—Å–∞–π—Ç|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏|–ø—Ä–æ–≥—Ä–∞–º–º|–∫–æ–¥|iphone|–∞–π—Ñ–æ–Ω|–∞–Ω–¥—Ä–æ–∏–¥|–≥–∞–¥–∂–µ—Ç|–¥–µ–≤–∞–π—Å|chatgpt|ai|tiktok|instagram|—Å–æ—Ü—Å–µ—Ç|–∫—Ä–∏–ø—Ç|–±–∏—Ç–∫–æ–∏–Ω|–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω)\b',
        ],
        'food': [
            r'\b(–µ–¥–∞|–µ—Å—Ç—å|–∫—É—à–∞—Ç—å|–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–±–æ—Ä—â|—Å—É–ø|–ø–∏—Ü—Ü|–∫–æ—Ñ–µ|—á–∞–π|—Å–ª–∞–¥–∫|—Ç–æ—Ä—Ç|–¥–∏–µ—Ç|–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω|–¥–æ—Å—Ç–∞–≤–∫|—Ä–µ—Å—Ç–æ—Ä–∞–Ω|–∫–∞—Ñ–µ)\b',
        ],
        'transport': [
            r'\b(–º–∞—à–∏–Ω|–∞–≤—Ç–æ–º–æ–±–∏–ª|–∞–≤—Ç–æ–±—É—Å|–º–µ—Ç—Ä–æ|—Ç–∞–∫—Å–∏|—Å–∞–º–æ–ª–µ—Ç|–ø–æ–µ–∑–¥|–≤–µ–ª–æ—Å–∏–ø–µ–¥|—Å–∞–º–æ–∫–∞—Ç|–ø—Ä–æ–±–∫|–¥–æ—Ä–æ–≥|—Å–≤–µ—Ç–æ—Ñ–æ—Ä|–ø–∞—Ä–∫–æ–≤–∫)\b',
        ]
    }
    
    @classmethod
    def classify(cls, message: str) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ 'general'
        """
        message_lower = message.lower()
        
        for category, patterns in cls.TOPIC_PATTERNS.items():
            for pattern in patterns:
                if re.search(pattern, message_lower, re.IGNORECASE):
                    return category
        
        return 'general'