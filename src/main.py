"""
main.py - FastAPI —Å–µ—Ä–≤–µ—Ä —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è —à–∫–æ–ª—ã Ukido (–≤–µ—Ä—Å–∏—è 0.7.3)
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: Router (Gemini) ‚Üí Generator (Claude)
"""

import os
import random
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from social_intents import SocialIntent
from social_responder import SocialResponder
from social_state import SocialStateManager
from config import Config
from standard_responses import DEFAULT_FALLBACK, get_error_response
from datetime import datetime
from typing import Dict

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = FastAPI(title="Ukido Chatbot API", version="0.8.0-state-machine")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ü–†–û–°–¢–´–ï –ú–ï–¢–†–ò–ö–ò ===
signal_stats = {
    "price_sensitive": 0,
    "anxiety_about_child": 0, 
    "ready_to_buy": 0,
    "exploring_only": 0
}
request_count = 0
total_latency = 0.0
start_time = datetime.now()

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===
class ChatRequest(BaseModel):
    user_id: str
    message: str


class ChatResponse(BaseModel):
    response: str
    relevant_documents: List[str] = []
    intent: str = ""
    confidence: float = 0.0
    decomposed_questions: List[str] = []
    fuzzy_matched: Optional[bool] = None
    social: Optional[str] = None
    user_signal: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
router = Router(use_cache=True)
response_generator = ResponseGenerator()
history = HistoryManager()
social_state = SocialStateManager()
social_responder = SocialResponder(social_state)
config = Config()


# === –≠–ù–î–ü–û–ò–ù–¢–´ ===
@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–±–æ—Ç–æ–º - –≤–µ—Ä—Å–∏—è —Å State Machine"""
    global signal_stats, request_count, total_latency
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
    import time
    start = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    history_messages = []
    if history:
        history_messages = history.get_history(request.user_id)
    
    # === PIPELINE: Router (Gemini) ‚Üí Generator (Claude) ===
    
    # –í—Å—ë –∏–¥–µ—Ç –≤ Router
    print(f"‚ÑπÔ∏è Routing: {request.message[:50]}..." if len(request.message) > 50 else f"‚ÑπÔ∏è Routing: {request.message}")
    
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ Router –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        route_result = await router.route(request.message, history_messages, request.user_id)
        
        if config.LOG_LEVEL == "DEBUG":
            print(f"üîç DEBUG Router result: {route_result}")
    except Exception as e:
        print(f"‚ùå Router failed: {e}")
        route_result = {
            "status": "offtopic",
            "message": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "decomposed_questions": []
        }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞
    status = route_result.get("status", "offtopic")
    message = route_result.get("message", "")
    documents = route_result.get("documents", [])
    decomposed_questions = route_result.get("decomposed_questions", [])
    social_context = route_result.get("social_context")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç Gemini
    fuzzy_matched = route_result.get("fuzzy_matched", False)
    user_signal = route_result.get("user_signal", "exploring_only")  # –ü–æ–ª—É—á–∞–µ–º user_signal
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if user_signal in signal_stats:
        signal_stats[user_signal] += 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == "success":
        documents_used = documents if isinstance(documents, list) else []
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ user_signal –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            response_text = await response_generator.generate(
                {
                    "status": status,
                    "documents": documents_used,
                    "decomposed_questions": decomposed_questions,
                    "social_context": social_context,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    "user_signal": user_signal,  # –ü–µ—Ä–µ–¥–∞–µ–º user_signal –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                },
                history_messages,
            )
        except Exception as e:
            print(f"‚ùå ResponseGenerator failed: {e}")
            response_text = get_error_response("generation_failed")
    else:
        # –î–ª—è offtopic –∏ need_simplification —Ç–æ–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        # –ù–û! –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—â–∞–Ω–∏–µ (farewell), —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º offtopic message
        if social_context == "farewell":
            base_message = ""  # –î–ª—è –ø—Ä–æ—â–∞–Ω–∏—è –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            base_message = message if message else DEFAULT_FALLBACK
        documents_used = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ offtopic/need_simplification –æ—Ç–≤–µ—Ç–∞–º
        if social_context:
            if social_context == "greeting":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                if not social_state.has_greeted(request.user_id):
                    greetings = ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!"]
                    response_text = f"{random.choice(greetings)} {base_message}"
                    social_state.mark_greeted(request.user_id)
                else:
                    response_text = base_message
            elif social_context == "thanks":
                thanks_responses = ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!", "–†–∞–¥—ã –ø–æ–º–æ—á—å!", "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"]
                response_text = f"{random.choice(thanks_responses)} {base_message}"
            elif social_context == "apology":
                apology_responses = ["–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!", "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!", "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ!"]
                response_text = f"{random.choice(apology_responses)} {base_message}"
            elif social_context == "farewell":
                # –î–ª—è –ø—Ä–æ—â–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ—â–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É, –±–µ–∑ offtopic —Å–æ–æ–±—â–µ–Ω–∏—è
                farewells = [
                    "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!",
                    "–†–∞–¥—ã –±—ã–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                    "–£–¥–∞—á–∏ –≤–∞–º! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ! –î–æ —Å–≤—è–∑–∏!"
                ]
                response_text = random.choice(farewells)
                # –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º base_message –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏—è!
            else:
                response_text = base_message
        else:
            response_text = base_message
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ ===
    if history:
        history.add_message(request.user_id, "user", request.message)
        history.add_message(request.user_id, "assistant", response_text)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    latency = time.time() - start
    request_count += 1
    total_latency += latency
    
    if config.LOG_LEVEL == "DEBUG":
        print(f"‚è±Ô∏è Latency: {latency:.2f}s | Signal: {user_signal}")
    
    # === –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
    return ChatResponse(
        response=response_text,
        relevant_documents=documents_used if 'documents_used' in locals() else [],
        intent=status,
        confidence=1.0,  # MVP: –≤—Å–µ–≥–¥–∞ 1.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        decomposed_questions=decomposed_questions,
        fuzzy_matched=fuzzy_matched,
        social=social_context,  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç Gemini
        user_signal=user_signal,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç–µ
    )


@app.get("/metrics")
async def get_metrics():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫ State Machine"""
    global signal_stats, request_count, total_latency, start_time
    
    uptime = (datetime.now() - start_time).total_seconds()
    avg_latency = total_latency / request_count if request_count > 0 else 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    percentages = {}
    if request_count > 0:
        for signal, count in signal_stats.items():
            percentages[signal] = f"{(count / request_count * 100):.1f}%"
    
    return {
        "uptime_seconds": round(uptime, 2),
        "total_requests": request_count,
        "avg_latency": round(avg_latency, 3),
        "signal_distribution": signal_stats,
        "signal_percentages": percentages,
        "most_common_signal": max(signal_stats, key=signal_stats.get) if request_count > 0 else None
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "version": "0.8.0-state-machine"}


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {"service": "Ukido Chatbot API", "version": "0.7.3"}


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import uvicorn
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("=" * 50)
    print("üöÄ Ukido AI Assistant v0.7.3")
    print("üìù –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Router ‚Üí Generator")
    print(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
    print(f"üíæ –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏: {config.HISTORY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=8000)