"""
main.py - FastAPI —Å–µ—Ä–≤–µ—Ä —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è —à–∫–æ–ª—ã Ukido (–≤–µ—Ä—Å–∏—è 0.7.3)
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: Router (Gemini) ‚Üí Generator (Claude)
"""

import os
import random
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from social_intents import SocialIntent
from social_responder import SocialResponder
from social_state import SocialStateManager
from config import Config
from standard_responses import DEFAULT_FALLBACK, get_error_response
from zhvanetsky_humor import should_use_zhvanetsky, generate_zhvanetsky_response
from datetime import datetime
from typing import Dict

# === –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–û–°–¢–¨ –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–û–î–ò–ú–û–°–¢–ò ===
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π seed –¥–ª—è –≤—Å–µ—Ö random –æ–ø–µ—Ä–∞—Ü–∏–π
config = Config()
random.seed(config.SEED)  # –¢–µ–ø–µ—Ä—å –≤—Å–µ random.choice() –±—É–¥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏
print(f"üé≤ Random seed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config.SEED}")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = FastAPI(title="Ukido Chatbot API", version="0.8.0-state-machine")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ü–†–û–°–¢–´–ï –ú–ï–¢–†–ò–ö–ò ===
signal_stats = {
    "price_sensitive": 0,
    "anxiety_about_child": 0, 
    "ready_to_buy": 0,
    "exploring_only": 0
}
request_count = 0
total_latency = 0.0
start_time = datetime.now()

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===
class ChatRequest(BaseModel):
    user_id: str
    message: str


class ChatResponse(BaseModel):
    response: str
    relevant_documents: List[str] = []
    intent: str = ""
    confidence: float = 0.0
    decomposed_questions: List[str] = []
    fuzzy_matched: Optional[bool] = None
    social: Optional[str] = None
    user_signal: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
router = Router(use_cache=True)
response_generator = ResponseGenerator()
history = HistoryManager()
social_state = SocialStateManager()
social_responder = SocialResponder(social_state)
config = Config()


# === –≠–ù–î–ü–û–ò–ù–¢–´ ===
@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–±–æ—Ç–æ–º - –≤–µ—Ä—Å–∏—è —Å State Machine"""
    global signal_stats, request_count, total_latency
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
    import time
    start = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    history_messages = []
    if history:
        history_messages = history.get_history(request.user_id)
    
    # === PIPELINE: Router (Gemini) ‚Üí Generator (Claude) ===
    
    # –í—Å—ë –∏–¥–µ—Ç –≤ Router
    print(f"‚ÑπÔ∏è Routing: {request.message[:50]}..." if len(request.message) > 50 else f"‚ÑπÔ∏è Routing: {request.message}")
    
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ Router –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        route_result = await router.route(request.message, history_messages, request.user_id)
        
        if config.LOG_LEVEL == "DEBUG":
            print(f"üîç DEBUG Router result: {route_result}")
    except Exception as e:
        print(f"‚ùå Router failed: {e}")
        route_result = {
            "status": "offtopic",
            "message": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "decomposed_questions": []
        }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞
    status = route_result.get("status", "offtopic")
    message = route_result.get("message", "")
    documents = route_result.get("documents", [])
    decomposed_questions = route_result.get("decomposed_questions", [])
    social_context = route_result.get("social_context")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç Gemini
    fuzzy_matched = route_result.get("fuzzy_matched", False)
    user_signal = route_result.get("user_signal", "exploring_only")  # –ü–æ–ª—É—á–∞–µ–º user_signal
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if user_signal in signal_stats:
        signal_stats[user_signal] += 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == "success":
        documents_used = documents if isinstance(documents, list) else []
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ user_signal –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            response_text = await response_generator.generate(
                {
                    "status": status,
                    "documents": documents_used,
                    "decomposed_questions": decomposed_questions,
                    "social_context": social_context,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    "user_signal": user_signal,  # –ü–µ—Ä–µ–¥–∞–µ–º user_signal –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                },
                history_messages,
            )
            
            # === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–¶–ò–ê–õ–¨–ù–´–• –ò–ù–¢–ï–ù–¢–û–í –î–õ–Ø SUCCESS –°–õ–£–ß–ê–ï–í ===
            # –ü—Ä–∞–≤–∏–ª–æ: –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ–Ω—Ç –í–°–ï–ì–î–ê –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ
            
            # 1. Farewell –¥–ª—è success - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –ö–û–ù–ï–¶ –æ—Ç–≤–µ—Ç–∞
            if social_context == "farewell":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—â–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
                farewell_markers = ["–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "—É–¥–∞—á–∏", "–¥–æ —Å–≤—è–∑–∏"]
                if not any(marker in response_text.lower() for marker in farewell_markers):
                    farewells = [
                        "\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ!",
                        "\n\n–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã!",
                        "\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!",
                        "\n\n–£–¥–∞—á–∏ –≤–∞–º! –î–æ —Å–≤—è–∑–∏!"
                    ]
                    response_text += random.choice(farewells)
                    if config.LOG_LEVEL == "DEBUG":
                        print(f"‚úÖ Added farewell to success response")
            
            # 2. Thanks –¥–ª—è success - –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
            elif social_context == "thanks":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ
                thanks_markers = ["—Ä–∞–¥", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–≤—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"]
                if not any(response_text.lower().startswith(marker) for marker in thanks_markers):
                    thanks_prefixes = ["–†–∞–¥—ã –ø–æ–º–æ—á—å! ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! "]
                    response_text = random.choice(thanks_prefixes) + response_text
                    if config.LOG_LEVEL == "DEBUG":
                        print(f"‚úÖ Added thanks prefix to success response")
                        
        except Exception as e:
            print(f"‚ùå ResponseGenerator failed: {e}")
            response_text = get_error_response("generation_failed")
    else:
        # –î–ª—è offtopic –∏ need_simplification —Ç–æ–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ
        pure_social_intents = ["greeting", "thanks", "farewell", "apology"]
        is_pure_social = social_context in pure_social_intents and status == "offtopic"
        
        if is_pure_social:
            # –î–ª—è —á–∏—Å—Ç—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ
            base_message = ""
        else:
            base_message = message if message else DEFAULT_FALLBACK
        documents_used = []
        
        # === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û ===
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —é–º–æ—Ä–∞ –¥–ª—è content offtopic
        if status == "offtopic" and not is_pure_social and config.ZHVANETSKY_ENABLED:
            can_use_humor, humor_context = await should_use_zhvanetsky(
                message=request.message,
                user_signal=user_signal,
                history=history_messages,
                user_id=request.user_id,
                config=config,
                is_pure_social=is_pure_social
            )
            
            if can_use_humor:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —é–º–æ—Ä —á–µ—Ä–µ–∑ Claude Haiku
                    humor_response = await generate_zhvanetsky_response(
                        message=request.message,
                        history=history_messages,
                        user_signal=user_signal,
                        user_id=request.user_id,
                        client=response_generator.client if response_generator else None,
                        config=config
                    )
                    
                    if humor_response:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
                        base_message = humor_response
                        print(f"üé≠ Zhvanetsky humor used for user {request.user_id}")
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π offtopic
                        from standard_responses import get_offtopic_response
                        base_message = get_offtopic_response()
                        
                except Exception as e:
                    print(f"‚ùå Zhvanetsky generation failed: {e}")
                    from standard_responses import get_offtopic_response
                    base_message = get_offtopic_response()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ offtopic/need_simplification –æ—Ç–≤–µ—Ç–∞–º
        if social_context:
            if social_context == "greeting":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                if not social_state.has_greeted(request.user_id):
                    if is_pure_social:
                        # –î–ª—è —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        greetings = [
                            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã Ukido. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö.",
                            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ì–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —à–∫–æ–ª—ã Ukido."
                        ]
                        response_text = random.choice(greetings)
                    else:
                        # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                        response_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {base_message}"
                    social_state.mark_greeted(request.user_id)
                else:
                    response_text = base_message if base_message else "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ß–µ–º –ø–æ–º–æ—á—å?"
            elif social_context == "thanks":
                if is_pure_social:
                    # –î–ª—è —á–∏—Å—Ç–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    thanks_responses = [
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã.",
                        "–†–∞–¥—ã –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ.",
                        "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
                    ]
                    response_text = random.choice(thanks_responses)
                else:
                    # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    response_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! {base_message}"
            elif social_context == "apology":
                if is_pure_social:
                    # –î–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    apology_responses = [
                        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                        "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
                    ]
                    response_text = random.choice(apology_responses)
                else:
                    # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    response_text = f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! {base_message}"
            elif social_context == "repeated_greeting":
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                response_text = base_message
            elif social_context == "farewell":
                # –î–ª—è –ø—Ä–æ—â–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ—â–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É, –±–µ–∑ offtopic —Å–æ–æ–±—â–µ–Ω–∏—è
                farewells = [
                    "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!",
                    "–†–∞–¥—ã –±—ã–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                    "–£–¥–∞—á–∏ –≤–∞–º! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ! –î–æ —Å–≤—è–∑–∏!"
                ]
                response_text = random.choice(farewells)
                # –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º base_message –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏—è!
            else:
                response_text = base_message
        else:
            response_text = base_message
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ ===
    if history:
        history.add_message(request.user_id, "user", request.message)
        history.add_message(request.user_id, "assistant", response_text)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    latency = time.time() - start
    request_count += 1
    total_latency += latency
    
    if config.LOG_LEVEL == "DEBUG":
        print(f"‚è±Ô∏è Latency: {latency:.2f}s | Signal: {user_signal}")
    
    # === –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
    return ChatResponse(
        response=response_text,
        relevant_documents=documents_used if 'documents_used' in locals() else [],
        intent=status,
        confidence=1.0,  # MVP: –≤—Å–µ–≥–¥–∞ 1.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        decomposed_questions=decomposed_questions,
        fuzzy_matched=fuzzy_matched,
        social=social_context,  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç Gemini
        user_signal=user_signal,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç–µ
    )


@app.get("/metrics")
async def get_metrics():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫ State Machine"""
    global signal_stats, request_count, total_latency, start_time
    
    uptime = (datetime.now() - start_time).total_seconds()
    avg_latency = total_latency / request_count if request_count > 0 else 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    percentages = {}
    if request_count > 0:
        for signal, count in signal_stats.items():
            percentages[signal] = f"{(count / request_count * 100):.1f}%"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    zhvanetsky_metrics = {}
    if config.ZHVANETSKY_ENABLED:
        try:
            from zhvanetsky_humor import ZhvanetskyGenerator
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            generator = ZhvanetskyGenerator()
            zhvanetsky_metrics = generator.get_metrics()
            zhvanetsky_metrics["enabled"] = True
            zhvanetsky_metrics["probability"] = config.ZHVANETSKY_PROBABILITY
        except:
            zhvanetsky_metrics = {"enabled": True, "error": "metrics_unavailable"}
    else:
        zhvanetsky_metrics = {"enabled": False}
    
    return {
        "uptime_seconds": round(uptime, 2),
        "total_requests": request_count,
        "avg_latency": round(avg_latency, 3),
        "signal_distribution": signal_stats,
        "signal_percentages": percentages,
        "most_common_signal": max(signal_stats, key=signal_stats.get) if request_count > 0 else None,
        "zhvanetsky_humor": zhvanetsky_metrics
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "version": "0.8.0-state-machine"}


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {"service": "Ukido Chatbot API", "version": "0.7.3"}


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import uvicorn
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("=" * 50)
    print("üöÄ Ukido AI Assistant v0.7.3")
    print("üìù –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Router ‚Üí Generator")
    print(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
    print(f"üíæ –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏: {config.HISTORY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=8000)