"""
main.py - FastAPI —Å–µ—Ä–≤–µ—Ä —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è —à–∫–æ–ª—ã Ukido (–≤–µ—Ä—Å–∏—è 0.7.3)
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: Router (Gemini) ‚Üí Generator (Claude)
"""

import os
import random
import time
import re
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field, validator
from typing import List, Optional
import sys
# SSE streaming support
from sse_starlette.sse import EventSourceResponse
import asyncio
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from router import Router
from response_generator import ResponseGenerator
from history_manager import HistoryManager
from persistence_manager import (
    PersistenceManager, 
    create_state_snapshot, 
    restore_state_snapshot
)
from social_intents import SocialIntent
from social_responder import SocialResponder
from social_state import SocialStateManager
from config import Config
from standard_responses import DEFAULT_FALLBACK, get_error_response
from datetime import datetime
from typing import Dict
from collections import defaultdict, deque
from completed_actions_handler import CompletedActionsHandler
from simple_cta_blocker import SimpleCTABlocker  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CTA
import signal
import atexit

# === –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–û–°–¢–¨ –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–û–î–ò–ú–û–°–¢–ò ===
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π seed –¥–ª—è –≤—Å–µ—Ö random –æ–ø–µ—Ä–∞—Ü–∏–π
config = Config()

# === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ê ===
if not config.OPENROUTER_API_KEY:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY!")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
    sys.exit(1)

print(f"‚úÖ OpenRouter API key –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(config.OPENROUTER_API_KEY)})")

if config.DETERMINISTIC_MODE:
    random.seed(config.SEED)  # –¢–µ–ø–µ—Ä—å –≤—Å–µ random.choice() –±—É–¥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏
    print(f"üé≤ Random seed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config.SEED} (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    print("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω (—Å–∏—Å—Ç–µ–º–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è)")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = FastAPI(title="Ukido Chatbot API", version="0.8.0-state-machine")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ü–†–û–°–¢–´–ï –ú–ï–¢–†–ò–ö–ò ===
signal_stats = {
    "price_sensitive": 0,
    "anxiety_about_child": 0, 
    "ready_to_buy": 0,
    "exploring_only": 0
}
request_count = 0
total_latency = 0.0
start_time = datetime.now()

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===
class ChatRequest(BaseModel):
    user_id: str = Field(..., min_length=1, max_length=50)
    message: str = Field(..., min_length=1, max_length=1000)
    
    @validator('user_id')
    def validate_user_id(cls, v):
        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, –¥–µ—Ñ–∏—Å—ã
        if not re.match(r'^[a-zA-Z0-9_\-]+$', v):
            raise ValueError('Invalid user_id format. Only alphanumeric characters, underscores and hyphens allowed.')
        return v
    
    @validator('message')
    def validate_message(cls, v):
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        v = v.strip()
        if not v:
            raise ValueError('Message cannot be empty')
        return v


class ChatResponse(BaseModel):
    response: str
    relevant_documents: List[str] = []
    intent: str = ""
    confidence: float = 0.0
    decomposed_questions: List[str] = []
    fuzzy_matched: Optional[bool] = None
    social: Optional[str] = None
    user_signal: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç
    metadata: Optional[dict] = None  # –î–æ–±–∞–≤–ª—è–µ–º metadata —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CTA
    detected_language: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º detected_language –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
router = Router(use_cache=True)
response_generator = ResponseGenerator()
history = HistoryManager()
social_state = SocialStateManager()
social_responder = SocialResponder(social_state)
completed_actions_handler = CompletedActionsHandler()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
simple_cta_blocker = SimpleCTABlocker()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ CTA

# === –ú–ï–ù–ï–î–ñ–ï–† –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò ===
persistence_manager = PersistenceManager(base_path="data/persistent_states")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è user_signals_history (–¥–ª—è HOTFIX)
user_signals_history = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
saved_states = persistence_manager.load_all_states()
for user_id, state_data in saved_states.items():
    restore_state_snapshot(
        state_data, history, user_signals_history, 
        social_state, user_id
    )
print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(saved_states)} –¥–∏–∞–ª–æ–≥–æ–≤")

# === GRACEFUL SHUTDOWN ===
def save_all_states_on_shutdown():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        all_states = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        if hasattr(history, 'storage'):
            for user_id in history.storage.keys():
                try:
                    state_snapshot = create_state_snapshot(
                        history, user_signals_history, social_state, user_id
                    )
                    all_states[user_id] = state_snapshot
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ –¥–ª—è {user_id}: {e}")
        
        # –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        saved_count = persistence_manager.save_all_states(all_states)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    save_all_states_on_shutdown()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)  # –î–ª—è graceful shutdown –≤ Docker/Kubernetes
signal.signal(signal.SIGINT, signal_handler)   # –î–ª—è Ctrl+C
atexit.register(save_all_states_on_shutdown)   # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

print("üîê –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ graceful shutdown –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–ò–ù–ì–õ–¢–û–ù –î–õ–Ø –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û ===
zhvanetsky_generator = None
zhvanetsky_safety_checker = None

if config.ZHVANETSKY_ENABLED:
    try:
        from zhvanetsky_humor import ZhvanetskyGenerator
        from zhvanetsky_safety import SafetyChecker
        from openrouter_client import OpenRouterClient
        
        # –°–æ–∑–¥–∞—ë–º OpenRouter client –¥–ª—è Haiku
        zhvanetsky_client = OpenRouterClient(
            api_key=config.OPENROUTER_API_KEY,
            model="anthropic/claude-3.5-haiku",
            temperature=config.ZHVANETSKY_TEMPERATURE
        )
        
        # –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
        zhvanetsky_safety_checker = SafetyChecker()
        zhvanetsky_generator = ZhvanetskyGenerator(
            client=zhvanetsky_client,
            config=config
        )
        
        print(f"üé≠ –°–∏—Å—Ç–µ–º–∞ —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {config.ZHVANETSKY_PROBABILITY * 100}%)")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —é–º–æ—Ä–∞: {e}")
        config.ZHVANETSKY_ENABLED = False

# === RATE LIMITING ===
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∏ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞
user_request_times = defaultdict(lambda: deque(maxlen=100))
user_daily_counts = defaultdict(lambda: {"count": 0, "date": ""})

def check_rate_limits(user_id: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limits –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∏ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    now = time.time()
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    recent_requests = user_request_times[user_id]
    recent_requests.append(now)
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    minute_ago = now - 60
    recent_count = sum(1 for t in recent_requests if t > minute_ago)
    
    if recent_count > 10:
        print(f"‚ö†Ô∏è Rate limit exceeded for user {user_id}: {recent_count} requests/min")
        raise HTTPException(
            status_code=429, 
            detail="Too many requests. Please wait a minute."
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å)
    daily = user_daily_counts[user_id]
    if daily["date"] != today:
        daily["count"] = 0
        daily["date"] = today
    
    daily["count"] += 1
    if daily["count"] > 100:
        print(f"‚ö†Ô∏è Daily limit exceeded for user {user_id}: {daily['count']} requests")
        raise HTTPException(
            status_code=429, 
            detail="Daily limit exceeded. Try again tomorrow."
        )


# === –≠–ù–î–ü–û–ò–ù–¢–´ ===
@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–±–æ—Ç–æ–º - –≤–µ—Ä—Å–∏—è —Å State Machine"""
    global signal_stats, request_count, total_latency
    
    # RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    check_rate_limits(request.user_id)
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
    import time
    start = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    history_messages = []
    if history:
        history_messages = history.get_history(request.user_id)
    
    # === PIPELINE: Router (Gemini) ‚Üí Generator (Claude) ===
    
    # –í—Å—ë –∏–¥–µ—Ç –≤ Router
    print(f"‚ÑπÔ∏è Routing: {request.message[:50]}..." if len(request.message) > 50 else f"‚ÑπÔ∏è Routing: {request.message}")
    
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ Router –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        route_result = await router.route(request.message, history_messages, request.user_id)
        
        if config.LOG_LEVEL == "DEBUG":
            print(f"üîç DEBUG Router result: {route_result}")
    except Exception as e:
        print(f"‚ùå Router failed: {e}")
        route_result = {
            "status": "offtopic",
            "message": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "decomposed_questions": []
        }
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–Å–ù–ù–´–• –î–ï–ô–°–¢–í–ò–ô ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offtopic –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ —à–∫–æ–ª–µ
    if config.ENABLE_COMPLETED_ACTIONS_HANDLER:
        original_status = route_result.get("status")
        route_result = completed_actions_handler.detect_completed_action(
            request.message,
            route_result,
            history_messages
        )
        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        if route_result.get("_correction_applied") == "completed_action":
            print(f"‚úÖ Completed action corrected: {original_status} ‚Üí {route_result.get('status')}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞
    status = route_result.get("status", "offtopic")
    message = route_result.get("message", "")
    documents = route_result.get("documents", [])
    decomposed_questions = route_result.get("decomposed_questions", [])
    social_context = route_result.get("social_context")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç Gemini
    fuzzy_matched = route_result.get("fuzzy_matched", False)
    user_signal = route_result.get("user_signal", "exploring_only")  # –ü–æ–ª—É—á–∞–µ–º user_signal
    detected_language = route_result.get("detected_language", "ru")  # –ü–æ–ª—É—á–∞–µ–º detected_language –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
    
    # HOTFIX: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_signal –¥–ª—è offtopic –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    # –ü—Ä–æ–±–ª–µ–º–∞: Gemini 2.5 Flash –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å user_signal –¥–ª—è offtopic
    if status == "offtopic" and user_signal == "exploring_only":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if request.user_id in user_signals_history:
            last_signal = user_signals_history[request.user_id]
            if last_signal != "exploring_only":
                original_signal = user_signal
                user_signal = last_signal
                print(f"üîß HOTFIX: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω user_signal='{user_signal}' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (Router –≤–µ—Ä–Ω—É–ª '{original_signal}')")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –±—É–¥—É—â–∏—Ö offtopic
    if status == "success" and user_signal != "exploring_only":
        user_signals_history[request.user_id] = user_signal
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω user_signal='{user_signal}' –¥–ª—è user_id='{request.user_id}'")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"üîç DEBUG: Router returned user_signal='{user_signal}', status='{status}'")
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if user_signal in signal_stats:
        signal_stats[user_signal] += 1
    
    # === SIMPLE CTA BLOCKER - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –æ—Ç–∫–∞–∑–æ–≤ ===
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_message_count = len(history_messages) + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    completed_action = simple_cta_blocker.check_completed_action(request.user_id, request.message)
    if completed_action:
        print(f"‚úÖ SimpleCTABlocker: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{completed_action}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞–∑—ã
    refusal_type = simple_cta_blocker.check_refusal(request.user_id, request.message, current_message_count)
    if refusal_type:
        print(f"üö´ SimpleCTABlocker: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫–∞–∑ —Ç–∏–ø–∞ '{refusal_type}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å CTA
    should_block_cta, block_reason = simple_cta_blocker.should_block_cta(
        request.user_id, 
        current_message_count, 
        user_signal
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã CTA
    cta_frequency_modifier = simple_cta_blocker.get_cta_frequency_modifier(request.user_id)
    
    if should_block_cta:
        print(f"üîí SimpleCTABlocker: CTA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–ø—Ä–∏—á–∏–Ω–∞: {block_reason})")
    
    # –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ offtopic –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    def filter_offtopic_from_history(history_messages):
        """–£–±–∏—Ä–∞–µ—Ç –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π (user+assistant), –≥–¥–µ assistant –æ—Ç–≤–µ—á–∞–ª –Ω–∞ offtopic"""
        filtered = []
        offtopic_markers = [
            "–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞",
            "–≠—Ç–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏",
            "—Ñ—É—Ç–±–æ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏",
            "–ø–∞—Ä–∫–æ–≤–∫–∞",
            "–ø—Ä–æ–±–∫–∏",
            "–ø–æ–≥–æ–¥–∞",
            "–ø–µ—Ä–µ–º–µ–Ω–∞ –≤ —à–∫–æ–ª–µ",  # –ß–∞—Å—Ç—å —é–º–æ—Ä–∞ –ø—Ä–æ –ø–∞—Ä–∫–æ–≤–∫—É
            "–£ –Ω–∞—Å –ø–∞—Ä–∫–æ–≤–∫–∞",    # –ù–∞—á–∞–ª–æ —à—É—Ç–∫–∏ –ø—Ä–æ –ø–∞—Ä–∫–æ–≤–∫—É
        ]
        
        i = 0
        while i < len(history_messages):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É user+assistant —Å–æ–æ–±—â–µ–Ω–∏–π
            if i + 1 < len(history_messages):
                user_msg = history_messages[i]
                assistant_msg = history_messages[i + 1]
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã offtopic - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if assistant_msg.get("role") == "assistant":
                    is_offtopic = any(marker in assistant_msg.get("content", "") for marker in offtopic_markers)
                    if not is_offtopic:
                        filtered.append(user_msg)
                        filtered.append(assistant_msg)
                    else:
                        print(f"üîç –§–∏–ª—å—Ç—Ä—É–µ–º offtopic –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {user_msg.get('content', '')[:30]}...")
                    i += 2
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Ä—É—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    filtered.append(history_messages[i])
                    i += 1
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä—ã
                filtered.append(history_messages[i])
                i += 1
        
        return filtered
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == "success":
        documents_used = documents if isinstance(documents, list) else []
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            if route_result.get("completed_action_response"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Claude
                response_text = route_result["completed_action_response"]
                # –°–æ–∑–¥–∞—ë–º metadata –¥–ª—è pre-generated –æ—Ç–≤–µ—Ç–∞
                response_metadata = {
                    "intent": status,
                    "user_signal": user_signal,
                    "cta_added": False,  # Pre-generated –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç CTA
                    "cta_type": None,
                    "humor_generated": False
                }
                print(f"üìù Using pre-generated response for completed action")
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º offtopic –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                filtered_history = filter_offtopic_from_history(history_messages)
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, user_signal –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CTA
                # –¢–µ–ø–µ—Ä—å generate() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (text, metadata)
                response_text, response_metadata = await response_generator.generate(
                    {
                        "status": status,
                        "documents": documents_used,
                        "decomposed_questions": decomposed_questions,
                        "social_context": social_context,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        "user_signal": user_signal,  # –ü–µ—Ä–µ–¥–∞–µ–º user_signal –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                        "original_message": request.message,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        "cta_blocked": should_block_cta,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CTA
                        "cta_frequency_modifier": cta_frequency_modifier,  # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
                        "detected_language": detected_language,  # –ü–µ—Ä–µ–¥–∞–µ–º detected_language –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                        "block_reason": block_reason if should_block_cta else None,  # –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    },
                    filtered_history,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                    request.message,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ CTA
                )
            
            # === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–¶–ò–ê–õ–¨–ù–´–• –ò–ù–¢–ï–ù–¢–û–í –î–õ–Ø SUCCESS –°–õ–£–ß–ê–ï–í ===
            # –ü—Ä–∞–≤–∏–ª–æ: –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ–Ω—Ç –í–°–ï–ì–î–ê –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ
            
            # 1. Farewell –¥–ª—è success - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –ö–û–ù–ï–¶ –æ—Ç–≤–µ—Ç–∞
            if social_context == "farewell":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—â–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
                farewell_markers = ["–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "—É–¥–∞—á–∏", "–¥–æ —Å–≤—è–∑–∏"]
                if not any(marker in response_text.lower() for marker in farewell_markers):
                    farewells = [
                        "\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ!",
                        "\n\n–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã!",
                        "\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!",
                        "\n\n–£–¥–∞—á–∏ –≤–∞–º! –î–æ —Å–≤—è–∑–∏!"
                    ]
                    response_text += random.choice(farewells)
                    if config.LOG_LEVEL == "DEBUG":
                        print(f"‚úÖ Added farewell to success response")
            
            # 2. Thanks –¥–ª—è success - –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
            elif social_context == "thanks":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ
                thanks_markers = ["—Ä–∞–¥", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–≤—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"]
                if not any(response_text.lower().startswith(marker) for marker in thanks_markers):
                    thanks_prefixes = ["–†–∞–¥—ã –ø–æ–º–æ—á—å! ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! "]
                    response_text = random.choice(thanks_prefixes) + response_text
                    if config.LOG_LEVEL == "DEBUG":
                        print(f"‚úÖ Added thanks prefix to success response")
                        
        except Exception as e:
            print(f"‚ùå ResponseGenerator failed: {e}")
            response_text = get_error_response("generation_failed")
            # –°–æ–∑–¥–∞—ë–º metadata –¥–ª—è —Å–ª—É—á–∞—è –æ—à–∏–±–∫–∏
            response_metadata = {
                "intent": status,
                "user_signal": user_signal,
                "cta_added": False,
                "cta_type": None,
                "humor_generated": False
            }
    else:
        # –î–ª—è offtopic –∏ need_simplification —Ç–æ–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ
        pure_social_intents = ["greeting", "thanks", "farewell", "apology"]
        is_pure_social = social_context in pure_social_intents and status == "offtopic"
        
        if is_pure_social:
            # –î–ª—è —á–∏—Å—Ç—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º offtopic —Å–æ–æ–±—â–µ–Ω–∏–µ
            base_message = ""
        else:
            base_message = message if message else DEFAULT_FALLBACK
        documents_used = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º metadata –¥–ª—è offtopic —Å–ª—É—á–∞–µ–≤
        response_metadata = {
            "intent": status,
            "user_signal": user_signal,
            "cta_added": False,
            "cta_type": None,
            "humor_generated": False
        }
        
        # === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û ===
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —é–º–æ—Ä–∞ –¥–ª—è content offtopic
        if status == "offtopic" and not is_pure_social and zhvanetsky_generator and zhvanetsky_safety_checker:
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            print(f"üîç DEBUG main.py: Checking humor for offtopic. user_signal='{user_signal}', is_pure_social={is_pure_social}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π SafetyChecker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            can_use_humor, humor_context = zhvanetsky_safety_checker.should_use_humor(
                message=request.message,
                user_signal=user_signal,
                history=history_messages,
                user_id=request.user_id,
                is_pure_social=is_pure_social,
                base_probability=config.ZHVANETSKY_PROBABILITY
            )
            
            if can_use_humor:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —é–º–æ—Ä —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                    humor_response = await zhvanetsky_generator.generate_humor(
                        message=request.message,
                        history=history_messages,
                        user_signal=user_signal,
                        user_id=request.user_id,
                        timeout=config.ZHVANETSKY_TIMEOUT
                    )
                    
                    if humor_response:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
                        base_message = humor_response
                        # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —é–º–æ—Ä–∞ –¥–ª—è rate limiting
                        zhvanetsky_safety_checker.mark_humor_used(request.user_id)
                        # –ü–æ–º–µ—á–∞–µ–º –≤ metadata —á—Ç–æ —é–º–æ—Ä –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                        response_metadata["humor_generated"] = True
                        print(f"üé≠ Zhvanetsky humor used for user {request.user_id}")
                    else:
                        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π offtopic
                        from standard_responses import get_offtopic_response
                        base_message = get_offtopic_response()
                        
                except Exception as e:
                    print(f"‚ùå Zhvanetsky generation failed: {e}")
                    from standard_responses import get_offtopic_response
                    base_message = get_offtopic_response()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ offtopic/need_simplification –æ—Ç–≤–µ—Ç–∞–º
        if social_context:
            if social_context == "greeting":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                if not social_state.has_greeted(request.user_id):
                    if is_pure_social:
                        # –î–ª—è —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        greetings = [
                            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã Ukido. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö.",
                            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ì–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —à–∫–æ–ª—ã Ukido."
                        ]
                        response_text = random.choice(greetings)
                    else:
                        # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                        response_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {base_message}"
                    social_state.mark_greeted(request.user_id)
                else:
                    response_text = base_message if base_message else "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ß–µ–º –ø–æ–º–æ—á—å?"
            elif social_context == "thanks":
                if is_pure_social:
                    # –î–ª—è —á–∏—Å—Ç–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    thanks_responses = [
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã.",
                        "–†–∞–¥—ã –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ.",
                        "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
                    ]
                    response_text = random.choice(thanks_responses)
                else:
                    # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    response_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! {base_message}"
            elif social_context == "apology":
                if is_pure_social:
                    # –î–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    apology_responses = [
                        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                        "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
                    ]
                    response_text = random.choice(apology_responses)
                else:
                    # –î–ª—è mixed —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    response_text = f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! {base_message}"
            elif social_context == "repeated_greeting":
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                response_text = base_message
            elif social_context == "acknowledgment":
                # –î–ª—è —Å–æ–≥–ª–∞—à–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
                acknowledgment_responses = [
                    "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –µ—â—ë –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö?",
                    "–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∫–æ–ª–µ Ukido?",
                    "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—â—ë –Ω—É–∂–Ω–∞?",
                    "–°—É–ø–µ—Ä! –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    "–†–∞–¥–∞, —á—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ! –ß—Ç–æ –µ—â—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?"
                ]
                response_text = random.choice(acknowledgment_responses)
                print(f"‚ÑπÔ∏è Using acknowledgment response for '{request.message}'")
            elif social_context == "farewell":
                # –î–ª—è –ø—Ä–æ—â–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ—â–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É, –±–µ–∑ offtopic —Å–æ–æ–±—â–µ–Ω–∏—è
                farewells = [
                    "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!",
                    "–†–∞–¥—ã –±—ã–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                    "–£–¥–∞—á–∏ –≤–∞–º! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                    "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ! –î–æ —Å–≤—è–∑–∏!"
                ]
                response_text = random.choice(farewells)
                # –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º base_message –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏—è!
            else:
                response_text = base_message
        else:
            response_text = base_message
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ ===
    if history:
        history.add_message(request.user_id, "user", request.message)
        # –ü–µ—Ä–µ–¥–∞—ë–º metadata –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        history.add_message(request.user_id, "assistant", response_text, response_metadata)
        
        # === –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===
        # –°–æ–∑–¥–∞—ë–º —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            state_snapshot = create_state_snapshot(
                history, user_signals_history, social_state, request.user_id
            )
            persistence_manager.save_state(request.user_id, state_snapshot)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {request.user_id}: {e}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    latency = time.time() - start
    request_count += 1
    total_latency += latency
    
    if config.LOG_LEVEL == "DEBUG":
        print(f"‚è±Ô∏è Latency: {latency:.2f}s | Signal: {user_signal}")
    
    # === –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
    return ChatResponse(
        response=response_text,
        relevant_documents=documents_used if 'documents_used' in locals() else [],
        intent=status,
        confidence=1.0,  # MVP: –≤—Å–µ–≥–¥–∞ 1.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        decomposed_questions=decomposed_questions,
        fuzzy_matched=fuzzy_matched,
        social=social_context,  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç Gemini
        user_signal=user_signal,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_signal –≤ –æ—Ç–≤–µ—Ç–µ
        metadata=response_metadata if 'response_metadata' in locals() else None,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º metadata —Å CTA –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        detected_language=detected_language  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º detected_language –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
    )


async def process_chat_message(user_id: str, message: str) -> dict:
    """
    –ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ /chat endpoint
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å response, intent, user_signal
    """
    # –°–æ–∑–¥–∞—ë–º ChatRequest –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    chat_request = ChatRequest(user_id=user_id, message=message)
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤—ã–∑–æ–≤
    # –†–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É /chat endpoint
    response = await chat(chat_request)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º response –≤ —Å–ª–æ–≤–∞—Ä—å
    return response.dict()


@app.get("/chat/stream")
async def chat_stream(user_id: str, message: str):
    """
    SSE endpoint –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–∞—Ç–∞
    –ö–†–ò–¢–ò–ß–ù–û: headers –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Railway!
    """
    async def generate():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            result = await process_chat_message(user_id, message)
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (MVP - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º intent)
            metadata = {
                "intent": result.get("intent", "unknown"),
                "user_signal": result.get("user_signal", "exploring_only"),
                "humor_generated": result.get("metadata", {}).get("humor_generated", False) if result.get("metadata") else False
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            detected_language = result.get("detected_language", "ru")
            metadata["detected_language"] = detected_language
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            yield {
                "event": "metadata",
                "data": json.dumps(metadata)
            }
            
            # –í–ê–ñ–ù–û: –î–≤–µ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ç–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞!
            response_text = result.get("response", "")
            
            # –í–ï–¢–ö–ê 1: –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ - –ø—Å–µ–≤–¥–æ-—Å—Ç—Ä–∏–º–∏–Ω–≥ (–ù–ï –¢–†–û–ì–ê–ï–ú!)
            if detected_language == "ru":
                # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
                newline_count = response_text.count('\n')
                print(f"üîç DEBUG: –í –æ—Ç–≤–µ—Ç–µ {newline_count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫")
                print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {repr(response_text[:200])}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤
                lines = response_text.split('\n')
                
                for line_idx, line in enumerate(lines):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
                    if line_idx > 0:
                        yield {
                            "event": "message", 
                            "data": "\n"  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
                        }
                    
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è (–±—ã–ª –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â—ë –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥
                    if not line.strip():
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞
                    words = line.split()
                    
                    for i, word in enumerate(words):
                        if i > 0:
                            word = " " + word
                            
                        yield {
                            "event": "message",
                            "data": word
                        }
                        
                        # 50ms –º–µ–∂–¥—É –°–õ–û–í–ê–ú–ò –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
                        await asyncio.sleep(0.05)
            
            # –í–ï–¢–ö–ê 2: –î–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ - –†–ï–ê–õ–¨–ù–´–ô —Å—Ç—Ä–∏–º–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–∞!
            else:
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô —Å—Ç—Ä–∏–º–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {detected_language}")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä
                from translator import SmartTranslator
                from openrouter_client import OpenRouterClient
                
                # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä
                translator_client = OpenRouterClient(
                    api_key=config.OPENROUTER_API_KEY,
                    model=config.TRANSLATION_MODEL
                )
                translator = SmartTranslator(translator_client)
                
                # –°—Ç—Ä–∏–º–∏–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–ø—Ä—è–º—É—é!
                async for chunk in translator.translate_stream(
                    text=response_text,
                    target_language=detected_language,
                    user_context=message
                ):
                    if chunk:
                        yield {
                            "event": "message",
                            "data": chunk
                        }
                
                print(f"‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {detected_language} –∑–∞–≤–µ—Ä—à—ë–Ω")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
            yield {
                "event": "done",
                "data": "completed"
            }
            
        except Exception as e:
            print(f"‚ùå SSE Error: {e}")
            yield {
                "event": "error",
                "data": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            }
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: Headers –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏!
    headers = {
        'X-Accel-Buffering': 'no',      # –û—Ç–∫–ª—é—á–∞–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é nginx/proxy
        'Cache-Control': 'no-cache',     # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ  
        'Connection': 'keep-alive'       # –î–µ—Ä–∂–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    }
    
    return EventSourceResponse(generate(), headers=headers)


@app.get("/metrics")
async def get_metrics():
    """Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫ State Machine"""
    global signal_stats, request_count, total_latency, start_time
    
    uptime = (datetime.now() - start_time).total_seconds()
    avg_latency = total_latency / request_count if request_count > 0 else 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    percentages = {}
    if request_count > 0:
        for signal, count in signal_stats.items():
            percentages[signal] = f"{(count / request_count * 100):.1f}%"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    zhvanetsky_metrics = {}
    if zhvanetsky_generator:
        zhvanetsky_metrics = zhvanetsky_generator.get_metrics()
        zhvanetsky_metrics["enabled"] = True
        zhvanetsky_metrics["probability"] = config.ZHVANETSKY_PROBABILITY
    else:
        zhvanetsky_metrics = {"enabled": False}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    persistence_metrics = persistence_manager.get_stats()
    
    return {
        "uptime_seconds": round(uptime, 2),
        "total_requests": request_count,
        "avg_latency": round(avg_latency, 3),
        "signal_distribution": signal_stats,
        "signal_percentages": percentages,
        "most_common_signal": max(signal_stats, key=signal_stats.get) if request_count > 0 and signal_stats else None,
        "zhvanetsky_humor": zhvanetsky_metrics,
        "persistence": persistence_metrics
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "version": "0.8.0-state-machine"}


@app.post("/clear_history/{user_id}")
async def clear_history(user_id: str):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global history
    if history:
        history.clear_user_history(user_id)
        return {"status": "success", "message": f"History cleared for user {user_id}"}
    return {"status": "error", "message": "History manager not available"}


@app.get("/api-info")
async def api_info():
    """API info —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {"service": "Ukido Chatbot API", "version": "0.7.3"}


# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
# –í–ê–ñ–ù–û: –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, –ø–æ—Å–ª–µ –≤—Å–µ—Ö API endpoints
# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("static", exist_ok=True)
app.mount("/", StaticFiles(directory="static", html=True), name="static")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.getenv("PORT", 8000))
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("=" * 50)
    print("üöÄ Ukido AI Assistant v0.7.3")
    print("üìù –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Router ‚Üí Generator")
    print(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
    print(f"üíæ –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏: {config.HISTORY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=port)