"""
gemini_cached_client.py - –ö–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Context Caching –¥–ª—è Gemini
–ö–µ—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞ (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + —Å–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
"""

import hashlib
import json
from typing import List, Dict, Optional, Any
from src.openrouter_client import OpenRouterClient


class GeminiCachedClient(OpenRouterClient):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Gemini"""
    
    def __init__(self, api_key: str, seed: int = None, max_tokens: int = None, temperature: float = 0.3):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Gemini"""
        super().__init__(api_key, seed, max_tokens, temperature, model="google/gemini-2.5-flash")
        self.cached_context = None
        self.context_hash = None
        
    def _compute_context_hash(self, system_content: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return hashlib.md5(system_content.encode()).hexdigest()
    
    async def chat_with_cache(
        self, 
        system_content: str,
        user_message: str,
        history: Optional[List[Dict[str, str]]] = None
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
        
        Args:
            system_content: –°—Ç–∞—Ç–∏—á–Ω–∞—è —á–∞—Å—Ç—å (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + —Å–∞–º–º–∞—Ä–∏)
            user_message: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å (—Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å)
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        new_hash = self._compute_context_hash(system_content)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.context_hash != new_hash:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            print("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Gemini")
            self.context_hash = new_hash
            self.cached_context = system_content
            
        # –í Gemini 2.5 –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ù–æ —á–µ—Ä–µ–∑ OpenRouter —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è —á–∞—Å—Ç—å (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–µ—à–∏—Ä—É–µ–º–∞—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Gemini)
        messages.append({
            "role": "system",
            "content": system_content
        })
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if history:
            messages.extend(history)
            
        # –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({
            "role": "user",
            "content": user_message
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        # Gemini –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–µ—à–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
        return await self.chat(messages)
    
    async def chat_with_prefix_cache(
        self,
        static_prefix: str,
        dynamic_suffix: str,
        model_params: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —è–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç–∏.
        
        Args:
            static_prefix: –ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞ (–∫–µ—à–∏—Ä—É–µ—Ç—Å—è)
            dynamic_suffix: –ò–∑–º–µ–Ω—è–µ–º–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞
            model_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_content = f"{static_prefix}\n\n{dynamic_suffix}"
        
        messages = [
            {"role": "user", "content": full_content}
        ]
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        kwargs = model_params or {}
        return await self.chat(messages, **kwargs)