"""
SimpleCTABlocker - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—É–º–µ—Å—Ç–Ω—ã—Ö CTA
MVP –≤–µ—Ä—Å–∏—è: —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
"""

from typing import Dict, Set, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


class SimpleCTABlocker:
    """
    –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ CTA –¥–ª—è MVP.
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–∫–∞–∑—ã –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏).
    """
    
    def __init__(self):
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        self.completed_actions: Dict[str, Set[str]] = {}  # user_id -> set(['paid', 'registered', etc])
        self.refusals: Dict[str, Dict] = {}  # user_id -> {'count': 0, 'block_until_message': 0}
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.COMPLETION_TRIGGERS = {
            'paid': ['–æ–ø–ª–∞—Ç–∏–ª', '–∑–∞–ø–ª–∞—Ç–∏–ª', '–≤–Ω—ë—Å –æ–ø–ª–∞—Ç—É', '–ø–µ—Ä–µ–≤—ë–ª –¥–µ–Ω—å–≥–∏', '–æ–ø–ª–∞—á–µ–Ω–æ', '–≤–Ω–µ—Å–ª–∞ –æ–ø–ª–∞—Ç—É'],
            'registered': ['–∑–∞–ø–∏—Å–∞–ª—Å—è', '–∑–∞–ø–∏—Å–∞–ª–∞—Å—å', '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª', '–∑–∞–ø–∏—Å–∞–ª–∏ —Ä–µ–±–µ–Ω–∫–∞', '–∑–∞–ø–∏—Å–∞–ª —Å—ã–Ω–∞', '–∑–∞–ø–∏—Å–∞–ª–∞ –¥–æ—á—å'],
            'trial_completed': ['–±—ã–ª–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–º', '–ø—Ä–æ—à–ª–∏ –ø—Ä–æ–±–Ω–æ–µ', '–ø–æ—Å–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫'],
            'form_filled': ['–∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ä–º—É', '–∑–∞–ø–æ–ª–Ω–∏–ª–∞ –∞–Ω–∫–µ—Ç—É', '–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É']
        }
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ—Ç–∫–∞–∑–æ–≤
        self.HARD_REFUSALS = [
            '–Ω–µ –Ω–∞–¥–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–æ—Ç—Å—Ç–∞–Ω—å—Ç–µ', '–¥–æ—Å—Ç–∞–ª–∏', '–Ω–∞–¥–æ–µ–ª–∏', 
            '—Ö–≤–∞—Ç–∏—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å', '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'
        ]
        
        self.SOFT_REFUSALS = [
            '—è –ø–æ–¥—É–º–∞—é', '–ø–æ—Ç–æ–º —Ä–µ—à—É', '–ø–æ–∑–∂–µ', '–Ω–µ —Å–µ–π—á–∞—Å', '–º–æ–∂–µ—Ç –ø–æ—Ç–æ–º',
            '–Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å', '–ø–æ—Å–æ–≤–µ—Ç—É—é—Å—å —Å –º—É–∂–µ–º', '–ø–æ—Å–æ–≤–µ—Ç—É—é—Å—å —Å –∂–µ–Ω–æ–π'
        ]
        
        logger.info("üîß SimpleCTABlocker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (MVP –≤–µ—Ä—Å–∏—è)")
    
    def check_completed_action(self, user_id: str, message: str) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ None.
        """
        message_lower = message.lower()
        
        for action_type, triggers in self.COMPLETION_TRIGGERS.items():
            if any(trigger in message_lower for trigger in triggers):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if user_id not in self.completed_actions:
                    self.completed_actions[user_id] = set()
                
                self.completed_actions[user_id].add(action_type)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ '{action_type}'")
                return action_type
        
        return None
    
    def check_refusal(self, user_id: str, message: str, current_message_count: int) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –æ—Ç–∫–∞–∑–∞ ('hard' –∏–ª–∏ 'soft') –∏–ª–∏ None.
        """
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂—ë—Å—Ç–∫–∏–µ –æ—Ç–∫–∞–∑—ã
        if any(refusal in message_lower for refusal in self.HARD_REFUSALS):
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 7 —Å–æ–æ–±—â–µ–Ω–∏–π
            self.refusals[user_id] = {
                'count': self.refusals.get(user_id, {}).get('count', 0) + 1,
                'block_until_message': current_message_count + 7,
                'type': 'hard'
            }
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∂—ë—Å—Ç–∫–∏–π –æ—Ç–∫–∞–∑, CTA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_count + 7}")
            return 'hard'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—è–≥–∫–∏–µ –æ—Ç–∫–∞–∑—ã
        if any(refusal in message_lower for refusal in self.SOFT_REFUSALS):
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            self.refusals[user_id] = {
                'count': self.refusals.get(user_id, {}).get('count', 0) + 1,
                'block_until_message': current_message_count + 3,
                'type': 'soft'
            }
            logger.info(f"üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –º—è–≥–∫–∏–π –æ—Ç–∫–∞–∑, CTA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_count + 3}")
            return 'soft'
        
        return None
    
    def should_block_cta(self, user_id: str, current_message_count: int, user_signal: str = None) -> Tuple[bool, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å CTA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (should_block, reason).
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if user_id in self.completed_actions:
            actions = self.completed_actions[user_id]
            
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª - –±–ª–æ–∫–∏—Ä—É–µ–º CTA –ø—Ä–æ –æ–ø–ª–∞—Ç—É –∏ —Å–∫–∏–¥–∫–∏
            if 'paid' in actions and user_signal in ['price_sensitive', 'ready_to_buy']:
                logger.info(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ CTA –¥–ª—è {user_id}: —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å")
                return True, "user_already_paid"
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∞–ª—Å—è - –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
            if 'registered' in actions and user_signal == 'ready_to_buy':
                logger.info(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ CTA –¥–ª—è {user_id}: —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω")
                return True, "user_already_registered"
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–±–Ω–æ–µ - –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–±–Ω–æ–µ —Å–Ω–æ–≤–∞
            if 'trial_completed' in actions:
                # –ú–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å, –Ω–æ –Ω–µ –ø—Ä–æ–±–Ω–æ–µ
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞–∑—ã
        if user_id in self.refusals:
            refusal_data = self.refusals[user_id]
            if current_message_count < refusal_data['block_until_message']:
                remaining = refusal_data['block_until_message'] - current_message_count
                logger.info(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ CTA –¥–ª—è {user_id}: –æ—Ç–∫–∞–∑, –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return True, f"user_refused_{refusal_data['type']}"
        
        return False, ""
    
    def get_cta_frequency_modifier(self, user_id: str) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã CTA –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫–∞–∑–æ–≤.
        1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞, 0.5 = –≤ –¥–≤–∞ —Ä–∞–∑–∞ —Ä–µ–∂–µ, –∏ —Ç.–¥.
        """
        if user_id not in self.refusals:
            return 1.0
        
        refusal_count = self.refusals[user_id].get('count', 0)
        
        if refusal_count >= 3:
            return 0.2  # –û—á–µ–Ω—å —Ä–µ–¥–∫–æ (20% –æ—Ç –Ω–æ—Ä–º—ã)
        elif refusal_count >= 2:
            return 0.4  # –†–µ–∂–µ (40% –æ—Ç –Ω–æ—Ä–º—ã)
        elif refusal_count >= 1:
            return 0.7  # –ù–µ–º–Ω–æ–≥–æ —Ä–µ–∂–µ (70% –æ—Ç –Ω–æ—Ä–º—ã)
        
        return 1.0
    
    def get_user_status(self, user_id: str) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        """
        return {
            'completed_actions': list(self.completed_actions.get(user_id, set())),
            'refusal_data': self.refusals.get(user_id, {}),
            'has_paid': 'paid' in self.completed_actions.get(user_id, set()),
            'has_registered': 'registered' in self.completed_actions.get(user_id, set())
        }
    
    def clear_user_data(self, user_id: str):
        """
        –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
        """
        if user_id in self.completed_actions:
            del self.completed_actions[user_id]
        if user_id in self.refusals:
            del self.refusals[user_id]
        logger.info(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã")