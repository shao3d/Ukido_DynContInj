"""
hubspot_client.py - –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HubSpot API
"""

import httpx
import json
from typing import Dict, Optional, List
from datetime import datetime
import os
from config import Config


class HubSpotClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HubSpot API"""

    def __init__(self):
        self.api_key = Config.HUBSPOT_PRIVATE_APP_TOKEN
        self.portal_id = Config.HUBSPOT_PORTAL_ID
        self.base_url = f"https://api.hubapi.com/crm/v3/objects"

        if not self.api_key:
            raise ValueError("HUBSPOT_PRIVATE_APP_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

        # HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        self.client = httpx.AsyncClient(
            headers={
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            },
            timeout=30.0
        )

    async def create_or_update_contact(
        self,
        email: str,
        first_name: str,
        last_name: str,
        phone: Optional[str] = None,
        additional_data: Optional[Dict] = None
    ) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ HubSpot

        Args:
            email: Email –∫–æ–Ω—Ç–∞–∫—Ç–∞
            first_name: –ò–º—è
            last_name: –§–∞–º–∏–ª–∏—è
            phone: –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—á–Ω–∏–∫, utm –º–µ—Ç–∫–∏ –∏ —Ç.–¥.)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        """

        # –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        properties = {
            "email": email,
            "firstname": first_name,
            "lastname": last_name
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if phone:
            properties["phone"] = phone

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if additional_data:
            properties.update(additional_data)

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ email
        existing_contact = await self.find_contact_by_email(email)

        if existing_contact:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
            contact_id = existing_contact.get("id")
            result = await self.update_contact(contact_id, properties)

            return {
                "action": "updated",
                "contact_id": contact_id,
                "existing": True,
                "result": result
            }
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            result = await self.create_contact(properties)

            return {
                "action": "created",
                "contact_id": result.get("id"),
                "existing": False,
                "result": result
            }

    async def find_contact_by_email(self, email: str) -> Optional[Dict]:
        """–ò—â–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ email"""

        search_payload = {
            "filterGroups": [
                {
                    "filters": [
                        {
                            "propertyName": "email",
                            "operator": "EQ",
                            "value": email
                        }
                    ]
                }
            ],
            "properties": ["id", "email", "firstname", "lastname", "createdate"],
            "limit": 1
        }

        try:
            response = await self.client.post(
                f"{self.base_url}/contacts/search",
                json=search_payload
            )

            if response.status_code == 200:
                data = response.json()
                results = data.get("results", [])

                if results:
                    return results[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ HubSpot: {e}")
            return None

    async def create_contact(self, properties: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""

        payload = {
            "properties": properties
        }

        try:
            response = await self.client.post(
                f"{self.base_url}/contacts",
                json=payload
            )

            if response.status_code == 201:
                result = response.json()
                print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ HubSpot: {result.get('id')}")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                raise Exception(f"HubSpot API error: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ HubSpot: {e}")
            raise

    async def update_contact(self, contact_id: str, properties: Dict) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç"""

        payload = {
            "properties": properties
        }

        try:
            response = await self.client.patch(
                f"{self.base_url}/contacts/{contact_id}",
                json=payload
            )

            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ HubSpot: {contact_id}")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                raise Exception(f"HubSpot API error: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ HubSpot: {e}")
            raise

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç"""
        await self.client.aclose()


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
async def test_hubspot_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å HubSpot API"""

    try:
        client = HubSpotClient()

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        result = await client.create_or_update_contact(
            email="test@example.com",
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            phone="+380501234567",
            additional_data={
                "source": "trial_lesson_form",
                "trial_lesson_requested": datetime.now().isoformat()
            }
        )

        print(f"üß™ –¢–µ—Å—Ç HubSpot –∫–ª–∏–µ–Ω—Ç–∞: {result}")

        await client.close()
        return result

    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç HubSpot –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return None


if __name__ == "__main__":
    import asyncio
    asyncio.run(test_hubspot_client())