#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ
"""

import asyncio
import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))
sys.path.insert(0, str(Path(__file__).parent / "src"))

from sandbox_v2 import SandboxV2

async def run_humor_test(scenario_num: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ test_zhvanetsky_humor.json"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
    test_file = "tests/test_zhvanetsky_humor.json"
    with open(test_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    scenarios = data['scenarios']
    
    if scenario_num < 1 or scenario_num > len(scenarios):
        print(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_num} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(scenarios)}")
        return
    
    scenario = scenarios[scenario_num - 1]
    sandbox = SandboxV2()
    
    print("=" * 80)
    print(f"üé≠ –¢–ï–°–¢ –Æ–ú–û–†–ê #{scenario_num}: {scenario['persona']}")
    print("=" * 80)
    print(f"üìù {scenario['description']}")
    print()
    
    user_id = f"humor_test_{scenario_num}"
    
    # –ü—Ä–æ–≥–æ–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, msg_data in enumerate(scenario['messages'], 1):
        message = msg_data['user']
        print(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
        
        result = await sandbox.process_message(user_id, message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üìä Status: {result.router_status}")
        print(f"üìä Signal: {result.user_signal if result.user_signal else 'N/A'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —é–º–æ—Ä
        response = result.response
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —é–º–æ—Ä–∞
        humor_markers = [
            "—Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–µ–ª–æ", "—Ä–∞–∑–≤–∏–≤–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å",  # —Å–ø–æ—Ä—Ç
            "–¥–æ–∂–¥—å", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–æ–¥ –Ω–∏–º",  # –ø–æ–≥–æ–¥–∞
            "–ò–ò", "—Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",  # —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            "—Å–º–µ—à–∞–ª–∏ –∏ –≤–∫—É—Å–Ω–æ", "–¥–µ—Ç—Å–∫–∏–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤",  # –µ–¥–∞
            "–ø—Ä–æ–±–∫–∞—Ö", "–¥–≤–∏–∂–µ—Ç—Å—è –≤–ø–µ—Ä—ë–¥",  # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–≤—ã—Ä–∞—Å—Ç–∏—Ç—å"  # –æ–±—â–µ–µ
        ]
        
        has_humor = any(marker in response for marker in humor_markers)
        
        if result.router_status == 'offtopic':
            if has_humor:
                print(f"üé≠ –Æ–º–æ—Ä: ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù")
            else:
                print(f"üé≠ –Æ–º–æ—Ä: ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π offtopic)")
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response[:200]}{'...' if len(response) > 200 else ''}")
        print("-" * 40)
    
    print()

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —é–º–æ—Ä–∞"""
    print("\nüöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –Æ–ú–û–†–ê –ñ–í–ê–ù–ï–¶–ö–û–ì–û\n")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if len(sys.argv) > 1:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario_num = int(sys.argv[1])
        await run_humor_test(scenario_num)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
        key_tests = [
            1,  # –°–ø–æ—Ä—Ç - –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —é–º–æ—Ä
            2,  # –ü–æ–≥–æ–¥–∞ - –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —é–º–æ—Ä
            5,  # –ó–¥–æ—Ä–æ–≤—å–µ - –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å (–±–ª–µ–∫–ª–∏—Å—Ç)
            7,  # Anxiety - –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É)
            8,  # Price sensitive - –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É)
        ]
        
        for num in key_tests:
            await run_humor_test(num)
            print("\n" + "="*80 + "\n")
    
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(main())