#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —é–º–æ—Ä–∞ –ñ–≤–∞–Ω–µ—Ü–∫–æ–≥–æ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤.
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.zhvanetsky_humor import ZhvanetskyGenerator
from src.zhvanetsky_safety import SafetyChecker


async def test_safety_checker():
    """–¢–µ—Å—Ç SafetyChecker"""
    print("=" * 60)
    print("üîí –¢–ï–°–¢ SAFETY CHECKER")
    print("=" * 60)
    
    safety_checker = SafetyChecker()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–µ–∫–ª–∏—Å—Ç–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–µ–∫–ª–∏—Å—Ç–∞ —Ç–µ–º:")
    unsafe_messages = [
        "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞",
        "–í–æ–π–Ω–∞ —ç—Ç–æ —É–∂–∞—Å–Ω–æ",
        "–î–µ–Ω–µ–≥ –Ω–µ—Ç —Å–æ–≤—Å–µ–º"
    ]
    
    for msg in unsafe_messages:
        is_safe = safety_checker.is_safe_topic(msg)
        print(f"   '{msg}' - {'‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ' if is_safe else '‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ'}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ user_signal
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ user_signal:")
    signals = ["anxiety_about_child", "price_sensitive", "exploring_only", "ready_to_buy"]
    
    for signal in signals:
        is_ok = safety_checker.check_user_signal(signal)
        print(f"   {signal} - {'‚úÖ OK' if is_ok else '‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
    
    # –¢–µ—Å—Ç 3: Rate limiting
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting:")
    user_id = "test_user"
    
    # –ü–µ—Ä–≤—ã–µ 3 –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    for i in range(4):
        can_use = safety_checker.check_rate_limit(user_id, max_per_hour=3)
        if can_use and i < 3:
            safety_checker.mark_humor_used(user_id)
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {'‚úÖ –ú–æ–∂–Ω–æ' if can_use else '‚ùå –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω'}")
    
    print("\n‚úÖ SafetyChecker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


async def test_humor_mock():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ mock —Ä–µ–∂–∏–º–µ"""
    print("\n" + "=" * 60)
    print("üé≠ –¢–ï–°–¢ MOCK –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 60)
    
    config = Config()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º None –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è mock —Ä–µ–∂–∏–º–∞
    generator = ZhvanetskyGenerator(client=None, config=config)
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    history = [
        {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —à–∫–æ–ª–µ"},
        {"role": "assistant", "content": "Ukido - —à–∫–æ–ª–∞ soft skills..."}
    ]
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –æ—Ç–≤–µ—Ç–æ–≤:")
    test_messages = [
        "–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª?",
        "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è —Å–µ–≥–æ–¥–Ω—è"
    ]
    
    for msg in test_messages:
        print(f"\n   –í–æ–ø—Ä–æ—Å: {msg}")
        response = await generator.generate_humor(
            message=msg,
            history=history,
            user_signal="exploring_only",
            user_id="test_user",
            timeout=5.0
        )
        
        if response:
            print(f"   üé≠ Mock –æ—Ç–≤–µ—Ç: {response}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
    metrics = generator.get_metrics()
    for key, value in metrics.items():
        print(f"   {key}: {value}")
    
    print("\n‚úÖ Mock –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüöÄ –ó–ê–ü–£–°–ö –ë–ê–ó–û–í–´–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –Æ–ú–û–†–ê\n")
    
    # –¢–µ—Å—Ç SafetyChecker
    await test_safety_checker()
    
    # –¢–µ—Å—Ç mock –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await test_humor_mock()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())